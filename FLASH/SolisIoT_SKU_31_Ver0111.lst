
SolisIoT_SKU_31_Ver0111.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .boot_table   000000c0  00000000  00000000  00000174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .startupcode  000001dc  000000c0  000000c0  00000234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bootloadercode 000009ec  00000410  00000410  00000420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .bootloaderstring 000000d8  00001f00  00001f00  00000e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .interrupts   000000c0  00002000  00002000  00000ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .cfmprotect   00000010  00000400  00000400  00000410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .text         00006a20  000020c0  000020c0  00000fa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .myShareDataBlk 000000c8  1ffff000  1ffff000  00007a04  2**2
                  ALLOC
  8 .bss          00000bb4  20000000  20000000  00007a04  2**2
                  ALLOC
  9 .romp         0000003c  0001fc00  00008ae0  000079c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 ._user_heap_stack 00000800  20000bb4  20000bb4  00007a04  2**0
                  ALLOC
 11 .ARM.attributes 00000031  00000000  00000000  00007a04  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011915  00000000  00000000  00007a35  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004538  00000000  00000000  0001934a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00008509  00000000  00000000  0001d882  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000013c0  00000000  00000000  00025d8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macinfo 007d489a  00000000  00000000  0002714b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e6a7  00000000  00000000  007fb9e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00005933  00000000  00000000  0080a08c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      00000079  00000000  00000000  0080f9bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003998  00000000  00000000  0080fa38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .startupcode:

000000c0 <Boot_Reset>:
    if ((DeviceDataPrv->CurrentOperation == LDD_FLASH_VERIFY_ERASED_BLOCK) && (CurrentFlags & FTFA_PDD_COMMAND_COMPLETION_STATUS)) { /* Was the verification of erased block successfull? */
      DeviceDataPrv->CurrentErrorFlags |= LDD_FLASH_ERASE_VERIFICATION_ERROR; /* if no, set the Erase verification error flag */
    }
    if (DeviceDataPrv->CurrentErrorFlags != 0U) { /* Has some error occurred? */
      DeviceDataPrv->CurrentOperationStatus = LDD_FLASH_FAILED; /* If yes, set the operation state to FAILED */
      if (DeviceDataPrv->CurrentOperation != LDD_FLASH_READ) {
  c0:	4c0a      	ldr	r4, [pc, #40]	; (ec <Boot_Reset+0x2c>)
  c2:	6823      	ldr	r3, [r4, #0]
  c4:	3301      	adds	r3, #1
  c6:	d00e      	beq.n	e6 <Boot_Reset+0x26>
        MCM_PDD_InvalidateFlashCache(MCM_BASE_PTR);
  c8:	4b09      	ldr	r3, [pc, #36]	; (f0 <Boot_Reset+0x30>)
  ca:	781b      	ldrb	r3, [r3, #0]
  cc:	2baa      	cmp	r3, #170	; 0xaa
  ce:	d101      	bne.n	d4 <Boot_Reset+0x14>
  d0:	f000 f816 	bl	100 <Boot_Entry>
  d4:	4a07      	ldr	r2, [pc, #28]	; (f4 <Boot_Reset+0x34>)
        PE_NOP();
  d6:	4908      	ldr	r1, [pc, #32]	; (f8 <Boot_Reset+0x38>)
        PE_NOP();
  d8:	4b08      	ldr	r3, [pc, #32]	; (fc <Boot_Reset+0x3c>)
        PE_NOP();
  da:	50d1      	str	r1, [r2, r3]
      }
      IntFlashLdd1_OnError(DeviceDataPrv->UserDataPtr); /* Invoke the OnError event */
  dc:	4c06      	ldr	r4, [pc, #24]	; (f8 <Boot_Reset+0x38>)
  de:	6820      	ldr	r0, [r4, #0]
  e0:	4685      	mov	sp, r0
  e2:	6860      	ldr	r0, [r4, #4]
  e4:	4687      	mov	pc, r0
  e6:	f000 f80b 	bl	100 <Boot_Entry>
      return;                          /* End */
    }
    if (DeviceDataPrv->DataCounter == 0U) { /* If all the data has been successfully proceeded, finish the operation */
  ea:	46c0      	nop			; (mov r8, r8)
  ec:	00002004 	.word	0x00002004
      DeviceDataPrv->CurrentOperationStatus = LDD_FLASH_IDLE; /* If yes, change the operation state to IDLE */
  f0:	1ffff000 	.word	0x1ffff000
  f4:	e000e000 	.word	0xe000e000
      if (DeviceDataPrv->CurrentOperation != LDD_FLASH_READ) {
  f8:	00002000 	.word	0x00002000
  fc:	00000d08 	.word	0x00000d08

00000100 <Boot_Entry>:
        MCM_PDD_InvalidateFlashCache(MCM_BASE_PTR);
 100:	4b0e      	ldr	r3, [pc, #56]	; (13c <Boot_Entry+0x3c>)
 102:	2255      	movs	r2, #85	; 0x55
 104:	601a      	str	r2, [r3, #0]
 106:	22aa      	movs	r2, #170	; 0xaa
 108:	601a      	str	r2, [r3, #0]
 10a:	b672      	cpsid	i
        PE_NOP();
 10c:	4b0c      	ldr	r3, [pc, #48]	; (140 <Boot_Entry+0x40>)
        PE_NOP();
 10e:	4a0d      	ldr	r2, [pc, #52]	; (144 <Boot_Entry+0x44>)
        PE_NOP();
 110:	490d      	ldr	r1, [pc, #52]	; (148 <Boot_Entry+0x48>)
      }
      IntFlashLdd1_OnOperationComplete(DeviceDataPrv->UserDataPtr); /* Invoke the OnOperationComplete event */
 112:	50d1      	str	r1, [r2, r3]
 114:	4b0d      	ldr	r3, [pc, #52]	; (14c <Boot_Entry+0x4c>)
 116:	2100      	movs	r1, #0
 118:	4a0d      	ldr	r2, [pc, #52]	; (150 <Boot_Entry+0x50>)
 11a:	c302      	stmia	r3!, {r1}
 11c:	4293      	cmp	r3, r2
      return;                          /* End */
    }
  }
  switch (DeviceDataPrv->CurrentOperation) { /* Define the batch counter's initial value according to the current operation */
 11e:	d1fc      	bne.n	11a <Boot_Entry+0x1a>
 120:	4a0c      	ldr	r2, [pc, #48]	; (154 <Boot_Entry+0x54>)
 122:	3a01      	subs	r2, #1
 124:	4b0c      	ldr	r3, [pc, #48]	; (158 <Boot_Entry+0x58>)
 126:	480d      	ldr	r0, [pc, #52]	; (15c <Boot_Entry+0x5c>)
 128:	ca02      	ldmia	r2!, {r1}
 12a:	c302      	stmia	r3!, {r1}
 12c:	4283      	cmp	r3, r0
 12e:	d1fb      	bne.n	128 <Boot_Entry+0x28>
    case LDD_FLASH_WRITE:              /* The current operation is Write */
      StepsOfBatch = WRITE_BATCH_SIZE; /* Initialize the batch counter */
 130:	4a0b      	ldr	r2, [pc, #44]	; (160 <Boot_Entry+0x60>)
 132:	4b0c      	ldr	r3, [pc, #48]	; (164 <Boot_Entry+0x64>)
 134:	601a      	str	r2, [r3, #0]
 136:	f000 f96b 	bl	410 <Boot_Command>
      break;                           /* Break of the case */
    case LDD_FLASH_ERASE:              /* The current operation is Erase */
      StepsOfBatch = ERASE_BATCH_SIZE; /* Initialize the batch counter */
 13a:	46c0      	nop			; (mov r8, r8)
 13c:	40048104 	.word	0x40048104
 140:	00000d08 	.word	0x00000d08
      break;                           /* Break of the case */
    case LDD_FLASH_READ:               /* The current operation is Read */
      StepsOfBatch = READ_BATCH_SIZE;  /* Initialize the batch counter */
 144:	e000e000 	.word	0xe000e000
 148:	00000000 	.word	0x00000000
      break;                           /* Break of the case */
 14c:	1ffff000 	.word	0x1ffff000
    case LDD_FLASH_ERASE_BLOCK:        /* The current operation is Erase block */
      StepsOfBatch = 1U;               /* Initialize the batch counter */
 150:	20003000 	.word	0x20003000
 154:	00000169 	.word	0x00000169
      break;                           /* Break of the case */
    case LDD_FLASH_VERIFY_ERASED_BLOCK: /* The current operation is Verify erased block */
      StepsOfBatch = 1U;               /* Initialize the batch counter */
 158:	20000260 	.word	0x20000260
 15c:	20000284 	.word	0x20000284
      break;                           /* Break of the case */
 160:	20000261 	.word	0x20000261
    default:
      break;
  }
  if (StepsOfBatch == UNLIMITED_BATCH_SIZE) { /* Is the unlimited batch of size selected for the current operation? */
 164:	20000284 	.word	0x20000284

00000168 <boot_RAMcode>:
 168:	b590      	push	{r4, r7, lr}
 16a:	af00      	add	r7, sp, #0
 16c:	4c05      	ldr	r4, [pc, #20]	; (184 <boot_RAMcode+0x1c>)
    NextBatchCycle = TRUE;             /* If the unlimited batch of size is used, set the NextCycle force variable to TRUE */
 16e:	2380      	movs	r3, #128	; 0x80
 170:	7023      	strb	r3, [r4, #0]
 172:	4b05      	ldr	r3, [pc, #20]	; (188 <boot_RAMcode+0x20>)
 174:	18e4      	adds	r4, r4, r3
  } else {
    NextBatchCycle = FALSE;            /* If the unlimited batch of size is used, set the NextCycle force variable to FALSE */
  }
  while ((StepsOfBatch > 0U) || (NextBatchCycle)) { /* Should another batch of the current operation be proceeded in this Main method processing? */
 176:	46c0      	nop			; (mov r8, r8)
      break;
  }
  if (StepsOfBatch == UNLIMITED_BATCH_SIZE) { /* Is the unlimited batch of size selected for the current operation? */
    NextBatchCycle = TRUE;             /* If the unlimited batch of size is used, set the NextCycle force variable to TRUE */
  } else {
    NextBatchCycle = FALSE;            /* If the unlimited batch of size is used, set the NextCycle force variable to FALSE */
 178:	7823      	ldrb	r3, [r4, #0]
 17a:	b2db      	uxtb	r3, r3
 17c:	2b00      	cmp	r3, #0
 17e:	d0fb      	beq.n	178 <boot_RAMcode+0x10>
  }
  while ((StepsOfBatch > 0U) || (NextBatchCycle)) { /* Should another batch of the current operation be proceeded in this Main method processing? */
 180:	46bd      	mov	sp, r7
    CurrentFlags = FTFA_PDD_GetFlags(FTFA_BASE_PTR); /* Read current hardware flags */
 182:	bd90      	pop	{r4, r7, pc}
 184:	40020000 	.word	0x40020000
 188:	13880000 	.word	0x13880000

0000018c <boot_Putc>:
    if ((CurrentFlags & (FTFA_PDD_READ_COLLISION_ERROR /* Check the error flags */\
 18c:	b500      	push	{lr}
 18e:	4b05      	ldr	r3, [pc, #20]	; (1a4 <boot_Putc+0x18>)
 190:	791a      	ldrb	r2, [r3, #4]
 192:	b252      	sxtb	r2, r2
 194:	2300      	movs	r3, #0
 196:	2a00      	cmp	r2, #0
 198:	da02      	bge.n	1a0 <boot_Putc+0x14>
                     | FTFA_PDD_ACCESS_ERROR \
                     | FTFA_PDD_PROTECTION_VIOLATION)) != 0U) {
      return;                          /* If there has some error occurred then end. The error will be analyzed in the next call of the Main method */
    }
    if (DeviceDataPrv->CurrentOperationStatus == LDD_FLASH_START) { /* Is this step the first step of the operation? */
 19a:	4b02      	ldr	r3, [pc, #8]	; (1a4 <boot_Putc+0x18>)
 19c:	71d8      	strb	r0, [r3, #7]
 19e:	2301      	movs	r3, #1
 1a0:	1c18      	adds	r0, r3, #0
      DeviceDataPrv->CurrentOperationStatus = LDD_FLASH_RUNNING; /* If yes, change Current operation status to RUNNING */
 1a2:	bd00      	pop	{pc}
 1a4:	4006a000 	.word	0x4006a000

000001a8 <boot_PutCRLF>:
 1a8:	b508      	push	{r3, lr}
    } else {
      DeviceDataPrv->CurrentFlashAddress += DeviceDataPrv->CurrentDataSize; /* If no, define of an address of a step of the current operation (address of the first step of the operation is defined by a operational method, which defines the operation */
 1aa:	4b0d      	ldr	r3, [pc, #52]	; (1e0 <boot_PutCRLF+0x38>)
 1ac:	781b      	ldrb	r3, [r3, #0]
 1ae:	2b00      	cmp	r3, #0
 1b0:	d10a      	bne.n	1c8 <boot_PutCRLF+0x20>
 1b2:	200d      	movs	r0, #13
 1b4:	f7ff ffea 	bl	18c <boot_Putc>
      if ((DeviceDataPrv->CurrentOperation == LDD_FLASH_READ) || (DeviceDataPrv->CurrentOperation == LDD_FLASH_WRITE)) {
 1b8:	2300      	movs	r3, #0
 1ba:	2801      	cmp	r0, #1
 1bc:	d10e      	bne.n	1dc <boot_PutCRLF+0x34>
 1be:	2201      	movs	r2, #1
 1c0:	4b07      	ldr	r3, [pc, #28]	; (1e0 <boot_PutCRLF+0x38>)
 1c2:	701a      	strb	r2, [r3, #0]
 1c4:	2300      	movs	r3, #0
 1c6:	e009      	b.n	1dc <boot_PutCRLF+0x34>
        DeviceDataPrv->CurrentDataPtr += DeviceDataPrv->CurrentDataSize; /* Update of the Current data pointer */
 1c8:	200a      	movs	r0, #10
 1ca:	f7ff ffdf 	bl	18c <boot_Putc>
 1ce:	2300      	movs	r3, #0
 1d0:	2801      	cmp	r0, #1
 1d2:	d103      	bne.n	1dc <boot_PutCRLF+0x34>
 1d4:	2200      	movs	r2, #0
      }
    }
    switch(DeviceDataPrv->CurrentOperation) { /* Perform needed actions for the next step of the operation (for the next flash operation command) according to the current operation type */
 1d6:	4b02      	ldr	r3, [pc, #8]	; (1e0 <boot_PutCRLF+0x38>)
 1d8:	701a      	strb	r2, [r3, #0]
 1da:	2301      	movs	r3, #1
 1dc:	1c18      	adds	r0, r3, #0
 1de:	bd08      	pop	{r3, pc}
 1e0:	20000288 	.word	0x20000288

000001e4 <boot_Getc>:
 1e4:	b580      	push	{r7, lr}
 1e6:	af00      	add	r7, sp, #0
 1e8:	4b06      	ldr	r3, [pc, #24]	; (204 <boot_Getc+0x20>)
      case LDD_FLASH_READ:             /* Read operation */
        *DeviceDataPrv->CurrentDataPtr = *(uint8_t *)DeviceDataPrv->CurrentFlashAddress; /* Read data from flash */
 1ea:	781b      	ldrb	r3, [r3, #0]
 1ec:	b2db      	uxtb	r3, r3
 1ee:	2b01      	cmp	r3, #1
 1f0:	d103      	bne.n	1fa <boot_Getc+0x16>
 1f2:	4b05      	ldr	r3, [pc, #20]	; (208 <boot_Getc+0x24>)
 1f4:	79db      	ldrb	r3, [r3, #7]
        DeviceDataPrv->DataCounter--;  /* Update of the Data counter */
 1f6:	b2db      	uxtb	r3, r3
 1f8:	e000      	b.n	1fc <boot_Getc+0x18>
 1fa:	2300      	movs	r3, #0
 1fc:	1c18      	adds	r0, r3, #0
 1fe:	46bd      	mov	sp, r7
        break;
 200:	bd80      	pop	{r7, pc}
      case LDD_FLASH_ERASE:            /* Erase operation */
        DeviceDataPrv->DataCounter -= (uint32_t)(IntFlashLdd1_ERASABLE_UNIT_SIZE); /* Update of the Data counter */
 202:	46c0      	nop			; (mov r8, r8)
 204:	5286a004 	.word	0x5286a004
 208:	4006a000 	.word	0x4006a000

0000020c <boot_Gethex>:
 20c:	b590      	push	{r4, r7, lr}
        break;
 20e:	b083      	sub	sp, #12
      case LDD_FLASH_ERASE_BLOCK:      /* Erase block operation */
        DeviceDataPrv->DataCounter--;  /* Update of the Data counter (the unit is a block not a byte) */
 210:	af00      	add	r7, sp, #0
 212:	1dfc      	adds	r4, r7, #7
 214:	f7ff ffe6 	bl	1e4 <boot_Getc>
 218:	1c03      	adds	r3, r0, #0
        break;
 21a:	7023      	strb	r3, [r4, #0]
      case LDD_FLASH_VERIFY_ERASED_BLOCK:
        DeviceDataPrv->DataCounter--;  /* Update of the Data counter (the unit is a block not a byte) */
 21c:	1dfb      	adds	r3, r7, #7
 21e:	781b      	ldrb	r3, [r3, #0]
 220:	2b00      	cmp	r3, #0
 222:	d101      	bne.n	228 <boot_Gethex+0x1c>
 224:	2300      	movs	r3, #0
        FTFA_PDD_SetFCCOBDataSize(FTFA_BASE_PTR, DeviceDataPrv->CurrentDataSize); /* Set data size */
 226:	e01b      	b.n	260 <boot_Gethex+0x54>
 228:	1dfb      	adds	r3, r7, #7
 22a:	781b      	ldrb	r3, [r3, #0]
 22c:	2b2f      	cmp	r3, #47	; 0x2f
 22e:	d913      	bls.n	258 <boot_Gethex+0x4c>
 230:	1dfb      	adds	r3, r7, #7
 232:	781b      	ldrb	r3, [r3, #0]
 234:	2b39      	cmp	r3, #57	; 0x39
 236:	d903      	bls.n	240 <boot_Gethex+0x34>
 238:	1dfb      	adds	r3, r7, #7
 23a:	781b      	ldrb	r3, [r3, #0]
 23c:	2b40      	cmp	r3, #64	; 0x40
 23e:	d90b      	bls.n	258 <boot_Gethex+0x4c>
        FTFA_PDD_WriteFCCOB6Reg(FTFA_BASE_PTR, READ_1S_BLOCK_NORMAL_MARGINE_LEVEL); /* Set the Read margin level for the Read 1s block operation */
 240:	1dfb      	adds	r3, r7, #7
 242:	781b      	ldrb	r3, [r3, #0]
 244:	2b46      	cmp	r3, #70	; 0x46
        break;
 246:	d903      	bls.n	250 <boot_Gethex+0x44>
      case LDD_FLASH_WRITE:
        DstAddrOffset = (uint8_t)DeviceDataPrv->CurrentFlashAddress & WRITABLE_UNIT_MASK; /* Compute the address of the writable unit */
 248:	1dfb      	adds	r3, r7, #7
 24a:	781b      	ldrb	r3, [r3, #0]
 24c:	2b60      	cmp	r3, #96	; 0x60
 24e:	d903      	bls.n	258 <boot_Gethex+0x4c>
 250:	1dfb      	adds	r3, r7, #7
 252:	781b      	ldrb	r3, [r3, #0]
 254:	2b66      	cmp	r3, #102	; 0x66
 256:	d901      	bls.n	25c <boot_Gethex+0x50>
        MaxPossiblePrgBytes = (WRITABLE_UNIT_MASK - DstAddrOffset) + 1U; /* Compute number of bytes from the destination address to the end of the writable unit */
 258:	23ff      	movs	r3, #255	; 0xff
 25a:	e001      	b.n	260 <boot_Gethex+0x54>
 25c:	1dfb      	adds	r3, r7, #7
 25e:	781b      	ldrb	r3, [r3, #0]
 260:	1c18      	adds	r0, r3, #0
 262:	46bd      	mov	sp, r7
 264:	b003      	add	sp, #12
 266:	bd90      	pop	{r4, r7, pc}

00000268 <boot_ASCIItoHex>:
        if (DeviceDataPrv->DataCounter < MaxPossiblePrgBytes) {
 268:	b580      	push	{r7, lr}
 26a:	af00      	add	r7, sp, #0
 26c:	1c03      	adds	r3, r0, #0
 26e:	3b30      	subs	r3, #48	; 0x30
 270:	b2db      	uxtb	r3, r3
 272:	2b09      	cmp	r3, #9
 274:	d901      	bls.n	27a <boot_ASCIItoHex+0x12>
          PrgBytesCount = (uint8_t)DeviceDataPrv->DataCounter;
 276:	3b07      	subs	r3, #7
 278:	b2db      	uxtb	r3, r3
 27a:	2b0f      	cmp	r3, #15
 27c:	d901      	bls.n	282 <boot_ASCIItoHex+0x1a>
 27e:	3b20      	subs	r3, #32
 280:	b2db      	uxtb	r3, r3
        } else {
          PrgBytesCount = MaxPossiblePrgBytes;
 282:	1c18      	adds	r0, r3, #0
 284:	46bd      	mov	sp, r7
 286:	bd80      	pop	{r7, pc}

00000288 <boot_ASCIItoUpper>:
 288:	b580      	push	{r7, lr}
 28a:	af00      	add	r7, sp, #0
 28c:	1c03      	adds	r3, r0, #0
        }
        for (i = 0U; i < PrgBytesCount; i++)  {
 28e:	2b60      	cmp	r3, #96	; 0x60
 290:	d901      	bls.n	296 <boot_ASCIItoUpper+0xe>
 292:	3b20      	subs	r3, #32
 294:	b2db      	uxtb	r3, r3
 296:	1c18      	adds	r0, r3, #0
          ((uint8_t *)(void *)&DataToPrg)[DstAddrOffset + i] = ((uint8_t *)(void *)(DeviceDataPrv->CurrentDataPtr))[i];
 298:	46bd      	mov	sp, r7
 29a:	bd80      	pop	{r7, pc}

Disassembly of section .bootloadercode:

00000410 <Boot_Command>:
**  This routine does not have the normal function prologue or epilogue : __attribute__((naked)).
**  This routine is compiled with optimization level 1 : __atribute__ ((optimze (1))).
**  This routine is placed in the Bootloader Code section : __attribute__ ((section (".bootcode"))).
*/
__attribute__ ((optimize (0), section (".bootcode"))) void Boot_Command (void)
{
 410:	b5f0      	push	{r4, r5, r6, r7, lr}
 412:	465f      	mov	r7, fp
 414:	4656      	mov	r6, sl
 416:	464d      	mov	r5, r9
 418:	4644      	mov	r4, r8
 41a:	b4f0      	push	{r4, r5, r6, r7}
 41c:	b095      	sub	sp, #84	; 0x54
 41e:	af00      	add	r7, sp, #0
  typ_PhaseID phase;
  
  /*
  **  Start executing state machine control for the Bootloader.
  */
  RunApp = 0;	//3/24/16 add back
 420:	4bbe      	ldr	r3, [pc, #760]	; (71c <Boot_Command+0x30c>)
 422:	2200      	movs	r2, #0
 424:	701a      	strb	r2, [r3, #0]
  //------------------------
  //11/25/15 change
  state = StateStart;
 426:	2500      	movs	r5, #0
  phase = PhaseWaitForS;
 428:	1c3b      	adds	r3, r7, #0
 42a:	3348      	adds	r3, #72	; 0x48
 42c:	2200      	movs	r2, #0
 42e:	701a      	strb	r2, [r3, #0]
  //------------------------
  i = 0;
 430:	2200      	movs	r2, #0
 432:	4690      	mov	r8, r2
  n = 0;
 434:	2400      	movs	r4, #0
  j	= 0;
 436:	2300      	movs	r3, #0
 438:	4699      	mov	r9, r3
 43a:	e000      	b.n	43e <Boot_Command+0x2e>
        }
        */
        state = StateProgramNext;
      }
    }
  }
 43c:	46c0      	nop			; (mov r8, r8)
  for (;;)
  {
    /*
    **  Assume that the COP watchdog is enabled and needs to be serviced.
    */
    reg_ptr32 = &SIM_SRVCOP;                  // point to the Service COP Register
 43e:	4ab8      	ldr	r2, [pc, #736]	; (720 <Boot_Command+0x310>)
 440:	4692      	mov	sl, r2
    *reg_ptr32 = 0x55;                        // write 1st byte
 442:	2355      	movs	r3, #85	; 0x55
 444:	4652      	mov	r2, sl
 446:	6013      	str	r3, [r2, #0]
    *reg_ptr32 = 0xAA;                        // write 2nd byte
 448:	23aa      	movs	r3, #170	; 0xaa
 44a:	4652      	mov	r2, sl
 44c:	6013      	str	r3, [r2, #0]
    **
    *** State *************************************************************************************
    **
    **  Initialize bootloader UART interface.
    */
    if (state == StateStart)
 44e:	2d00      	cmp	r5, #0
 450:	d116      	bne.n	480 <Boot_Command+0x70>
    {
      /*
      **  Send out a string of asterisks.
      */
      if (n == 0)
 452:	2c00      	cmp	r4, #0
 454:	d106      	bne.n	464 <Boot_Command+0x54>
      {
        if (boot_PutCRLF() == TRUE)
 456:	f7ff fea7 	bl	1a8 <boot_PutCRLF>
 45a:	1c03      	adds	r3, r0, #0
 45c:	2b01      	cmp	r3, #1
 45e:	d1ed      	bne.n	43c <Boot_Command+0x2c>
        {
          n = 40;
 460:	2428      	movs	r4, #40	; 0x28
        }
        */
        state = StateProgramNext;
      }
    }
  }
 462:	e7eb      	b.n	43c <Boot_Command+0x2c>
          n = 40;
        }
      }
      else
      {
        if (boot_Putc('*') == TRUE)
 464:	202a      	movs	r0, #42	; 0x2a
 466:	f7ff fe91 	bl	18c <boot_Putc>
 46a:	1c03      	adds	r3, r0, #0
 46c:	2b01      	cmp	r3, #1
 46e:	d1e5      	bne.n	43c <Boot_Command+0x2c>
        {
          if (--n == 0)
 470:	1e63      	subs	r3, r4, #1
 472:	b2dc      	uxtb	r4, r3
 474:	2c00      	cmp	r4, #0
 476:	d1e1      	bne.n	43c <Boot_Command+0x2c>
          {
            n = 40;
 478:	2428      	movs	r4, #40	; 0x28
            ptr8 = (uint8_t*)&str_Hello[0];
 47a:	4eaa      	ldr	r6, [pc, #680]	; (724 <Boot_Command+0x314>)
            state = StateHello;
 47c:	2501      	movs	r5, #1
        }
        */
        state = StateProgramNext;
      }
    }
  }
 47e:	e7dd      	b.n	43c <Boot_Command+0x2c>
    **
    **  Continue initialization text.
    **
    **  Send out bootloader "hello" message.
    */
    else if (state == StateHello)
 480:	2d01      	cmp	r5, #1
 482:	d10c      	bne.n	49e <Boot_Command+0x8e>
    {
      if (boot_Putc(*ptr8) == TRUE)
 484:	7833      	ldrb	r3, [r6, #0]
 486:	1c18      	adds	r0, r3, #0
 488:	f7ff fe80 	bl	18c <boot_Putc>
 48c:	1c03      	adds	r3, r0, #0
 48e:	2b01      	cmp	r3, #1
 490:	d1d4      	bne.n	43c <Boot_Command+0x2c>
      {
        ptr8++;
 492:	3601      	adds	r6, #1
        if (*ptr8 == 0)
 494:	7833      	ldrb	r3, [r6, #0]
 496:	2b00      	cmp	r3, #0
 498:	d1d0      	bne.n	43c <Boot_Command+0x2c>
        {
          state = StateHelloDone;
 49a:	2502      	movs	r5, #2
        }
        */
        state = StateProgramNext;
      }
    }
  }
 49c:	e7ce      	b.n	43c <Boot_Command+0x2c>
    **
    **  Finish initial hello and display prompt.
    **
    **  Send out a string of asterisks.
    */
    else if (state == StateHelloDone)
 49e:	2d02      	cmp	r5, #2
 4a0:	d111      	bne.n	4c6 <Boot_Command+0xb6>
    {
      if (n != 0)
 4a2:	2c00      	cmp	r4, #0
 4a4:	d008      	beq.n	4b8 <Boot_Command+0xa8>
      {
        if (boot_Putc('*') == TRUE)
 4a6:	202a      	movs	r0, #42	; 0x2a
 4a8:	f7ff fe70 	bl	18c <boot_Putc>
 4ac:	1c03      	adds	r3, r0, #0
 4ae:	2b01      	cmp	r3, #1
 4b0:	d1c4      	bne.n	43c <Boot_Command+0x2c>
        {
          n--;
 4b2:	1e63      	subs	r3, r4, #1
 4b4:	b2dc      	uxtb	r4, r3
        }
        */
        state = StateProgramNext;
      }
    }
  }
 4b6:	e7c1      	b.n	43c <Boot_Command+0x2c>
          n--;
        }
      }
      else
      {
        if (boot_PutCRLF() == TRUE)
 4b8:	f7ff fe76 	bl	1a8 <boot_PutCRLF>
 4bc:	1c03      	adds	r3, r0, #0
 4be:	2b01      	cmp	r3, #1
 4c0:	d1bc      	bne.n	43c <Boot_Command+0x2c>
        {
          state = StateNewPrompt;
 4c2:	2503      	movs	r5, #3
        }
        */
        state = StateProgramNext;
      }
    }
  }
 4c4:	e7ba      	b.n	43c <Boot_Command+0x2c>
    }
    /** State *************************************************************************************
    **
    **  Start displaying a new prompt.
    */
    else if (state == StateNewPrompt)
 4c6:	2d03      	cmp	r5, #3
 4c8:	d10a      	bne.n	4e0 <Boot_Command+0xd0>
    {
      ptr8 = (uint8_t*)&str_Prompt[0];
 4ca:	4e97      	ldr	r6, [pc, #604]	; (728 <Boot_Command+0x318>)
      //
      if (boot_Putc(*ptr8) == TRUE)
 4cc:	7833      	ldrb	r3, [r6, #0]
 4ce:	1c18      	adds	r0, r3, #0
 4d0:	f7ff fe5c 	bl	18c <boot_Putc>
 4d4:	1c03      	adds	r3, r0, #0
 4d6:	2b01      	cmp	r3, #1
 4d8:	d1b0      	bne.n	43c <Boot_Command+0x2c>
      {
    	ptr8++;
 4da:	3601      	adds	r6, #1
        state = StatePrompt;
 4dc:	2504      	movs	r5, #4
        }
        */
        state = StateProgramNext;
      }
    }
  }
 4de:	e7ad      	b.n	43c <Boot_Command+0x2c>
    }
    /** State *************************************************************************************
    **
    **  Complete prompt display and then wait for user input.
    */
    else if (state == StatePrompt)
 4e0:	2d04      	cmp	r5, #4
 4e2:	d10c      	bne.n	4fe <Boot_Command+0xee>
    {
      if (boot_Putc(*ptr8) == TRUE)
 4e4:	7833      	ldrb	r3, [r6, #0]
 4e6:	1c18      	adds	r0, r3, #0
 4e8:	f7ff fe50 	bl	18c <boot_Putc>
 4ec:	1c03      	adds	r3, r0, #0
 4ee:	2b01      	cmp	r3, #1
 4f0:	d1a4      	bne.n	43c <Boot_Command+0x2c>
      {
    	ptr8++;
 4f2:	3601      	adds	r6, #1
        if (*ptr8 == 0)
 4f4:	7833      	ldrb	r3, [r6, #0]
 4f6:	2b00      	cmp	r3, #0
 4f8:	d1a0      	bne.n	43c <Boot_Command+0x2c>
        {
        	state = StateGetCommand;
 4fa:	2505      	movs	r5, #5
        }
        */
        state = StateProgramNext;
      }
    }
  }
 4fc:	e79e      	b.n	43c <Boot_Command+0x2c>
    **
    **  Interpret single character command input.
    **
    **  Do not use the following characters for commands: A, B, C, D, E, F, or S.
    */
    else if (state == StateGetCommand)
 4fe:	2d05      	cmp	r5, #5
 500:	d158      	bne.n	5b4 <Boot_Command+0x1a4>
    {
    	//--------------------------------------------
    	//3/24/16 change
    
    	ResetUpdateOnly;
 502:	4b8a      	ldr	r3, [pc, #552]	; (72c <Boot_Command+0x31c>)
 504:	781a      	ldrb	r2, [r3, #0]
 506:	2101      	movs	r1, #1
 508:	438a      	bics	r2, r1
 50a:	701a      	strb	r2, [r3, #0]
    	command = boot_Getc();
 50c:	234f      	movs	r3, #79	; 0x4f
 50e:	19db      	adds	r3, r3, r7
 510:	469a      	mov	sl, r3
 512:	f7ff fe67 	bl	1e4 <boot_Getc>
 516:	1c03      	adds	r3, r0, #0
 518:	4652      	mov	r2, sl
 51a:	7013      	strb	r3, [r2, #0]
    	if(command != 0){
 51c:	1c3b      	adds	r3, r7, #0
 51e:	334f      	adds	r3, #79	; 0x4f
 520:	781b      	ldrb	r3, [r3, #0]
 522:	2b00      	cmp	r3, #0
 524:	d08a      	beq.n	43c <Boot_Command+0x2c>
    		if(command >= ' '){
 526:	1c3b      	adds	r3, r7, #0
 528:	334f      	adds	r3, #79	; 0x4f
 52a:	781b      	ldrb	r3, [r3, #0]
 52c:	2b1f      	cmp	r3, #31
 52e:	d985      	bls.n	43c <Boot_Command+0x2c>
    	    	//boot_Putc(command);                     // echo back character
    	    	
    			while(!boot_Putc(command));                     // echo back character
 530:	46c0      	nop			; (mov r8, r8)
 532:	1c3b      	adds	r3, r7, #0
 534:	334f      	adds	r3, #79	; 0x4f
 536:	781b      	ldrb	r3, [r3, #0]
 538:	1c18      	adds	r0, r3, #0
 53a:	f7ff fe27 	bl	18c <boot_Putc>
 53e:	1c03      	adds	r3, r0, #0
 540:	2b00      	cmp	r3, #0
 542:	d0f6      	beq.n	532 <Boot_Command+0x122>
    	    	command = boot_ASCIItoUpper(command);   // convert to uppercase
 544:	234f      	movs	r3, #79	; 0x4f
 546:	19db      	adds	r3, r3, r7
 548:	469a      	mov	sl, r3
 54a:	1c3b      	adds	r3, r7, #0
 54c:	334f      	adds	r3, #79	; 0x4f
 54e:	781b      	ldrb	r3, [r3, #0]
 550:	1c18      	adds	r0, r3, #0
 552:	f7ff fe99 	bl	288 <boot_ASCIItoUpper>
 556:	1c03      	adds	r3, r0, #0
 558:	4652      	mov	r2, sl
 55a:	7013      	strb	r3, [r2, #0]

    	    	/** Command *********************************************************
    	    	**
    	    	**  ? = Help
    	    	*/
    	    	if(command == '?'){
 55c:	1c3b      	adds	r3, r7, #0
 55e:	334f      	adds	r3, #79	; 0x4f
 560:	781b      	ldrb	r3, [r3, #0]
 562:	2b3f      	cmp	r3, #63	; 0x3f
 564:	d102      	bne.n	56c <Boot_Command+0x15c>
    	    		ptr8 = (uint8_t*)&str_List[0];
 566:	4e72      	ldr	r6, [pc, #456]	; (730 <Boot_Command+0x320>)
    	    		state = StatePrintString;
 568:	2506      	movs	r5, #6
        }
        */
        state = StateProgramNext;
      }
    }
  }
 56a:	e767      	b.n	43c <Boot_Command+0x2c>
    	    	}
    	    	/** Command *********************************************************
    	    	**
    	    	**  P = Program
    	    	*/
    	    	else if(command == 'P'){
 56c:	1c3b      	adds	r3, r7, #0
 56e:	334f      	adds	r3, #79	; 0x4f
 570:	781b      	ldrb	r3, [r3, #0]
 572:	2b50      	cmp	r3, #80	; 0x50
 574:	d104      	bne.n	580 <Boot_Command+0x170>
    	    		i=0;
 576:	2300      	movs	r3, #0
 578:	4698      	mov	r8, r3
    	    		ptr8 = (uint8_t*)&str_Erasing[0];
 57a:	4e6e      	ldr	r6, [pc, #440]	; (734 <Boot_Command+0x324>)
    	    		state = StateEraseFlash;
 57c:	2507      	movs	r5, #7
        }
        */
        state = StateProgramNext;
      }
    }
  }
 57e:	e75d      	b.n	43c <Boot_Command+0x2c>
    	    	else if(command == 'P'){
    	    		i=0;
    	    		ptr8 = (uint8_t*)&str_Erasing[0];
    	    		state = StateEraseFlash;
    	    	}
    	    	else if(command == 'U'){	
 580:	1c3b      	adds	r3, r7, #0
 582:	334f      	adds	r3, #79	; 0x4f
 584:	781b      	ldrb	r3, [r3, #0]
 586:	2b55      	cmp	r3, #85	; 0x55
 588:	d109      	bne.n	59e <Boot_Command+0x18e>
    	    		i=0;
 58a:	2200      	movs	r2, #0
 58c:	4690      	mov	r8, r2
    	    		SetUpdateOnly;
 58e:	4b67      	ldr	r3, [pc, #412]	; (72c <Boot_Command+0x31c>)
 590:	781a      	ldrb	r2, [r3, #0]
 592:	2101      	movs	r1, #1
 594:	430a      	orrs	r2, r1
 596:	701a      	strb	r2, [r3, #0]
    	    		ptr8 = (uint8_t*)&str_Erasing1[0];
 598:	4e67      	ldr	r6, [pc, #412]	; (738 <Boot_Command+0x328>)
    	    		state = StateEraseFlash;
 59a:	2507      	movs	r5, #7
        }
        */
        state = StateProgramNext;
      }
    }
  }
 59c:	e74e      	b.n	43c <Boot_Command+0x2c>
    	    	}
    	    	/** Command *********************************************************
    	    	**
    	    	**  G = Go Run Application
    	    	*/
    	    	else if (command == 'G'){
 59e:	1c3b      	adds	r3, r7, #0
 5a0:	334f      	adds	r3, #79	; 0x4f
 5a2:	781b      	ldrb	r3, [r3, #0]
 5a4:	2b47      	cmp	r3, #71	; 0x47
 5a6:	d102      	bne.n	5ae <Boot_Command+0x19e>
    	    		Boot_Reset();
 5a8:	f7ff fd8a 	bl	c0 <Boot_Reset>
        }
        */
        state = StateProgramNext;
      }
    }
  }
 5ac:	e746      	b.n	43c <Boot_Command+0x2c>
    	    	/** Command *********************************************************
    	    	**
    	    	**  Unknown command
    	    	*/
    	    	else{
    	    		ptr8 = (uint8_t*)&str_What[0];
 5ae:	4e63      	ldr	r6, [pc, #396]	; (73c <Boot_Command+0x32c>)
    	    		state = StatePrintString;
 5b0:	2506      	movs	r5, #6
        }
        */
        state = StateProgramNext;
      }
    }
  }
 5b2:	e743      	b.n	43c <Boot_Command+0x2c>
    }
    /** State *************************************************************************************
    **
    **  Finish sending a string and then display a new prompt.
    */
    else if (state == StatePrintString)
 5b4:	2d06      	cmp	r5, #6
 5b6:	d10e      	bne.n	5d6 <Boot_Command+0x1c6>
    {
      if (boot_Putc(*ptr8) == TRUE)
 5b8:	7833      	ldrb	r3, [r6, #0]
 5ba:	1c18      	adds	r0, r3, #0
 5bc:	f7ff fde6 	bl	18c <boot_Putc>
 5c0:	1c03      	adds	r3, r0, #0
 5c2:	2b01      	cmp	r3, #1
 5c4:	d000      	beq.n	5c8 <Boot_Command+0x1b8>
 5c6:	e739      	b.n	43c <Boot_Command+0x2c>
      {
    	ptr8++;
 5c8:	3601      	adds	r6, #1
        if (*ptr8 == 0)
 5ca:	7833      	ldrb	r3, [r6, #0]
 5cc:	2b00      	cmp	r3, #0
 5ce:	d000      	beq.n	5d2 <Boot_Command+0x1c2>
 5d0:	e734      	b.n	43c <Boot_Command+0x2c>
        {
          state = StateNewPrompt;
 5d2:	2503      	movs	r5, #3
        }
        */
        state = StateProgramNext;
      }
    }
  }
 5d4:	e732      	b.n	43c <Boot_Command+0x2c>
    **    xxxxxxxx_xxxxxxxx_xxxxxxxx_xxxxxxxx
    **    |||||||| |||||||| |||||||| ||||||||
    **    |||||||| ++++++++-++++++++-++++++++-- Flash address[23:0]
    **    ++++++++----------------------------- Flash command
    */
    else if (state == StateEraseFlash)
 5d6:	2d07      	cmp	r5, #7
 5d8:	d123      	bne.n	622 <Boot_Command+0x212>
    	//------------------------------------??????
    	//11/25/15 change
    	/*
    	**  Send out "Erasing..." message.
    	*/
    	if (boot_Putc(*ptr8) == TRUE)
 5da:	7833      	ldrb	r3, [r6, #0]
 5dc:	1c18      	adds	r0, r3, #0
 5de:	f7ff fdd5 	bl	18c <boot_Putc>
 5e2:	1c03      	adds	r3, r0, #0
 5e4:	2b01      	cmp	r3, #1
 5e6:	d000      	beq.n	5ea <Boot_Command+0x1da>
 5e8:	e728      	b.n	43c <Boot_Command+0x2c>
    	{
    	    ptr8++;
 5ea:	3601      	adds	r6, #1
    	    if (*ptr8 == 0)
 5ec:	7833      	ldrb	r3, [r6, #0]
 5ee:	2b00      	cmp	r3, #0
 5f0:	d000      	beq.n	5f4 <Boot_Command+0x1e4>
 5f2:	e723      	b.n	43c <Boot_Command+0x2c>
    	    {
    	    	/*
    	    	**  Go erase the application Flash
    	    	*/
    	    	if(IsUpdateOnly){
 5f4:	4b4d      	ldr	r3, [pc, #308]	; (72c <Boot_Command+0x31c>)
 5f6:	781a      	ldrb	r2, [r3, #0]
 5f8:	2301      	movs	r3, #1
 5fa:	4013      	ands	r3, r2
 5fc:	b2db      	uxtb	r3, r3
 5fe:	2b00      	cmp	r3, #0
 600:	d005      	beq.n	60e <Boot_Command+0x1fe>
    	    		BOOT_FTFA_BASE_PTR->FCC_dword0_3.FCCOB0_3 = BOOT_APP_CODE_START;
 602:	4b4f      	ldr	r3, [pc, #316]	; (740 <Boot_Command+0x330>)
 604:	2280      	movs	r2, #128	; 0x80
 606:	0192      	lsls	r2, r2, #6
 608:	605a      	str	r2, [r3, #4]
    	    	    n = BOOT_APP_FLASH_SECTOR_COUNT1;
 60a:	2477      	movs	r4, #119	; 0x77
 60c:	e004      	b.n	618 <Boot_Command+0x208>
    	    	}
    	    	else{
    	    	    BOOT_FTFA_BASE_PTR->FCC_dword0_3.FCCOB0_3 = BOOT_APP_VECTOR_START;
 60e:	4b4c      	ldr	r3, [pc, #304]	; (740 <Boot_Command+0x330>)
 610:	2280      	movs	r2, #128	; 0x80
 612:	0192      	lsls	r2, r2, #6
 614:	605a      	str	r2, [r3, #4]
    	    	    n = BOOT_APP_FLASH_SECTOR_COUNT;
 616:	2478      	movs	r4, #120	; 0x78
    	    	}
    	    	BOOT_FTFA_BASE_PTR->FCC_dword0_3.BYTE.FCCOB0 = BOOT_CMD_FLASH_ERASE;
 618:	4b49      	ldr	r3, [pc, #292]	; (740 <Boot_Command+0x330>)
 61a:	2209      	movs	r2, #9
 61c:	71da      	strb	r2, [r3, #7]
    	    	state = StateFlashErasing;
 61e:	2508      	movs	r5, #8
        }
        */
        state = StateProgramNext;
      }
    }
  }
 620:	e70c      	b.n	43c <Boot_Command+0x2c>
    }
    /** State *************************************************************************************
    **
    **  Erase the application code Flash memory.
    */
    else if (state == StateFlashErasing)
 622:	2d08      	cmp	r5, #8
 624:	d130      	bne.n	688 <Boot_Command+0x278>
    {
      if (n != 0)
 626:	2c00      	cmp	r4, #0
 628:	d018      	beq.n	65c <Boot_Command+0x24c>
      {
        n--;
 62a:	1e63      	subs	r3, r4, #1
 62c:	b2dc      	uxtb	r4, r3
        /*
        **  Launch the Erase Flash Sector command via the RAM function.
        */
        (*RAMfunction_ptr)();
 62e:	4b45      	ldr	r3, [pc, #276]	; (744 <Boot_Command+0x334>)
 630:	681b      	ldr	r3, [r3, #0]
 632:	4798      	blx	r3
        /*
        **  Advance the Flash sector pointer by 1k (i.e., add 0x0400).
        */
        BOOT_FTFA_BASE_PTR->FCC_dword0_3.BYTE.FCCOB2 += 0x04;
 634:	4b42      	ldr	r3, [pc, #264]	; (740 <Boot_Command+0x330>)
 636:	4a42      	ldr	r2, [pc, #264]	; (740 <Boot_Command+0x330>)
 638:	7952      	ldrb	r2, [r2, #5]
 63a:	b2d2      	uxtb	r2, r2
 63c:	3204      	adds	r2, #4
 63e:	b2d2      	uxtb	r2, r2
 640:	715a      	strb	r2, [r3, #5]
        if (BOOT_FTFA_BASE_PTR->FCC_dword0_3.BYTE.FCCOB2 == 0)
 642:	4b3f      	ldr	r3, [pc, #252]	; (740 <Boot_Command+0x330>)
 644:	795b      	ldrb	r3, [r3, #5]
 646:	b2db      	uxtb	r3, r3
 648:	2b00      	cmp	r3, #0
 64a:	d000      	beq.n	64e <Boot_Command+0x23e>
 64c:	e6f6      	b.n	43c <Boot_Command+0x2c>
        {
          BOOT_FTFA_BASE_PTR->FCC_dword0_3.BYTE.FCCOB1++;
 64e:	4b3c      	ldr	r3, [pc, #240]	; (740 <Boot_Command+0x330>)
 650:	799a      	ldrb	r2, [r3, #6]
 652:	b2d2      	uxtb	r2, r2
 654:	3201      	adds	r2, #1
 656:	b2d2      	uxtb	r2, r2
 658:	719a      	strb	r2, [r3, #6]
        }
        */
        state = StateProgramNext;
      }
    }
  }
 65a:	e6ef      	b.n	43c <Boot_Command+0x2c>
        /*
        **  When erasing is complete, prepare to verify.
        */
        //---------------------
    	//10/24/14 change
    	if(IsUpdateOnly){
 65c:	4b33      	ldr	r3, [pc, #204]	; (72c <Boot_Command+0x31c>)
 65e:	781a      	ldrb	r2, [r3, #0]
 660:	2301      	movs	r3, #1
 662:	4013      	ands	r3, r2
 664:	b2db      	uxtb	r3, r3
 666:	2b00      	cmp	r3, #0
 668:	d004      	beq.n	674 <Boot_Command+0x264>
    		n = BOOT_APP_FLASH_SECTOR_COUNT1;
 66a:	2477      	movs	r4, #119	; 0x77
    		address_ptr = (uint32_t*)BOOT_APP_CODE_START;
 66c:	2380      	movs	r3, #128	; 0x80
 66e:	019b      	lsls	r3, r3, #6
 670:	469b      	mov	fp, r3
 672:	e003      	b.n	67c <Boot_Command+0x26c>
    	}
    	else{
    		n = BOOT_APP_FLASH_SECTOR_COUNT;
 674:	2478      	movs	r4, #120	; 0x78
    		address_ptr = (uint32_t*)BOOT_APP_VECTOR_START;
 676:	2380      	movs	r3, #128	; 0x80
 678:	019b      	lsls	r3, r3, #6
 67a:	469b      	mov	fp, r3
    	}
    	//---------------------
        value = TRUE;
 67c:	1c3b      	adds	r3, r7, #0
 67e:	334e      	adds	r3, #78	; 0x4e
 680:	2201      	movs	r2, #1
 682:	701a      	strb	r2, [r3, #0]
        state = StateVerifyErase;
 684:	2509      	movs	r5, #9
        }
        */
        state = StateProgramNext;
      }
    }
  }
 686:	e6d9      	b.n	43c <Boot_Command+0x2c>
    }
    /** State *************************************************************************************
    **
    **  Verify the erase procedure.
    */
    else if (state == StateVerifyErase)
 688:	2d09      	cmp	r5, #9
 68a:	d12e      	bne.n	6ea <Boot_Command+0x2da>
    {
      if (n != 0)
 68c:	2c00      	cmp	r4, #0
 68e:	d014      	beq.n	6ba <Boot_Command+0x2aa>
      {
        /*
        **  Verify that a Flash sector has been erased.
        */
        n--;
 690:	1e63      	subs	r3, r4, #1
 692:	b2dc      	uxtb	r4, r3
        for (count = 256; count != 0; count--)
 694:	2380      	movs	r3, #128	; 0x80
 696:	005b      	lsls	r3, r3, #1
 698:	469a      	mov	sl, r3
 69a:	e00a      	b.n	6b2 <Boot_Command+0x2a2>
        {
          if (*address_ptr != 0xFFFFFFFF)
 69c:	465a      	mov	r2, fp
 69e:	6813      	ldr	r3, [r2, #0]
 6a0:	3301      	adds	r3, #1
 6a2:	d003      	beq.n	6ac <Boot_Command+0x29c>
          {
            value = FALSE;
 6a4:	1c3b      	adds	r3, r7, #0
 6a6:	334e      	adds	r3, #78	; 0x4e
 6a8:	2200      	movs	r2, #0
 6aa:	701a      	strb	r2, [r3, #0]
      {
        /*
        **  Verify that a Flash sector has been erased.
        */
        n--;
        for (count = 256; count != 0; count--)
 6ac:	2301      	movs	r3, #1
 6ae:	425b      	negs	r3, r3
 6b0:	449a      	add	sl, r3
 6b2:	4652      	mov	r2, sl
 6b4:	2a00      	cmp	r2, #0
 6b6:	d1f1      	bne.n	69c <Boot_Command+0x28c>
 6b8:	e016      	b.n	6e8 <Boot_Command+0x2d8>
        //---------------------??????
    	//11/25/15 change
    	/*
    	**  Report status of erase verification.
    	*/
    	if (value == FALSE)	
 6ba:	1c3b      	adds	r3, r7, #0
 6bc:	334e      	adds	r3, #78	; 0x4e
 6be:	781b      	ldrb	r3, [r3, #0]
 6c0:	2b00      	cmp	r3, #0
 6c2:	d101      	bne.n	6c8 <Boot_Command+0x2b8>
    	{
    		 ptr8 = (uint8_t*)&str_Failed[0];
 6c4:	4e20      	ldr	r6, [pc, #128]	; (748 <Boot_Command+0x338>)
 6c6:	e000      	b.n	6ca <Boot_Command+0x2ba>
    	}
    	else
    	{
    	     ptr8 = (uint8_t*)&str_Verified[0];
 6c8:	4e20      	ldr	r6, [pc, #128]	; (74c <Boot_Command+0x33c>)
    	}
    	//---------------------
    	/*
    	**  Check if we're executing the Program command.
    	*/
    	if(command == 'P' || command == 'U')	//11/25/15 change
 6ca:	1c3b      	adds	r3, r7, #0
 6cc:	334f      	adds	r3, #79	; 0x4f
 6ce:	781b      	ldrb	r3, [r3, #0]
 6d0:	2b50      	cmp	r3, #80	; 0x50
 6d2:	d004      	beq.n	6de <Boot_Command+0x2ce>
 6d4:	1c3b      	adds	r3, r7, #0
 6d6:	334f      	adds	r3, #79	; 0x4f
 6d8:	781b      	ldrb	r3, [r3, #0]
 6da:	2b55      	cmp	r3, #85	; 0x55
 6dc:	d101      	bne.n	6e2 <Boot_Command+0x2d2>
    	{
    		state = StateEraseStatus;
 6de:	250a      	movs	r5, #10
 6e0:	e002      	b.n	6e8 <Boot_Command+0x2d8>
    	}
    	else
    	{
    		state = StatePrintString;	//11/25/15 change
 6e2:	2506      	movs	r5, #6
 6e4:	f000 fb7a 	bl	ddc <Boot_Command+0x9cc>
        }
        */
        state = StateProgramNext;
      }
    }
  }
 6e8:	e6a8      	b.n	43c <Boot_Command+0x2c>
    }
    /** State *************************************************************************************
    **
    **  Report the erase status.
    */
    else if (state == StateEraseStatus)
 6ea:	2d0a      	cmp	r5, #10
 6ec:	d132      	bne.n	754 <Boot_Command+0x344>
    {
    	//-----------------------------??????
    	//11/25/15 change
        if (boot_Putc(*ptr8) == TRUE)
 6ee:	7833      	ldrb	r3, [r6, #0]
 6f0:	1c18      	adds	r0, r3, #0
 6f2:	f7ff fd4b 	bl	18c <boot_Putc>
 6f6:	1c03      	adds	r3, r0, #0
 6f8:	2b01      	cmp	r3, #1
 6fa:	d000      	beq.n	6fe <Boot_Command+0x2ee>
 6fc:	e69e      	b.n	43c <Boot_Command+0x2c>
        {
        	ptr8++;
 6fe:	3601      	adds	r6, #1
        	if (*ptr8 == 0)
 700:	7833      	ldrb	r3, [r6, #0]
 702:	2b00      	cmp	r3, #0
 704:	d000      	beq.n	708 <Boot_Command+0x2f8>
 706:	e699      	b.n	43c <Boot_Command+0x2c>
        	{
        	    /*
        	    **  Stop if the erase procedure failed.
        	    **  Otherwise, continue with the Program command execution.
        	    */
        	    if (value == FALSE)
 708:	1c3b      	adds	r3, r7, #0
 70a:	334e      	adds	r3, #78	; 0x4e
 70c:	781b      	ldrb	r3, [r3, #0]
 70e:	2b00      	cmp	r3, #0
 710:	d101      	bne.n	716 <Boot_Command+0x306>
        	    {
        	    	state = StateNewPrompt;
 712:	2503      	movs	r5, #3
        }
        */
        state = StateProgramNext;
      }
    }
  }
 714:	e692      	b.n	43c <Boot_Command+0x2c>
        	    {
        	    	state = StateNewPrompt;
        	    }
        	    else
        	    {
        	    	ptr8 = (uint8_t*)&str_SendSrec[0];
 716:	4e0e      	ldr	r6, [pc, #56]	; (750 <Boot_Command+0x340>)
        	    	state = StateWaitForSrecord;
 718:	250b      	movs	r5, #11
        }
        */
        state = StateProgramNext;
      }
    }
  }
 71a:	e68f      	b.n	43c <Boot_Command+0x2c>
 71c:	1ffff000 	.word	0x1ffff000
 720:	40048104 	.word	0x40048104
 724:	00001f00 	.word	0x00001f00
 728:	00001f14 	.word	0x00001f14
 72c:	1ffff004 	.word	0x1ffff004
 730:	00001f2c 	.word	0x00001f2c
 734:	00001f70 	.word	0x00001f70
 738:	00001f7c 	.word	0x00001f7c
 73c:	00001f20 	.word	0x00001f20
 740:	40020000 	.word	0x40020000
 744:	20000284 	.word	0x20000284
 748:	00001f98 	.word	0x00001f98
 74c:	00001f8c 	.word	0x00001f8c
 750:	00001fa4 	.word	0x00001fa4
    }
    /** State *************************************************************************************
    **
    **  Prepare to receive an S-Record.
    */
    else if (state == StateWaitForSrecord)
 754:	2d0b      	cmp	r5, #11
 756:	d11d      	bne.n	794 <Boot_Command+0x384>
    {
    	//---------------------??????
    	//11/25/15 change
    	if (boot_Putc(*ptr8) == TRUE)
 758:	7833      	ldrb	r3, [r6, #0]
 75a:	1c18      	adds	r0, r3, #0
 75c:	f7ff fd16 	bl	18c <boot_Putc>
 760:	1c03      	adds	r3, r0, #0
 762:	2b01      	cmp	r3, #1
 764:	d000      	beq.n	768 <Boot_Command+0x358>
 766:	e669      	b.n	43c <Boot_Command+0x2c>
    	{
    	    ptr8++;
 768:	3601      	adds	r6, #1
    	    if (*ptr8 == 0)
 76a:	7833      	ldrb	r3, [r6, #0]
 76c:	2b00      	cmp	r3, #0
 76e:	d000      	beq.n	772 <Boot_Command+0x362>
 770:	e664      	b.n	43c <Boot_Command+0x2c>
    	    {
    	    	for (n = (BOOT_BUFFER_SIZE); n != 0; n--)
 772:	2440      	movs	r4, #64	; 0x40
 774:	e006      	b.n	784 <Boot_Command+0x374>
    	    	{
    	    	    buffer[n - 1] = 0xFF;
 776:	1c23      	adds	r3, r4, #0
 778:	3b01      	subs	r3, #1
 77a:	1d3a      	adds	r2, r7, #4
 77c:	21ff      	movs	r1, #255	; 0xff
 77e:	54d1      	strb	r1, [r2, r3]
    	if (boot_Putc(*ptr8) == TRUE)
    	{
    	    ptr8++;
    	    if (*ptr8 == 0)
    	    {
    	    	for (n = (BOOT_BUFFER_SIZE); n != 0; n--)
 780:	1e63      	subs	r3, r4, #1
 782:	b2dc      	uxtb	r4, r3
 784:	2c00      	cmp	r4, #0
 786:	d1f6      	bne.n	776 <Boot_Command+0x366>
    	    	{
    	    	    buffer[n - 1] = 0xFF;
    	    	}
    	    	//i = 32;
    	    	state = StateGetSrecord;
 788:	250c      	movs	r5, #12
    	    	phase = PhaseWaitForS;
 78a:	1c3b      	adds	r3, r7, #0
 78c:	3348      	adds	r3, #72	; 0x48
 78e:	2200      	movs	r2, #0
 790:	701a      	strb	r2, [r3, #0]
        }
        */
        state = StateProgramNext;
      }
    }
  }
 792:	e653      	b.n	43c <Boot_Command+0x2c>
    **    dd     = data byte
    **    ss     = LSB of the one's compliment of the sum of bytes of the count, address and data.
    **
    **  All other S-Record formats are simply ignored.
    */
    else if (state == StateGetSrecord)
 794:	2d0c      	cmp	r5, #12
 796:	d000      	beq.n	79a <Boot_Command+0x38a>
 798:	e1f2      	b.n	b80 <Boot_Command+0x770>
    {
      /** Phase ***************************************************************
      **
      **  Wait for the start of a record as indicated by an 'S' character.
      */
      if (phase == PhaseWaitForS)
 79a:	1c3b      	adds	r3, r7, #0
 79c:	3348      	adds	r3, #72	; 0x48
 79e:	781b      	ldrb	r3, [r3, #0]
 7a0:	2b00      	cmp	r3, #0
 7a2:	d10a      	bne.n	7ba <Boot_Command+0x3aa>
      {
        if (boot_Getc() == 'S')
 7a4:	f7ff fd1e 	bl	1e4 <boot_Getc>
 7a8:	1c03      	adds	r3, r0, #0
 7aa:	2b53      	cmp	r3, #83	; 0x53
 7ac:	d000      	beq.n	7b0 <Boot_Command+0x3a0>
 7ae:	e645      	b.n	43c <Boot_Command+0x2c>
        	}
        	else if(boot_Putc('>')){
        		i--;	
        	}
        	*/
          phase = PhaseWaitForType;
 7b0:	1c3b      	adds	r3, r7, #0
 7b2:	3348      	adds	r3, #72	; 0x48
 7b4:	2201      	movs	r2, #1
 7b6:	701a      	strb	r2, [r3, #0]
        }
        */
        state = StateProgramNext;
      }
    }
  }
 7b8:	e640      	b.n	43c <Boot_Command+0x2c>
      }
      /** Phase ***************************************************************
      **
      **  Wait for the S-Record type.
      */
      else if (phase == PhaseWaitForType)
 7ba:	1c3b      	adds	r3, r7, #0
 7bc:	3348      	adds	r3, #72	; 0x48
 7be:	781b      	ldrb	r3, [r3, #0]
 7c0:	2b01      	cmp	r3, #1
 7c2:	d144      	bne.n	84e <Boot_Command+0x43e>
      {
        n = boot_Getc();
 7c4:	f7ff fd0e 	bl	1e4 <boot_Getc>
 7c8:	1c03      	adds	r3, r0, #0
 7ca:	1c1c      	adds	r4, r3, #0
        if (n != 0)
 7cc:	2c00      	cmp	r4, #0
 7ce:	d100      	bne.n	7d2 <Boot_Command+0x3c2>
 7d0:	e634      	b.n	43c <Boot_Command+0x2c>
        {
          if (n == '1')
 7d2:	2c31      	cmp	r4, #49	; 0x31
 7d4:	d108      	bne.n	7e8 <Boot_Command+0x3d8>
          {
            type = 1;
 7d6:	1c3b      	adds	r3, r7, #0
 7d8:	334d      	adds	r3, #77	; 0x4d
 7da:	2201      	movs	r2, #1
 7dc:	701a      	strb	r2, [r3, #0]
            phase = PhaseGetCountMSB;
 7de:	1c3b      	adds	r3, r7, #0
 7e0:	3348      	adds	r3, #72	; 0x48
 7e2:	2202      	movs	r2, #2
 7e4:	701a      	strb	r2, [r3, #0]
        }
        */
        state = StateProgramNext;
      }
    }
  }
 7e6:	e629      	b.n	43c <Boot_Command+0x2c>
          if (n == '1')
          {
            type = 1;
            phase = PhaseGetCountMSB;
          }
          else if (n == '2')
 7e8:	2c32      	cmp	r4, #50	; 0x32
 7ea:	d108      	bne.n	7fe <Boot_Command+0x3ee>
          {
            type = 2;
 7ec:	1c3b      	adds	r3, r7, #0
 7ee:	334d      	adds	r3, #77	; 0x4d
 7f0:	2202      	movs	r2, #2
 7f2:	701a      	strb	r2, [r3, #0]
            phase = PhaseGetCountMSB;
 7f4:	1c3b      	adds	r3, r7, #0
 7f6:	3348      	adds	r3, #72	; 0x48
 7f8:	2202      	movs	r2, #2
 7fa:	701a      	strb	r2, [r3, #0]
        }
        */
        state = StateProgramNext;
      }
    }
  }
 7fc:	e61e      	b.n	43c <Boot_Command+0x2c>
          else if (n == '2')
          {
            type = 2;
            phase = PhaseGetCountMSB;
          }
          else if (n == '3')	//11/6/14 add
 7fe:	2c33      	cmp	r4, #51	; 0x33
 800:	d108      	bne.n	814 <Boot_Command+0x404>
          {
              type = 3;
 802:	1c3b      	adds	r3, r7, #0
 804:	334d      	adds	r3, #77	; 0x4d
 806:	2203      	movs	r2, #3
 808:	701a      	strb	r2, [r3, #0]
              phase = PhaseGetCountMSB;
 80a:	1c3b      	adds	r3, r7, #0
 80c:	3348      	adds	r3, #72	; 0x48
 80e:	2202      	movs	r2, #2
 810:	701a      	strb	r2, [r3, #0]
        }
        */
        state = StateProgramNext;
      }
    }
  }
 812:	e613      	b.n	43c <Boot_Command+0x2c>
          else if (n == '3')	//11/6/14 add
          {
              type = 3;
              phase = PhaseGetCountMSB;
          }
          else if (n == '7')	//11/6/14 add
 814:	2c37      	cmp	r4, #55	; 0x37
 816:	d105      	bne.n	824 <Boot_Command+0x414>
          {
              kount = 13;
 818:	1c3b      	adds	r3, r7, #0
 81a:	334c      	adds	r3, #76	; 0x4c
 81c:	220d      	movs	r2, #13
 81e:	701a      	strb	r2, [r3, #0]
              state = StateProgramDone;
 820:	250f      	movs	r5, #15
        }
        */
        state = StateProgramNext;
      }
    }
  }
 822:	e60b      	b.n	43c <Boot_Command+0x2c>
          else if (n == '7')	//11/6/14 add
          {
              kount = 13;
              state = StateProgramDone;
          }
          else if (n == '8')
 824:	2c38      	cmp	r4, #56	; 0x38
 826:	d105      	bne.n	834 <Boot_Command+0x424>
          {
            kount = 10;
 828:	1c3b      	adds	r3, r7, #0
 82a:	334c      	adds	r3, #76	; 0x4c
 82c:	220a      	movs	r2, #10
 82e:	701a      	strb	r2, [r3, #0]
            state = StateProgramDone;
 830:	250f      	movs	r5, #15
        }
        */
        state = StateProgramNext;
      }
    }
  }
 832:	e603      	b.n	43c <Boot_Command+0x2c>
          else if (n == '8')
          {
            kount = 10;
            state = StateProgramDone;
          }
          else if (n == '9')
 834:	2c39      	cmp	r4, #57	; 0x39
 836:	d105      	bne.n	844 <Boot_Command+0x434>
          {
            kount = 8;
 838:	1c3b      	adds	r3, r7, #0
 83a:	334c      	adds	r3, #76	; 0x4c
 83c:	2208      	movs	r2, #8
 83e:	701a      	strb	r2, [r3, #0]
            state = StateProgramDone;
 840:	250f      	movs	r5, #15
        }
        */
        state = StateProgramNext;
      }
    }
  }
 842:	e5fb      	b.n	43c <Boot_Command+0x2c>
            kount = 8;
            state = StateProgramDone;
          }
          else
          {
            phase = PhaseWaitForS;
 844:	1c3b      	adds	r3, r7, #0
 846:	3348      	adds	r3, #72	; 0x48
 848:	2200      	movs	r2, #0
 84a:	701a      	strb	r2, [r3, #0]
        }
        */
        state = StateProgramNext;
      }
    }
  }
 84c:	e5f6      	b.n	43c <Boot_Command+0x2c>
      }
      /** Phase ***************************************************************
      **
      **  Get the data count for this S-Record.
      */
      else if (phase == PhaseGetCountMSB)
 84e:	1c3b      	adds	r3, r7, #0
 850:	3348      	adds	r3, #72	; 0x48
 852:	781b      	ldrb	r3, [r3, #0]
 854:	2b02      	cmp	r3, #2
 856:	d11c      	bne.n	892 <Boot_Command+0x482>
      {
        n = boot_Gethex();
 858:	f7ff fcd8 	bl	20c <boot_Gethex>
 85c:	1c03      	adds	r3, r0, #0
 85e:	1c1c      	adds	r4, r3, #0
        if (n == BOOT_ERROR_BAD_HEX)
 860:	2cff      	cmp	r4, #255	; 0xff
 862:	d105      	bne.n	870 <Boot_Command+0x460>
        {
          data = '?';
 864:	1c3b      	adds	r3, r7, #0
 866:	334b      	adds	r3, #75	; 0x4b
 868:	223f      	movs	r2, #63	; 0x3f
 86a:	701a      	strb	r2, [r3, #0]
          state = StateBadHexCharacter;
 86c:	2510      	movs	r5, #16
        }
        */
        state = StateProgramNext;
      }
    }
  }
 86e:	e5e5      	b.n	43c <Boot_Command+0x2c>
        if (n == BOOT_ERROR_BAD_HEX)
        {
          data = '?';
          state = StateBadHexCharacter;
        }
        else if (n != NULL)
 870:	2c00      	cmp	r4, #0
 872:	d100      	bne.n	876 <Boot_Command+0x466>
 874:	e5e2      	b.n	43c <Boot_Command+0x2c>
        {
          /*
          **  Get the data count MSB.
          */
          kount = (boot_ASCIItoHex(n) << 4);
 876:	1c20      	adds	r0, r4, #0
 878:	f7ff fcf6 	bl	268 <boot_ASCIItoHex>
 87c:	1c03      	adds	r3, r0, #0
 87e:	1c1a      	adds	r2, r3, #0
 880:	1c3b      	adds	r3, r7, #0
 882:	334c      	adds	r3, #76	; 0x4c
 884:	0112      	lsls	r2, r2, #4
 886:	701a      	strb	r2, [r3, #0]
          if (kount == BOOT_ERROR_BAD_HEX)
          {
            //  bad hex character
          }
          phase = PhaseGetCountLSB;
 888:	1c3b      	adds	r3, r7, #0
 88a:	3348      	adds	r3, #72	; 0x48
 88c:	2203      	movs	r2, #3
 88e:	701a      	strb	r2, [r3, #0]
        }
        */
        state = StateProgramNext;
      }
    }
  }
 890:	e5d4      	b.n	43c <Boot_Command+0x2c>
            //  bad hex character
          }
          phase = PhaseGetCountLSB;
        }
      }
      else if (phase == PhaseGetCountLSB)
 892:	1c3b      	adds	r3, r7, #0
 894:	3348      	adds	r3, #72	; 0x48
 896:	781b      	ldrb	r3, [r3, #0]
 898:	2b03      	cmp	r3, #3
 89a:	d12e      	bne.n	8fa <Boot_Command+0x4ea>
      {
        n = boot_Gethex();
 89c:	f7ff fcb6 	bl	20c <boot_Gethex>
 8a0:	1c03      	adds	r3, r0, #0
 8a2:	1c1c      	adds	r4, r3, #0
        if (n == BOOT_ERROR_BAD_HEX)
 8a4:	2cff      	cmp	r4, #255	; 0xff
 8a6:	d105      	bne.n	8b4 <Boot_Command+0x4a4>
        {
          data = '?';
 8a8:	1c3b      	adds	r3, r7, #0
 8aa:	334b      	adds	r3, #75	; 0x4b
 8ac:	223f      	movs	r2, #63	; 0x3f
 8ae:	701a      	strb	r2, [r3, #0]
          state = StateBadHexCharacter;
 8b0:	2510      	movs	r5, #16
        }
        */
        state = StateProgramNext;
      }
    }
  }
 8b2:	e5c3      	b.n	43c <Boot_Command+0x2c>
        if (n == BOOT_ERROR_BAD_HEX)
        {
          data = '?';
          state = StateBadHexCharacter;
        }
        else if (n != NULL)
 8b4:	2c00      	cmp	r4, #0
 8b6:	d100      	bne.n	8ba <Boot_Command+0x4aa>
 8b8:	e5c0      	b.n	43c <Boot_Command+0x2c>
        {
          /*
          **  Get the data count LSB.
          **  Initialize the checksum and the target address.
          */
          kount += boot_ASCIItoHex(n);
 8ba:	1c20      	adds	r0, r4, #0
 8bc:	f7ff fcd4 	bl	268 <boot_ASCIItoHex>
 8c0:	1c03      	adds	r3, r0, #0
 8c2:	1c19      	adds	r1, r3, #0
 8c4:	1c3b      	adds	r3, r7, #0
 8c6:	334c      	adds	r3, #76	; 0x4c
 8c8:	1c3a      	adds	r2, r7, #0
 8ca:	324c      	adds	r2, #76	; 0x4c
 8cc:	7812      	ldrb	r2, [r2, #0]
 8ce:	188a      	adds	r2, r1, r2
 8d0:	701a      	strb	r2, [r3, #0]
          checksum = kount;
 8d2:	1c3b      	adds	r3, r7, #0
 8d4:	334a      	adds	r3, #74	; 0x4a
 8d6:	1c3a      	adds	r2, r7, #0
 8d8:	324c      	adds	r2, #76	; 0x4c
 8da:	7812      	ldrb	r2, [r2, #0]
 8dc:	701a      	strb	r2, [r3, #0]
          kount--;
 8de:	1c3b      	adds	r3, r7, #0
 8e0:	334c      	adds	r3, #76	; 0x4c
 8e2:	1c3a      	adds	r2, r7, #0
 8e4:	324c      	adds	r2, #76	; 0x4c
 8e6:	7812      	ldrb	r2, [r2, #0]
 8e8:	3a01      	subs	r2, #1
 8ea:	701a      	strb	r2, [r3, #0]
          address.value = 0;
 8ec:	2300      	movs	r3, #0
 8ee:	647b      	str	r3, [r7, #68]	; 0x44
          phase = PhaseGetAddressMSB;
 8f0:	1c3b      	adds	r3, r7, #0
 8f2:	3348      	adds	r3, #72	; 0x48
 8f4:	2204      	movs	r2, #4
 8f6:	701a      	strb	r2, [r3, #0]
        }
        */
        state = StateProgramNext;
      }
    }
  }
 8f8:	e5a0      	b.n	43c <Boot_Command+0x2c>
      }
      /** Phase ***************************************************************
      **
      **  Get the target address for this S-Record.
      */
      else if (phase == PhaseGetAddressMSB)
 8fa:	1c3b      	adds	r3, r7, #0
 8fc:	3348      	adds	r3, #72	; 0x48
 8fe:	781b      	ldrb	r3, [r3, #0]
 900:	2b04      	cmp	r3, #4
 902:	d11c      	bne.n	93e <Boot_Command+0x52e>
      {
        n = boot_Gethex();
 904:	f7ff fc82 	bl	20c <boot_Gethex>
 908:	1c03      	adds	r3, r0, #0
 90a:	1c1c      	adds	r4, r3, #0
        if (n == BOOT_ERROR_BAD_HEX)
 90c:	2cff      	cmp	r4, #255	; 0xff
 90e:	d105      	bne.n	91c <Boot_Command+0x50c>
        {
          data = '?';
 910:	1c3b      	adds	r3, r7, #0
 912:	334b      	adds	r3, #75	; 0x4b
 914:	223f      	movs	r2, #63	; 0x3f
 916:	701a      	strb	r2, [r3, #0]
          state = StateBadHexCharacter;
 918:	2510      	movs	r5, #16
        }
        */
        state = StateProgramNext;
      }
    }
  }
 91a:	e58f      	b.n	43c <Boot_Command+0x2c>
        if (n == BOOT_ERROR_BAD_HEX)
        {
          data = '?';
          state = StateBadHexCharacter;
        }
        else if (n != NULL)
 91c:	2c00      	cmp	r4, #0
 91e:	d100      	bne.n	922 <Boot_Command+0x512>
 920:	e58c      	b.n	43c <Boot_Command+0x2c>
        {
          /*
          **  Get the address MSB.
          */
          data = (boot_ASCIItoHex(n) << 4);
 922:	1c20      	adds	r0, r4, #0
 924:	f7ff fca0 	bl	268 <boot_ASCIItoHex>
 928:	1c03      	adds	r3, r0, #0
 92a:	1c1a      	adds	r2, r3, #0
 92c:	1c3b      	adds	r3, r7, #0
 92e:	334b      	adds	r3, #75	; 0x4b
 930:	0112      	lsls	r2, r2, #4
 932:	701a      	strb	r2, [r3, #0]
          phase = PhaseGetAddressLSB;
 934:	1c3b      	adds	r3, r7, #0
 936:	3348      	adds	r3, #72	; 0x48
 938:	2205      	movs	r2, #5
 93a:	701a      	strb	r2, [r3, #0]
        }
        */
        state = StateProgramNext;
      }
    }
  }
 93c:	e57e      	b.n	43c <Boot_Command+0x2c>
          */
          data = (boot_ASCIItoHex(n) << 4);
          phase = PhaseGetAddressLSB;
        }
      }
      else if (phase == PhaseGetAddressLSB)
 93e:	1c3b      	adds	r3, r7, #0
 940:	3348      	adds	r3, #72	; 0x48
 942:	781b      	ldrb	r3, [r3, #0]
 944:	2b05      	cmp	r3, #5
 946:	d14e      	bne.n	9e6 <Boot_Command+0x5d6>
      {
        n = boot_Gethex();
 948:	f7ff fc60 	bl	20c <boot_Gethex>
 94c:	1c03      	adds	r3, r0, #0
 94e:	1c1c      	adds	r4, r3, #0
        if (n == BOOT_ERROR_BAD_HEX)
 950:	2cff      	cmp	r4, #255	; 0xff
 952:	d105      	bne.n	960 <Boot_Command+0x550>
        {
          data = '?';
 954:	1c3b      	adds	r3, r7, #0
 956:	334b      	adds	r3, #75	; 0x4b
 958:	223f      	movs	r2, #63	; 0x3f
 95a:	701a      	strb	r2, [r3, #0]
          state = StateBadHexCharacter;
 95c:	2510      	movs	r5, #16
        }
        */
        state = StateProgramNext;
      }
    }
  }
 95e:	e56d      	b.n	43c <Boot_Command+0x2c>
        if (n == BOOT_ERROR_BAD_HEX)
        {
          data = '?';
          state = StateBadHexCharacter;
        }
        else if (n != NULL)
 960:	2c00      	cmp	r4, #0
 962:	d100      	bne.n	966 <Boot_Command+0x556>
 964:	e56a      	b.n	43c <Boot_Command+0x2c>
        {
          /*
          **  Get the address LSB.
          **  Add the address byte to the checksum.
          */
          data += boot_ASCIItoHex(n);
 966:	1c20      	adds	r0, r4, #0
 968:	f7ff fc7e 	bl	268 <boot_ASCIItoHex>
 96c:	1c03      	adds	r3, r0, #0
 96e:	1c19      	adds	r1, r3, #0
 970:	1c3b      	adds	r3, r7, #0
 972:	334b      	adds	r3, #75	; 0x4b
 974:	1c3a      	adds	r2, r7, #0
 976:	324b      	adds	r2, #75	; 0x4b
 978:	7812      	ldrb	r2, [r2, #0]
 97a:	188a      	adds	r2, r1, r2
 97c:	701a      	strb	r2, [r3, #0]
          address.value <<= 8;
 97e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 980:	021b      	lsls	r3, r3, #8
 982:	647b      	str	r3, [r7, #68]	; 0x44
          address.value += data;
 984:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 986:	1c3b      	adds	r3, r7, #0
 988:	334b      	adds	r3, #75	; 0x4b
 98a:	781b      	ldrb	r3, [r3, #0]
 98c:	18d3      	adds	r3, r2, r3
 98e:	647b      	str	r3, [r7, #68]	; 0x44
          checksum += data;
 990:	1c3b      	adds	r3, r7, #0
 992:	334a      	adds	r3, #74	; 0x4a
 994:	1c39      	adds	r1, r7, #0
 996:	314a      	adds	r1, #74	; 0x4a
 998:	1c3a      	adds	r2, r7, #0
 99a:	324b      	adds	r2, #75	; 0x4b
 99c:	7809      	ldrb	r1, [r1, #0]
 99e:	7812      	ldrb	r2, [r2, #0]
 9a0:	188a      	adds	r2, r1, r2
 9a2:	701a      	strb	r2, [r3, #0]
          kount--;
 9a4:	1c3b      	adds	r3, r7, #0
 9a6:	334c      	adds	r3, #76	; 0x4c
 9a8:	1c3a      	adds	r2, r7, #0
 9aa:	324c      	adds	r2, #76	; 0x4c
 9ac:	7812      	ldrb	r2, [r2, #0]
 9ae:	3a01      	subs	r2, #1
 9b0:	701a      	strb	r2, [r3, #0]
          /*
          **  If there are more address bytes then loop back.
          */
          if (type != 0)
 9b2:	1c3b      	adds	r3, r7, #0
 9b4:	334d      	adds	r3, #77	; 0x4d
 9b6:	781b      	ldrb	r3, [r3, #0]
 9b8:	2b00      	cmp	r3, #0
 9ba:	d00b      	beq.n	9d4 <Boot_Command+0x5c4>
          {
            type--;
 9bc:	1c3b      	adds	r3, r7, #0
 9be:	334d      	adds	r3, #77	; 0x4d
 9c0:	1c3a      	adds	r2, r7, #0
 9c2:	324d      	adds	r2, #77	; 0x4d
 9c4:	7812      	ldrb	r2, [r2, #0]
 9c6:	3a01      	subs	r2, #1
 9c8:	701a      	strb	r2, [r3, #0]
            phase = PhaseGetAddressMSB;
 9ca:	1c3b      	adds	r3, r7, #0
 9cc:	3348      	adds	r3, #72	; 0x48
 9ce:	2204      	movs	r2, #4
 9d0:	701a      	strb	r2, [r3, #0]
        }
        */
        state = StateProgramNext;
      }
    }
  }
 9d2:	e533      	b.n	43c <Boot_Command+0x2c>
          /*
          **  If the address is complete then get ready for the data.
          */
          else
          {
            index = 0;
 9d4:	1c3b      	adds	r3, r7, #0
 9d6:	3349      	adds	r3, #73	; 0x49
 9d8:	2200      	movs	r2, #0
 9da:	701a      	strb	r2, [r3, #0]
            phase = PhaseGetDataMSB;
 9dc:	1c3b      	adds	r3, r7, #0
 9de:	3348      	adds	r3, #72	; 0x48
 9e0:	2206      	movs	r2, #6
 9e2:	701a      	strb	r2, [r3, #0]
        }
        */
        state = StateProgramNext;
      }
    }
  }
 9e4:	e52a      	b.n	43c <Boot_Command+0x2c>
      }
      /** Phase ***************************************************************
      **
      **  Get the S-Record data.
      */
      else if (phase == PhaseGetDataMSB)
 9e6:	1c3b      	adds	r3, r7, #0
 9e8:	3348      	adds	r3, #72	; 0x48
 9ea:	781b      	ldrb	r3, [r3, #0]
 9ec:	2b06      	cmp	r3, #6
 9ee:	d126      	bne.n	a3e <Boot_Command+0x62e>
      {
        /*
        **  Exit to the next phase when all of the data has been received.
        */
        if (kount == 0)
 9f0:	1c3b      	adds	r3, r7, #0
 9f2:	334c      	adds	r3, #76	; 0x4c
 9f4:	781b      	ldrb	r3, [r3, #0]
 9f6:	2b00      	cmp	r3, #0
 9f8:	d104      	bne.n	a04 <Boot_Command+0x5f4>
        {
          phase = PhaseGetChecksumMSB;
 9fa:	1c3b      	adds	r3, r7, #0
 9fc:	3348      	adds	r3, #72	; 0x48
 9fe:	2208      	movs	r2, #8
 a00:	701a      	strb	r2, [r3, #0]
        }
        */
        state = StateProgramNext;
      }
    }
  }
 a02:	e51b      	b.n	43c <Boot_Command+0x2c>
        {
          phase = PhaseGetChecksumMSB;
        }
        else
        {
          n = boot_Gethex();
 a04:	f7ff fc02 	bl	20c <boot_Gethex>
 a08:	1c03      	adds	r3, r0, #0
 a0a:	1c1c      	adds	r4, r3, #0
          if (n == BOOT_ERROR_BAD_HEX)
 a0c:	2cff      	cmp	r4, #255	; 0xff
 a0e:	d105      	bne.n	a1c <Boot_Command+0x60c>
          {
            data = '?';
 a10:	1c3b      	adds	r3, r7, #0
 a12:	334b      	adds	r3, #75	; 0x4b
 a14:	223f      	movs	r2, #63	; 0x3f
 a16:	701a      	strb	r2, [r3, #0]
            state = StateBadHexCharacter;
 a18:	2510      	movs	r5, #16
        }
        */
        state = StateProgramNext;
      }
    }
  }
 a1a:	e50f      	b.n	43c <Boot_Command+0x2c>
          if (n == BOOT_ERROR_BAD_HEX)
          {
            data = '?';
            state = StateBadHexCharacter;
          }
          else if (n != NULL)
 a1c:	2c00      	cmp	r4, #0
 a1e:	d100      	bne.n	a22 <Boot_Command+0x612>
 a20:	e50c      	b.n	43c <Boot_Command+0x2c>
          {
            /*
            **  Get the data MSB.
            */
            data = (boot_ASCIItoHex(n) << 4);
 a22:	1c20      	adds	r0, r4, #0
 a24:	f7ff fc20 	bl	268 <boot_ASCIItoHex>
 a28:	1c03      	adds	r3, r0, #0
 a2a:	1c1a      	adds	r2, r3, #0
 a2c:	1c3b      	adds	r3, r7, #0
 a2e:	334b      	adds	r3, #75	; 0x4b
 a30:	0112      	lsls	r2, r2, #4
 a32:	701a      	strb	r2, [r3, #0]
            phase = PhaseGetDataLSB;
 a34:	1c3b      	adds	r3, r7, #0
 a36:	3348      	adds	r3, #72	; 0x48
 a38:	2207      	movs	r2, #7
 a3a:	701a      	strb	r2, [r3, #0]
        }
        */
        state = StateProgramNext;
      }
    }
  }
 a3c:	e4fe      	b.n	43c <Boot_Command+0x2c>
            data = (boot_ASCIItoHex(n) << 4);
            phase = PhaseGetDataLSB;
          }
        }
      }
      else if (phase == PhaseGetDataLSB)
 a3e:	1c3b      	adds	r3, r7, #0
 a40:	3348      	adds	r3, #72	; 0x48
 a42:	781b      	ldrb	r3, [r3, #0]
 a44:	2b07      	cmp	r3, #7
 a46:	d13f      	bne.n	ac8 <Boot_Command+0x6b8>
      {
        n = boot_Gethex();
 a48:	f7ff fbe0 	bl	20c <boot_Gethex>
 a4c:	1c03      	adds	r3, r0, #0
 a4e:	1c1c      	adds	r4, r3, #0
        if (n == BOOT_ERROR_BAD_HEX)
 a50:	2cff      	cmp	r4, #255	; 0xff
 a52:	d105      	bne.n	a60 <Boot_Command+0x650>
        {
          data = '?';
 a54:	1c3b      	adds	r3, r7, #0
 a56:	334b      	adds	r3, #75	; 0x4b
 a58:	223f      	movs	r2, #63	; 0x3f
 a5a:	701a      	strb	r2, [r3, #0]
          state = StateBadHexCharacter;
 a5c:	2510      	movs	r5, #16
        }
        */
        state = StateProgramNext;
      }
    }
  }
 a5e:	e4ed      	b.n	43c <Boot_Command+0x2c>
        if (n == BOOT_ERROR_BAD_HEX)
        {
          data = '?';
          state = StateBadHexCharacter;
        }
        else if (n != NULL)
 a60:	2c00      	cmp	r4, #0
 a62:	d100      	bne.n	a66 <Boot_Command+0x656>
 a64:	e4ea      	b.n	43c <Boot_Command+0x2c>
          /*
          **  Get the data LSB.
          **  Add the data byte to the checksum.
          **  Loop back and get the next data byte.
          */
          data += boot_ASCIItoHex(n);
 a66:	1c20      	adds	r0, r4, #0
 a68:	f7ff fbfe 	bl	268 <boot_ASCIItoHex>
 a6c:	1c03      	adds	r3, r0, #0
 a6e:	1c19      	adds	r1, r3, #0
 a70:	1c3b      	adds	r3, r7, #0
 a72:	334b      	adds	r3, #75	; 0x4b
 a74:	1c3a      	adds	r2, r7, #0
 a76:	324b      	adds	r2, #75	; 0x4b
 a78:	7812      	ldrb	r2, [r2, #0]
 a7a:	188a      	adds	r2, r1, r2
 a7c:	701a      	strb	r2, [r3, #0]
          buffer[index++] = data;
 a7e:	1c3b      	adds	r3, r7, #0
 a80:	3349      	adds	r3, #73	; 0x49
 a82:	781b      	ldrb	r3, [r3, #0]
 a84:	1d3a      	adds	r2, r7, #4
 a86:	1c39      	adds	r1, r7, #0
 a88:	314b      	adds	r1, #75	; 0x4b
 a8a:	7809      	ldrb	r1, [r1, #0]
 a8c:	54d1      	strb	r1, [r2, r3]
 a8e:	1c3b      	adds	r3, r7, #0
 a90:	3349      	adds	r3, #73	; 0x49
 a92:	1c3a      	adds	r2, r7, #0
 a94:	3249      	adds	r2, #73	; 0x49
 a96:	7812      	ldrb	r2, [r2, #0]
 a98:	3201      	adds	r2, #1
 a9a:	701a      	strb	r2, [r3, #0]
          checksum += data;
 a9c:	1c3b      	adds	r3, r7, #0
 a9e:	334a      	adds	r3, #74	; 0x4a
 aa0:	1c39      	adds	r1, r7, #0
 aa2:	314a      	adds	r1, #74	; 0x4a
 aa4:	1c3a      	adds	r2, r7, #0
 aa6:	324b      	adds	r2, #75	; 0x4b
 aa8:	7809      	ldrb	r1, [r1, #0]
 aaa:	7812      	ldrb	r2, [r2, #0]
 aac:	188a      	adds	r2, r1, r2
 aae:	701a      	strb	r2, [r3, #0]
          kount--;
 ab0:	1c3b      	adds	r3, r7, #0
 ab2:	334c      	adds	r3, #76	; 0x4c
 ab4:	1c3a      	adds	r2, r7, #0
 ab6:	324c      	adds	r2, #76	; 0x4c
 ab8:	7812      	ldrb	r2, [r2, #0]
 aba:	3a01      	subs	r2, #1
 abc:	701a      	strb	r2, [r3, #0]
          phase = PhaseGetDataMSB;
 abe:	1c3b      	adds	r3, r7, #0
 ac0:	3348      	adds	r3, #72	; 0x48
 ac2:	2206      	movs	r2, #6
 ac4:	701a      	strb	r2, [r3, #0]
        }
        */
        state = StateProgramNext;
      }
    }
  }
 ac6:	e4b9      	b.n	43c <Boot_Command+0x2c>
      }
      /** Phase ***************************************************************
      **
      **  Get and verify the Checksum.
      */
      else if (phase == PhaseGetChecksumMSB)
 ac8:	1c3b      	adds	r3, r7, #0
 aca:	3348      	adds	r3, #72	; 0x48
 acc:	781b      	ldrb	r3, [r3, #0]
 ace:	2b08      	cmp	r3, #8
 ad0:	d11c      	bne.n	b0c <Boot_Command+0x6fc>
      {
        n = boot_Gethex();
 ad2:	f7ff fb9b 	bl	20c <boot_Gethex>
 ad6:	1c03      	adds	r3, r0, #0
 ad8:	1c1c      	adds	r4, r3, #0
        if (n == BOOT_ERROR_BAD_HEX)
 ada:	2cff      	cmp	r4, #255	; 0xff
 adc:	d105      	bne.n	aea <Boot_Command+0x6da>
        {
          data = '?';
 ade:	1c3b      	adds	r3, r7, #0
 ae0:	334b      	adds	r3, #75	; 0x4b
 ae2:	223f      	movs	r2, #63	; 0x3f
 ae4:	701a      	strb	r2, [r3, #0]
          state = StateBadHexCharacter;
 ae6:	2510      	movs	r5, #16
        }
        */
        state = StateProgramNext;
      }
    }
  }
 ae8:	e4a8      	b.n	43c <Boot_Command+0x2c>
        if (n == BOOT_ERROR_BAD_HEX)
        {
          data = '?';
          state = StateBadHexCharacter;
        }
        else if (n != NULL)
 aea:	2c00      	cmp	r4, #0
 aec:	d100      	bne.n	af0 <Boot_Command+0x6e0>
 aee:	e4a5      	b.n	43c <Boot_Command+0x2c>
        {
          /*
          **  Get the checksum MSB.
          */
          data = (boot_ASCIItoHex(n) << 4);
 af0:	1c20      	adds	r0, r4, #0
 af2:	f7ff fbb9 	bl	268 <boot_ASCIItoHex>
 af6:	1c03      	adds	r3, r0, #0
 af8:	1c1a      	adds	r2, r3, #0
 afa:	1c3b      	adds	r3, r7, #0
 afc:	334b      	adds	r3, #75	; 0x4b
 afe:	0112      	lsls	r2, r2, #4
 b00:	701a      	strb	r2, [r3, #0]
          phase = PhaseGetChecksumLSB;
 b02:	1c3b      	adds	r3, r7, #0
 b04:	3348      	adds	r3, #72	; 0x48
 b06:	2209      	movs	r2, #9
 b08:	701a      	strb	r2, [r3, #0]
        }
        */
        state = StateProgramNext;
      }
    }
  }
 b0a:	e497      	b.n	43c <Boot_Command+0x2c>
          */
          data = (boot_ASCIItoHex(n) << 4);
          phase = PhaseGetChecksumLSB;
        }
      }
      else if (phase == PhaseGetChecksumLSB)
 b0c:	1c3b      	adds	r3, r7, #0
 b0e:	3348      	adds	r3, #72	; 0x48
 b10:	781b      	ldrb	r3, [r3, #0]
 b12:	2b09      	cmp	r3, #9
 b14:	d000      	beq.n	b18 <Boot_Command+0x708>
 b16:	e491      	b.n	43c <Boot_Command+0x2c>
      {
        n = boot_Gethex();
 b18:	f7ff fb78 	bl	20c <boot_Gethex>
 b1c:	1c03      	adds	r3, r0, #0
 b1e:	1c1c      	adds	r4, r3, #0
        if (n == BOOT_ERROR_BAD_HEX)
 b20:	2cff      	cmp	r4, #255	; 0xff
 b22:	d105      	bne.n	b30 <Boot_Command+0x720>
        {
          data = '?';
 b24:	1c3b      	adds	r3, r7, #0
 b26:	334b      	adds	r3, #75	; 0x4b
 b28:	223f      	movs	r2, #63	; 0x3f
 b2a:	701a      	strb	r2, [r3, #0]
          state = StateBadHexCharacter;
 b2c:	2510      	movs	r5, #16
        }
        */
        state = StateProgramNext;
      }
    }
  }
 b2e:	e485      	b.n	43c <Boot_Command+0x2c>
        if (n == BOOT_ERROR_BAD_HEX)
        {
          data = '?';
          state = StateBadHexCharacter;
        }
        else if (n != NULL)
 b30:	2c00      	cmp	r4, #0
 b32:	d100      	bne.n	b36 <Boot_Command+0x726>
 b34:	e482      	b.n	43c <Boot_Command+0x2c>
        {
          /*
          **  Compare the calculated and transmitted checksums.
          */
          data += boot_ASCIItoHex(n);
 b36:	1c20      	adds	r0, r4, #0
 b38:	f7ff fb96 	bl	268 <boot_ASCIItoHex>
 b3c:	1c03      	adds	r3, r0, #0
 b3e:	1c19      	adds	r1, r3, #0
 b40:	1c3b      	adds	r3, r7, #0
 b42:	334b      	adds	r3, #75	; 0x4b
 b44:	1c3a      	adds	r2, r7, #0
 b46:	324b      	adds	r2, #75	; 0x4b
 b48:	7812      	ldrb	r2, [r2, #0]
 b4a:	188a      	adds	r2, r1, r2
 b4c:	701a      	strb	r2, [r3, #0]
          data = data - ~checksum;
 b4e:	1c3a      	adds	r2, r7, #0
 b50:	324a      	adds	r2, #74	; 0x4a
 b52:	1c3b      	adds	r3, r7, #0
 b54:	334b      	adds	r3, #75	; 0x4b
 b56:	7812      	ldrb	r2, [r2, #0]
 b58:	781b      	ldrb	r3, [r3, #0]
 b5a:	18d3      	adds	r3, r2, r3
 b5c:	b2da      	uxtb	r2, r3
 b5e:	1c3b      	adds	r3, r7, #0
 b60:	334b      	adds	r3, #75	; 0x4b
 b62:	3201      	adds	r2, #1
 b64:	701a      	strb	r2, [r3, #0]
          if (data == 0)
 b66:	1c3b      	adds	r3, r7, #0
 b68:	334b      	adds	r3, #75	; 0x4b
 b6a:	781b      	ldrb	r3, [r3, #0]
 b6c:	2b00      	cmp	r3, #0
 b6e:	d101      	bne.n	b74 <Boot_Command+0x764>
          {
            state = StateProgramSrecord;
 b70:	250d      	movs	r5, #13
        }
        */
        state = StateProgramNext;
      }
    }
  }
 b72:	e463      	b.n	43c <Boot_Command+0x2c>
          else
          {
            /*
            **  Bad checksum, abort this record.
            */
            data = '!';
 b74:	1c3b      	adds	r3, r7, #0
 b76:	334b      	adds	r3, #75	; 0x4b
 b78:	2221      	movs	r2, #33	; 0x21
 b7a:	701a      	strb	r2, [r3, #0]
            state = StateBadHexCharacter;
 b7c:	2510      	movs	r5, #16
        }
        */
        state = StateProgramNext;
      }
    }
  }
 b7e:	e45d      	b.n	43c <Boot_Command+0x2c>
    **    |||||||| |||||||| |||||||| |||||||| |||||||| |||||||| |||||||| ||||||||
    **    |||||||| |||||||| |||||||| |||||||| ++++++++-++++++++-++++++++-++++++++-- Flash data[31:0]
    **    |||||||| ++++++++-++++++++-++++++++-------------------------------------- Flash address[23:0]
    **    ++++++++----------------------------------------------------------------- Flash command
    */
    else if (state == StateProgramSrecord)
 b80:	2d0d      	cmp	r5, #13
 b82:	d000      	beq.n	b86 <Boot_Command+0x776>
 b84:	e0cc      	b.n	d20 <Boot_Command+0x910>
    {
      /*
      **  Check if the address is within the allowable range.
      */
      if (address.value < MCU_APPLICATION_VECTOR_TABLE_START)
 b86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 b88:	4b95      	ldr	r3, [pc, #596]	; (de0 <Boot_Command+0x9d0>)
 b8a:	429a      	cmp	r2, r3
 b8c:	d801      	bhi.n	b92 <Boot_Command+0x782>
      {
        // abort this record and go to next record, 5/8/14 add
    	  //i = 0;
    	  state = StateProgramNext;  
 b8e:	250e      	movs	r5, #14
        }
        */
        state = StateProgramNext;
      }
    }
  }
 b90:	e454      	b.n	43c <Boot_Command+0x2c>
      {
        // abort this record and go to next record, 5/8/14 add
    	  //i = 0;
    	  state = StateProgramNext;  
      }
      else if (address.value > MCU_APPLICATION_LAST_FLASH_ADDRESS)
 b92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 b94:	4b93      	ldr	r3, [pc, #588]	; (de4 <Boot_Command+0x9d4>)
 b96:	429a      	cmp	r2, r3
 b98:	d901      	bls.n	b9e <Boot_Command+0x78e>
    	  // abort this record and go to wait a new prompt, 5/8/14 add
    	 // state = StateNewPrompt;
    	 // phase = PhaseWaitForS;
    	 // abort this record and go to next record, Hex file includes RAM area when define non bss sections
    	      //i = 0;
    	      state = StateProgramNext; 
 b9a:	250e      	movs	r5, #14
        }
        */
        state = StateProgramNext;
      }
    }
  }
 b9c:	e44e      	b.n	43c <Boot_Command+0x2c>
    	 // abort this record and go to next record, Hex file includes RAM area when define non bss sections
    	      //i = 0;
    	      state = StateProgramNext; 
      }
      else{	//3/25/16 change
    	  if(IsUpdateOnly){
 b9e:	4b92      	ldr	r3, [pc, #584]	; (de8 <Boot_Command+0x9d8>)
 ba0:	781a      	ldrb	r2, [r3, #0]
 ba2:	2301      	movs	r3, #1
 ba4:	4013      	ands	r3, r2
 ba6:	b2db      	uxtb	r3, r3
 ba8:	2b00      	cmp	r3, #0
 baa:	d061      	beq.n	c70 <Boot_Command+0x860>
    		  if(address.value > MCU_APPLICATION_CODE_LAST_ADDRESS){
 bac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 bae:	4b8f      	ldr	r3, [pc, #572]	; (dec <Boot_Command+0x9dc>)
 bb0:	429a      	cmp	r2, r3
 bb2:	d905      	bls.n	bc0 <Boot_Command+0x7b0>
    			  // abort this record and go to wait a new prompt
    			  state = StateNewPrompt;
 bb4:	2503      	movs	r5, #3
    			  phase = PhaseWaitForS;
 bb6:	1c3b      	adds	r3, r7, #0
 bb8:	3348      	adds	r3, #72	; 0x48
 bba:	2200      	movs	r2, #0
 bbc:	701a      	strb	r2, [r3, #0]
        }
        */
        state = StateProgramNext;
      }
    }
  }
 bbe:	e43d      	b.n	43c <Boot_Command+0x2c>
    			  // abort this record and go to wait a new prompt
    			  state = StateNewPrompt;
    			  phase = PhaseWaitForS;
    		  }
    		  else{
    			  BOOT_FTFA_BASE_PTR->FCC_dword0_3.FCCOB0_3 = address.value;
 bc0:	4b8b      	ldr	r3, [pc, #556]	; (df0 <Boot_Command+0x9e0>)
 bc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 bc4:	605a      	str	r2, [r3, #4]
    			  BOOT_FTFA_BASE_PTR->FCC_dword0_3.BYTE.FCCOB0 = BOOT_CMD_FLASH_PROGRAM;
 bc6:	4b8a      	ldr	r3, [pc, #552]	; (df0 <Boot_Command+0x9e0>)
 bc8:	2206      	movs	r2, #6
 bca:	71da      	strb	r2, [r3, #7]
    			  BOOT_FTFA_BASE_PTR->FCC_dword4_7.BYTE.FCCOB7 = buffer[kount++];
 bcc:	4b88      	ldr	r3, [pc, #544]	; (df0 <Boot_Command+0x9e0>)
 bce:	1c3a      	adds	r2, r7, #0
 bd0:	324c      	adds	r2, #76	; 0x4c
 bd2:	7812      	ldrb	r2, [r2, #0]
 bd4:	1d39      	adds	r1, r7, #4
 bd6:	5c8a      	ldrb	r2, [r1, r2]
 bd8:	721a      	strb	r2, [r3, #8]
 bda:	1c3b      	adds	r3, r7, #0
 bdc:	334c      	adds	r3, #76	; 0x4c
 bde:	1c3a      	adds	r2, r7, #0
 be0:	324c      	adds	r2, #76	; 0x4c
 be2:	7812      	ldrb	r2, [r2, #0]
 be4:	3201      	adds	r2, #1
 be6:	701a      	strb	r2, [r3, #0]
    			  BOOT_FTFA_BASE_PTR->FCC_dword4_7.BYTE.FCCOB6 = buffer[kount++];
 be8:	4b81      	ldr	r3, [pc, #516]	; (df0 <Boot_Command+0x9e0>)
 bea:	1c3a      	adds	r2, r7, #0
 bec:	324c      	adds	r2, #76	; 0x4c
 bee:	7812      	ldrb	r2, [r2, #0]
 bf0:	1d39      	adds	r1, r7, #4
 bf2:	5c8a      	ldrb	r2, [r1, r2]
 bf4:	725a      	strb	r2, [r3, #9]
 bf6:	1c3b      	adds	r3, r7, #0
 bf8:	334c      	adds	r3, #76	; 0x4c
 bfa:	1c3a      	adds	r2, r7, #0
 bfc:	324c      	adds	r2, #76	; 0x4c
 bfe:	7812      	ldrb	r2, [r2, #0]
 c00:	3201      	adds	r2, #1
 c02:	701a      	strb	r2, [r3, #0]
    			  BOOT_FTFA_BASE_PTR->FCC_dword4_7.BYTE.FCCOB5 = buffer[kount++];
 c04:	4b7a      	ldr	r3, [pc, #488]	; (df0 <Boot_Command+0x9e0>)
 c06:	1c3a      	adds	r2, r7, #0
 c08:	324c      	adds	r2, #76	; 0x4c
 c0a:	7812      	ldrb	r2, [r2, #0]
 c0c:	1d39      	adds	r1, r7, #4
 c0e:	5c8a      	ldrb	r2, [r1, r2]
 c10:	729a      	strb	r2, [r3, #10]
 c12:	1c3b      	adds	r3, r7, #0
 c14:	334c      	adds	r3, #76	; 0x4c
 c16:	1c3a      	adds	r2, r7, #0
 c18:	324c      	adds	r2, #76	; 0x4c
 c1a:	7812      	ldrb	r2, [r2, #0]
 c1c:	3201      	adds	r2, #1
 c1e:	701a      	strb	r2, [r3, #0]
    			  BOOT_FTFA_BASE_PTR->FCC_dword4_7.BYTE.FCCOB4 = buffer[kount++];
 c20:	4b73      	ldr	r3, [pc, #460]	; (df0 <Boot_Command+0x9e0>)
 c22:	1c3a      	adds	r2, r7, #0
 c24:	324c      	adds	r2, #76	; 0x4c
 c26:	7812      	ldrb	r2, [r2, #0]
 c28:	1d39      	adds	r1, r7, #4
 c2a:	5c8a      	ldrb	r2, [r1, r2]
 c2c:	72da      	strb	r2, [r3, #11]
 c2e:	1c3b      	adds	r3, r7, #0
 c30:	334c      	adds	r3, #76	; 0x4c
 c32:	1c3a      	adds	r2, r7, #0
 c34:	324c      	adds	r2, #76	; 0x4c
 c36:	7812      	ldrb	r2, [r2, #0]
 c38:	3201      	adds	r2, #1
 c3a:	701a      	strb	r2, [r3, #0]
    			  /*
    			  **  Launch the Program Longword command via the RAM function.
    			  */
    			  (*RAMfunction_ptr)();
 c3c:	4b6d      	ldr	r3, [pc, #436]	; (df4 <Boot_Command+0x9e4>)
 c3e:	681b      	ldr	r3, [r3, #0]
 c40:	4798      	blx	r3
    			  /*
    			  **  Advance the address pointer.
    			  */
    			  address.value += 4;
 c42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c44:	3304      	adds	r3, #4
 c46:	647b      	str	r3, [r7, #68]	; 0x44
    			  for (n = 4; n != 0; n--)
 c48:	2404      	movs	r4, #4
 c4a:	e00e      	b.n	c6a <Boot_Command+0x85a>
    			  {
    				  index--;
 c4c:	1c3b      	adds	r3, r7, #0
 c4e:	3349      	adds	r3, #73	; 0x49
 c50:	1c3a      	adds	r2, r7, #0
 c52:	3249      	adds	r2, #73	; 0x49
 c54:	7812      	ldrb	r2, [r2, #0]
 c56:	3a01      	subs	r2, #1
 c58:	701a      	strb	r2, [r3, #0]
    			      if (index == 0)
 c5a:	1c3b      	adds	r3, r7, #0
 c5c:	3349      	adds	r3, #73	; 0x49
 c5e:	781b      	ldrb	r3, [r3, #0]
 c60:	2b00      	cmp	r3, #0
 c62:	d100      	bne.n	c66 <Boot_Command+0x856>
    			    	  if (i == 0)
    			    	  {
    			    		  i = 32;
    			    	  }
    			    	  */
    			    	  state = StateProgramNext;
 c64:	250e      	movs	r5, #14
    			  (*RAMfunction_ptr)();
    			  /*
    			  **  Advance the address pointer.
    			  */
    			  address.value += 4;
    			  for (n = 4; n != 0; n--)
 c66:	1e63      	subs	r3, r4, #1
 c68:	b2dc      	uxtb	r4, r3
 c6a:	2c00      	cmp	r4, #0
 c6c:	d1ee      	bne.n	c4c <Boot_Command+0x83c>
 c6e:	e0b5      	b.n	ddc <Boot_Command+0x9cc>
    			      }
    			  }
    		  }
    	  }
    	  else{
    		  BOOT_FTFA_BASE_PTR->FCC_dword0_3.FCCOB0_3 = address.value;
 c70:	4b5f      	ldr	r3, [pc, #380]	; (df0 <Boot_Command+0x9e0>)
 c72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 c74:	605a      	str	r2, [r3, #4]
    		  BOOT_FTFA_BASE_PTR->FCC_dword0_3.BYTE.FCCOB0 = BOOT_CMD_FLASH_PROGRAM;
 c76:	4b5e      	ldr	r3, [pc, #376]	; (df0 <Boot_Command+0x9e0>)
 c78:	2206      	movs	r2, #6
 c7a:	71da      	strb	r2, [r3, #7]
    		  BOOT_FTFA_BASE_PTR->FCC_dword4_7.BYTE.FCCOB7 = buffer[kount++];
 c7c:	4b5c      	ldr	r3, [pc, #368]	; (df0 <Boot_Command+0x9e0>)
 c7e:	1c3a      	adds	r2, r7, #0
 c80:	324c      	adds	r2, #76	; 0x4c
 c82:	7812      	ldrb	r2, [r2, #0]
 c84:	1d39      	adds	r1, r7, #4
 c86:	5c8a      	ldrb	r2, [r1, r2]
 c88:	721a      	strb	r2, [r3, #8]
 c8a:	1c3b      	adds	r3, r7, #0
 c8c:	334c      	adds	r3, #76	; 0x4c
 c8e:	1c3a      	adds	r2, r7, #0
 c90:	324c      	adds	r2, #76	; 0x4c
 c92:	7812      	ldrb	r2, [r2, #0]
 c94:	3201      	adds	r2, #1
 c96:	701a      	strb	r2, [r3, #0]
    		  BOOT_FTFA_BASE_PTR->FCC_dword4_7.BYTE.FCCOB6 = buffer[kount++];
 c98:	4b55      	ldr	r3, [pc, #340]	; (df0 <Boot_Command+0x9e0>)
 c9a:	1c3a      	adds	r2, r7, #0
 c9c:	324c      	adds	r2, #76	; 0x4c
 c9e:	7812      	ldrb	r2, [r2, #0]
 ca0:	1d39      	adds	r1, r7, #4
 ca2:	5c8a      	ldrb	r2, [r1, r2]
 ca4:	725a      	strb	r2, [r3, #9]
 ca6:	1c3b      	adds	r3, r7, #0
 ca8:	334c      	adds	r3, #76	; 0x4c
 caa:	1c3a      	adds	r2, r7, #0
 cac:	324c      	adds	r2, #76	; 0x4c
 cae:	7812      	ldrb	r2, [r2, #0]
 cb0:	3201      	adds	r2, #1
 cb2:	701a      	strb	r2, [r3, #0]
    		  BOOT_FTFA_BASE_PTR->FCC_dword4_7.BYTE.FCCOB5 = buffer[kount++];
 cb4:	4b4e      	ldr	r3, [pc, #312]	; (df0 <Boot_Command+0x9e0>)
 cb6:	1c3a      	adds	r2, r7, #0
 cb8:	324c      	adds	r2, #76	; 0x4c
 cba:	7812      	ldrb	r2, [r2, #0]
 cbc:	1d39      	adds	r1, r7, #4
 cbe:	5c8a      	ldrb	r2, [r1, r2]
 cc0:	729a      	strb	r2, [r3, #10]
 cc2:	1c3b      	adds	r3, r7, #0
 cc4:	334c      	adds	r3, #76	; 0x4c
 cc6:	1c3a      	adds	r2, r7, #0
 cc8:	324c      	adds	r2, #76	; 0x4c
 cca:	7812      	ldrb	r2, [r2, #0]
 ccc:	3201      	adds	r2, #1
 cce:	701a      	strb	r2, [r3, #0]
    		  BOOT_FTFA_BASE_PTR->FCC_dword4_7.BYTE.FCCOB4 = buffer[kount++];
 cd0:	4b47      	ldr	r3, [pc, #284]	; (df0 <Boot_Command+0x9e0>)
 cd2:	1c3a      	adds	r2, r7, #0
 cd4:	324c      	adds	r2, #76	; 0x4c
 cd6:	7812      	ldrb	r2, [r2, #0]
 cd8:	1d39      	adds	r1, r7, #4
 cda:	5c8a      	ldrb	r2, [r1, r2]
 cdc:	72da      	strb	r2, [r3, #11]
 cde:	1c3b      	adds	r3, r7, #0
 ce0:	334c      	adds	r3, #76	; 0x4c
 ce2:	1c3a      	adds	r2, r7, #0
 ce4:	324c      	adds	r2, #76	; 0x4c
 ce6:	7812      	ldrb	r2, [r2, #0]
 ce8:	3201      	adds	r2, #1
 cea:	701a      	strb	r2, [r3, #0]
    		  /*
    		   **  Launch the Program Longword command via the RAM function.
    		   */
    		  (*RAMfunction_ptr)();
 cec:	4b41      	ldr	r3, [pc, #260]	; (df4 <Boot_Command+0x9e4>)
 cee:	681b      	ldr	r3, [r3, #0]
 cf0:	4798      	blx	r3
    		  /*
    		   **  Advance the address pointer.
    		   */
    		  address.value += 4;
 cf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 cf4:	3304      	adds	r3, #4
 cf6:	647b      	str	r3, [r7, #68]	; 0x44
    		  for (n = 4; n != 0; n--)
 cf8:	2404      	movs	r4, #4
 cfa:	e00e      	b.n	d1a <Boot_Command+0x90a>
    		  {
    			  index--;
 cfc:	1c3b      	adds	r3, r7, #0
 cfe:	3349      	adds	r3, #73	; 0x49
 d00:	1c3a      	adds	r2, r7, #0
 d02:	3249      	adds	r2, #73	; 0x49
 d04:	7812      	ldrb	r2, [r2, #0]
 d06:	3a01      	subs	r2, #1
 d08:	701a      	strb	r2, [r3, #0]
    			  if (index == 0)
 d0a:	1c3b      	adds	r3, r7, #0
 d0c:	3349      	adds	r3, #73	; 0x49
 d0e:	781b      	ldrb	r3, [r3, #0]
 d10:	2b00      	cmp	r3, #0
 d12:	d100      	bne.n	d16 <Boot_Command+0x906>
    				  if (i == 0)
    				  {
    					  i = 32;
    				  }
    				  */
    				  state = StateProgramNext;
 d14:	250e      	movs	r5, #14
    		  (*RAMfunction_ptr)();
    		  /*
    		   **  Advance the address pointer.
    		   */
    		  address.value += 4;
    		  for (n = 4; n != 0; n--)
 d16:	1e63      	subs	r3, r4, #1
 d18:	b2dc      	uxtb	r4, r3
 d1a:	2c00      	cmp	r4, #0
 d1c:	d1ee      	bne.n	cfc <Boot_Command+0x8ec>
 d1e:	e05d      	b.n	ddc <Boot_Command+0x9cc>
    }
    /** State *************************************************************************************
    **
    **  Prepare to retrieve the next S-Record.
    */
    else if (state == StateProgramNext)
 d20:	2d0e      	cmp	r5, #14
 d22:	d125      	bne.n	d70 <Boot_Command+0x960>
        state = StateGetSrecord;
        phase = PhaseWaitForS;
      }
      */
    	
    	if(i == 0){
 d24:	4643      	mov	r3, r8
 d26:	2b00      	cmp	r3, #0
 d28:	d107      	bne.n	d3a <Boot_Command+0x92a>
    	    if (boot_PutCRLF() == TRUE){
 d2a:	f7ff fa3d 	bl	1a8 <boot_PutCRLF>
 d2e:	1c03      	adds	r3, r0, #0
 d30:	2b01      	cmp	r3, #1
 d32:	d116      	bne.n	d62 <Boot_Command+0x952>
    	    	i = 32;     
 d34:	2220      	movs	r2, #32
 d36:	4690      	mov	r8, r2
 d38:	e013      	b.n	d62 <Boot_Command+0x952>
    	    }
    	}
    	else if( j == 0){
 d3a:	464b      	mov	r3, r9
 d3c:	2b00      	cmp	r3, #0
 d3e:	d10c      	bne.n	d5a <Boot_Command+0x94a>
    		if(boot_Putc('>') == TRUE){
 d40:	203e      	movs	r0, #62	; 0x3e
 d42:	f7ff fa23 	bl	18c <boot_Putc>
 d46:	1c03      	adds	r3, r0, #0
 d48:	2b01      	cmp	r3, #1
 d4a:	d10a      	bne.n	d62 <Boot_Command+0x952>
    			i--;
 d4c:	4643      	mov	r3, r8
 d4e:	3b01      	subs	r3, #1
 d50:	b2db      	uxtb	r3, r3
 d52:	4698      	mov	r8, r3
    			j=100;
 d54:	2264      	movs	r2, #100	; 0x64
 d56:	4691      	mov	r9, r2
 d58:	e003      	b.n	d62 <Boot_Command+0x952>
    		}
    	}
    	else{
    			j--;
 d5a:	464b      	mov	r3, r9
 d5c:	3b01      	subs	r3, #1
 d5e:	b2db      	uxtb	r3, r3
 d60:	4699      	mov	r9, r3
    		}
    	state = StateGetSrecord;
 d62:	250c      	movs	r5, #12
    	phase = PhaseWaitForS;
 d64:	1c3b      	adds	r3, r7, #0
 d66:	3348      	adds	r3, #72	; 0x48
 d68:	2200      	movs	r2, #0
 d6a:	701a      	strb	r2, [r3, #0]
        }
        */
        state = StateProgramNext;
      }
    }
  }
 d6c:	f7ff fb66 	bl	43c <Boot_Command+0x2c>
    }
    /** State *************************************************************************************
    **
    **  Finished programming.
    */
    else if (state == StateProgramDone)
 d70:	2d0f      	cmp	r5, #15
 d72:	d124      	bne.n	dbe <Boot_Command+0x9ae>
    {
      n = boot_Getc();
 d74:	f7ff fa36 	bl	1e4 <boot_Getc>
 d78:	1c03      	adds	r3, r0, #0
 d7a:	1c1c      	adds	r4, r3, #0
      if (n != 0)
 d7c:	2c00      	cmp	r4, #0
 d7e:	d006      	beq.n	d8e <Boot_Command+0x97e>
      {
        kount--;
 d80:	1c3b      	adds	r3, r7, #0
 d82:	334c      	adds	r3, #76	; 0x4c
 d84:	1c3a      	adds	r2, r7, #0
 d86:	324c      	adds	r2, #76	; 0x4c
 d88:	7812      	ldrb	r2, [r2, #0]
 d8a:	3a01      	subs	r2, #1
 d8c:	701a      	strb	r2, [r3, #0]
      }
      if (kount == 0)
 d8e:	1c3b      	adds	r3, r7, #0
 d90:	334c      	adds	r3, #76	; 0x4c
 d92:	781b      	ldrb	r3, [r3, #0]
 d94:	2b00      	cmp	r3, #0
 d96:	d001      	beq.n	d9c <Boot_Command+0x98c>
 d98:	f7ff fb50 	bl	43c <Boot_Command+0x2c>
    	  //11/25/15 change
    	  //ptr8 = (uint8_t*)&str_Done[0];	
    	 // state = StatePrintString;
    	 // phase = PhaseWaitForS;
    	  //---------------------------
    	  ptr8 = (uint8_t*)&str_Done[0];
 d9c:	4e16      	ldr	r6, [pc, #88]	; (df8 <Boot_Command+0x9e8>)
    	  while(*ptr8){
 d9e:	e007      	b.n	db0 <Boot_Command+0x9a0>
    		  if (boot_Putc(*ptr8) == TRUE)
 da0:	7833      	ldrb	r3, [r6, #0]
 da2:	1c18      	adds	r0, r3, #0
 da4:	f7ff f9f2 	bl	18c <boot_Putc>
 da8:	1c03      	adds	r3, r0, #0
 daa:	2b01      	cmp	r3, #1
 dac:	d100      	bne.n	db0 <Boot_Command+0x9a0>
    		  {
    			  ptr8++;
 dae:	3601      	adds	r6, #1
    	  //ptr8 = (uint8_t*)&str_Done[0];	
    	 // state = StatePrintString;
    	 // phase = PhaseWaitForS;
    	  //---------------------------
    	  ptr8 = (uint8_t*)&str_Done[0];
    	  while(*ptr8){
 db0:	7833      	ldrb	r3, [r6, #0]
 db2:	2b00      	cmp	r3, #0
 db4:	d1f4      	bne.n	da0 <Boot_Command+0x990>
    			  ptr8++;
    	      	   
    	      	}
    	  }
    	  
    	  Boot_Reset(); // out of boot loader
 db6:	f7ff f983 	bl	c0 <Boot_Reset>
        }
        */
        state = StateProgramNext;
      }
    }
  }
 dba:	f7ff fb3f 	bl	43c <Boot_Command+0x2c>
    }
    /** State *************************************************************************************
    **
    **  Received a non-hexadecimal character when one was received.
    */
    else if (state == StateBadHexCharacter)
 dbe:	2d10      	cmp	r5, #16
 dc0:	d001      	beq.n	dc6 <Boot_Command+0x9b6>
 dc2:	f7ff fb3b 	bl	43c <Boot_Command+0x2c>
    {
      n = boot_Getc();
 dc6:	f7ff fa0d 	bl	1e4 <boot_Getc>
 dca:	1c03      	adds	r3, r0, #0
 dcc:	1c1c      	adds	r4, r3, #0
      if (n == ASCII_CR)
 dce:	2c0d      	cmp	r4, #13
 dd0:	d001      	beq.n	dd6 <Boot_Command+0x9c6>
 dd2:	f7ff fb33 	bl	43c <Boot_Command+0x2c>
        if (i == 0)
        {
          i = 32;
        }
        */
        state = StateProgramNext;
 dd6:	250e      	movs	r5, #14
      }
    }
  }
 dd8:	f7ff fb30 	bl	43c <Boot_Command+0x2c>
 ddc:	f7ff fb2e 	bl	43c <Boot_Command+0x2c>
 de0:	00001fff 	.word	0x00001fff
 de4:	0001ffff 	.word	0x0001ffff
 de8:	1ffff004 	.word	0x1ffff004
 dec:	0001fbff 	.word	0x0001fbff
 df0:	40020000 	.word	0x40020000
 df4:	20000284 	.word	0x20000284
 df8:	00001fcc 	.word	0x00001fcc

Disassembly of section .text:

000020c0 <__gnu_thumb1_case_sqi>:
    20c0:	b402      	push	{r1}
    20c2:	4671      	mov	r1, lr
    20c4:	0849      	lsrs	r1, r1, #1
    20c6:	0049      	lsls	r1, r1, #1
    20c8:	5609      	ldrsb	r1, [r1, r0]
    20ca:	0049      	lsls	r1, r1, #1
    20cc:	448e      	add	lr, r1
    20ce:	bc02      	pop	{r1}
    20d0:	4770      	bx	lr
    20d2:	46c0      	nop			; (mov r8, r8)

000020d4 <__gnu_thumb1_case_uqi>:
    20d4:	b402      	push	{r1}
    20d6:	4671      	mov	r1, lr
    20d8:	0849      	lsrs	r1, r1, #1
    20da:	0049      	lsls	r1, r1, #1
    20dc:	5c09      	ldrb	r1, [r1, r0]
    20de:	0049      	lsls	r1, r1, #1
    20e0:	448e      	add	lr, r1
    20e2:	bc02      	pop	{r1}
    20e4:	4770      	bx	lr
    20e6:	46c0      	nop			; (mov r8, r8)

000020e8 <__aeabi_uidiv>:
    20e8:	2900      	cmp	r1, #0
    20ea:	d034      	beq.n	2156 <.udivsi3_skip_div0_test+0x6a>

000020ec <.udivsi3_skip_div0_test>:
    20ec:	2301      	movs	r3, #1
    20ee:	2200      	movs	r2, #0
    20f0:	b410      	push	{r4}
    20f2:	4288      	cmp	r0, r1
    20f4:	d32c      	bcc.n	2150 <.udivsi3_skip_div0_test+0x64>
    20f6:	2401      	movs	r4, #1
    20f8:	0724      	lsls	r4, r4, #28
    20fa:	42a1      	cmp	r1, r4
    20fc:	d204      	bcs.n	2108 <.udivsi3_skip_div0_test+0x1c>
    20fe:	4281      	cmp	r1, r0
    2100:	d202      	bcs.n	2108 <.udivsi3_skip_div0_test+0x1c>
    2102:	0109      	lsls	r1, r1, #4
    2104:	011b      	lsls	r3, r3, #4
    2106:	e7f8      	b.n	20fa <.udivsi3_skip_div0_test+0xe>
    2108:	00e4      	lsls	r4, r4, #3
    210a:	42a1      	cmp	r1, r4
    210c:	d204      	bcs.n	2118 <.udivsi3_skip_div0_test+0x2c>
    210e:	4281      	cmp	r1, r0
    2110:	d202      	bcs.n	2118 <.udivsi3_skip_div0_test+0x2c>
    2112:	0049      	lsls	r1, r1, #1
    2114:	005b      	lsls	r3, r3, #1
    2116:	e7f8      	b.n	210a <.udivsi3_skip_div0_test+0x1e>
    2118:	4288      	cmp	r0, r1
    211a:	d301      	bcc.n	2120 <.udivsi3_skip_div0_test+0x34>
    211c:	1a40      	subs	r0, r0, r1
    211e:	431a      	orrs	r2, r3
    2120:	084c      	lsrs	r4, r1, #1
    2122:	42a0      	cmp	r0, r4
    2124:	d302      	bcc.n	212c <.udivsi3_skip_div0_test+0x40>
    2126:	1b00      	subs	r0, r0, r4
    2128:	085c      	lsrs	r4, r3, #1
    212a:	4322      	orrs	r2, r4
    212c:	088c      	lsrs	r4, r1, #2
    212e:	42a0      	cmp	r0, r4
    2130:	d302      	bcc.n	2138 <.udivsi3_skip_div0_test+0x4c>
    2132:	1b00      	subs	r0, r0, r4
    2134:	089c      	lsrs	r4, r3, #2
    2136:	4322      	orrs	r2, r4
    2138:	08cc      	lsrs	r4, r1, #3
    213a:	42a0      	cmp	r0, r4
    213c:	d302      	bcc.n	2144 <.udivsi3_skip_div0_test+0x58>
    213e:	1b00      	subs	r0, r0, r4
    2140:	08dc      	lsrs	r4, r3, #3
    2142:	4322      	orrs	r2, r4
    2144:	2800      	cmp	r0, #0
    2146:	d003      	beq.n	2150 <.udivsi3_skip_div0_test+0x64>
    2148:	091b      	lsrs	r3, r3, #4
    214a:	d001      	beq.n	2150 <.udivsi3_skip_div0_test+0x64>
    214c:	0909      	lsrs	r1, r1, #4
    214e:	e7e3      	b.n	2118 <.udivsi3_skip_div0_test+0x2c>
    2150:	1c10      	adds	r0, r2, #0
    2152:	bc10      	pop	{r4}
    2154:	4770      	bx	lr
    2156:	2800      	cmp	r0, #0
    2158:	d001      	beq.n	215e <.udivsi3_skip_div0_test+0x72>
    215a:	2000      	movs	r0, #0
    215c:	43c0      	mvns	r0, r0
    215e:	b407      	push	{r0, r1, r2}
    2160:	4802      	ldr	r0, [pc, #8]	; (216c <.udivsi3_skip_div0_test+0x80>)
    2162:	a102      	add	r1, pc, #8	; (adr r1, 216c <.udivsi3_skip_div0_test+0x80>)
    2164:	1840      	adds	r0, r0, r1
    2166:	9002      	str	r0, [sp, #8]
    2168:	bd03      	pop	{r0, r1, pc}
    216a:	46c0      	nop			; (mov r8, r8)
    216c:	000000d9 	.word	0x000000d9

00002170 <__aeabi_uidivmod>:
    2170:	2900      	cmp	r1, #0
    2172:	d0f0      	beq.n	2156 <.udivsi3_skip_div0_test+0x6a>
    2174:	b503      	push	{r0, r1, lr}
    2176:	f7ff ffb9 	bl	20ec <.udivsi3_skip_div0_test>
    217a:	bc0e      	pop	{r1, r2, r3}
    217c:	4342      	muls	r2, r0
    217e:	1a89      	subs	r1, r1, r2
    2180:	4718      	bx	r3
    2182:	46c0      	nop			; (mov r8, r8)

00002184 <__aeabi_idiv>:
    2184:	2900      	cmp	r1, #0
    2186:	d041      	beq.n	220c <.divsi3_skip_div0_test+0x84>

00002188 <.divsi3_skip_div0_test>:
    2188:	b410      	push	{r4}
    218a:	1c04      	adds	r4, r0, #0
    218c:	404c      	eors	r4, r1
    218e:	46a4      	mov	ip, r4
    2190:	2301      	movs	r3, #1
    2192:	2200      	movs	r2, #0
    2194:	2900      	cmp	r1, #0
    2196:	d500      	bpl.n	219a <.divsi3_skip_div0_test+0x12>
    2198:	4249      	negs	r1, r1
    219a:	2800      	cmp	r0, #0
    219c:	d500      	bpl.n	21a0 <.divsi3_skip_div0_test+0x18>
    219e:	4240      	negs	r0, r0
    21a0:	4288      	cmp	r0, r1
    21a2:	d32c      	bcc.n	21fe <.divsi3_skip_div0_test+0x76>
    21a4:	2401      	movs	r4, #1
    21a6:	0724      	lsls	r4, r4, #28
    21a8:	42a1      	cmp	r1, r4
    21aa:	d204      	bcs.n	21b6 <.divsi3_skip_div0_test+0x2e>
    21ac:	4281      	cmp	r1, r0
    21ae:	d202      	bcs.n	21b6 <.divsi3_skip_div0_test+0x2e>
    21b0:	0109      	lsls	r1, r1, #4
    21b2:	011b      	lsls	r3, r3, #4
    21b4:	e7f8      	b.n	21a8 <.divsi3_skip_div0_test+0x20>
    21b6:	00e4      	lsls	r4, r4, #3
    21b8:	42a1      	cmp	r1, r4
    21ba:	d204      	bcs.n	21c6 <.divsi3_skip_div0_test+0x3e>
    21bc:	4281      	cmp	r1, r0
    21be:	d202      	bcs.n	21c6 <.divsi3_skip_div0_test+0x3e>
    21c0:	0049      	lsls	r1, r1, #1
    21c2:	005b      	lsls	r3, r3, #1
    21c4:	e7f8      	b.n	21b8 <.divsi3_skip_div0_test+0x30>
    21c6:	4288      	cmp	r0, r1
    21c8:	d301      	bcc.n	21ce <.divsi3_skip_div0_test+0x46>
    21ca:	1a40      	subs	r0, r0, r1
    21cc:	431a      	orrs	r2, r3
    21ce:	084c      	lsrs	r4, r1, #1
    21d0:	42a0      	cmp	r0, r4
    21d2:	d302      	bcc.n	21da <.divsi3_skip_div0_test+0x52>
    21d4:	1b00      	subs	r0, r0, r4
    21d6:	085c      	lsrs	r4, r3, #1
    21d8:	4322      	orrs	r2, r4
    21da:	088c      	lsrs	r4, r1, #2
    21dc:	42a0      	cmp	r0, r4
    21de:	d302      	bcc.n	21e6 <.divsi3_skip_div0_test+0x5e>
    21e0:	1b00      	subs	r0, r0, r4
    21e2:	089c      	lsrs	r4, r3, #2
    21e4:	4322      	orrs	r2, r4
    21e6:	08cc      	lsrs	r4, r1, #3
    21e8:	42a0      	cmp	r0, r4
    21ea:	d302      	bcc.n	21f2 <.divsi3_skip_div0_test+0x6a>
    21ec:	1b00      	subs	r0, r0, r4
    21ee:	08dc      	lsrs	r4, r3, #3
    21f0:	4322      	orrs	r2, r4
    21f2:	2800      	cmp	r0, #0
    21f4:	d003      	beq.n	21fe <.divsi3_skip_div0_test+0x76>
    21f6:	091b      	lsrs	r3, r3, #4
    21f8:	d001      	beq.n	21fe <.divsi3_skip_div0_test+0x76>
    21fa:	0909      	lsrs	r1, r1, #4
    21fc:	e7e3      	b.n	21c6 <.divsi3_skip_div0_test+0x3e>
    21fe:	1c10      	adds	r0, r2, #0
    2200:	4664      	mov	r4, ip
    2202:	2c00      	cmp	r4, #0
    2204:	d500      	bpl.n	2208 <.divsi3_skip_div0_test+0x80>
    2206:	4240      	negs	r0, r0
    2208:	bc10      	pop	{r4}
    220a:	4770      	bx	lr
    220c:	2800      	cmp	r0, #0
    220e:	d006      	beq.n	221e <.divsi3_skip_div0_test+0x96>
    2210:	db03      	blt.n	221a <.divsi3_skip_div0_test+0x92>
    2212:	2000      	movs	r0, #0
    2214:	43c0      	mvns	r0, r0
    2216:	0840      	lsrs	r0, r0, #1
    2218:	e001      	b.n	221e <.divsi3_skip_div0_test+0x96>
    221a:	2080      	movs	r0, #128	; 0x80
    221c:	0600      	lsls	r0, r0, #24
    221e:	b407      	push	{r0, r1, r2}
    2220:	4802      	ldr	r0, [pc, #8]	; (222c <.divsi3_skip_div0_test+0xa4>)
    2222:	a102      	add	r1, pc, #8	; (adr r1, 222c <.divsi3_skip_div0_test+0xa4>)
    2224:	1840      	adds	r0, r0, r1
    2226:	9002      	str	r0, [sp, #8]
    2228:	bd03      	pop	{r0, r1, pc}
    222a:	46c0      	nop			; (mov r8, r8)
    222c:	00000019 	.word	0x00000019

00002230 <__aeabi_idivmod>:
    2230:	2900      	cmp	r1, #0
    2232:	d0eb      	beq.n	220c <.divsi3_skip_div0_test+0x84>
    2234:	b503      	push	{r0, r1, lr}
    2236:	f7ff ffa7 	bl	2188 <.divsi3_skip_div0_test>
    223a:	bc0e      	pop	{r1, r2, r3}
    223c:	4342      	muls	r2, r0
    223e:	1a89      	subs	r1, r1, r2
    2240:	4718      	bx	r3
    2242:	46c0      	nop			; (mov r8, r8)

00002244 <__aeabi_idiv0>:
    2244:	4770      	bx	lr
    2246:	46c0      	nop			; (mov r8, r8)

00002248 <__aeabi_cdrcmple>:
    2248:	4684      	mov	ip, r0
    224a:	1c10      	adds	r0, r2, #0
    224c:	4662      	mov	r2, ip
    224e:	468c      	mov	ip, r1
    2250:	1c19      	adds	r1, r3, #0
    2252:	4663      	mov	r3, ip
    2254:	e000      	b.n	2258 <__aeabi_cdcmpeq>
    2256:	46c0      	nop			; (mov r8, r8)

00002258 <__aeabi_cdcmpeq>:
    2258:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    225a:	f000 fbc1 	bl	29e0 <__ledf2>
    225e:	2800      	cmp	r0, #0
    2260:	d401      	bmi.n	2266 <__aeabi_cdcmpeq+0xe>
    2262:	2100      	movs	r1, #0
    2264:	42c8      	cmn	r0, r1
    2266:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00002268 <__aeabi_dcmpeq>:
    2268:	b510      	push	{r4, lr}
    226a:	f000 fb07 	bl	287c <__eqdf2>
    226e:	4240      	negs	r0, r0
    2270:	3001      	adds	r0, #1
    2272:	bd10      	pop	{r4, pc}

00002274 <__aeabi_dcmplt>:
    2274:	b510      	push	{r4, lr}
    2276:	f000 fbb3 	bl	29e0 <__ledf2>
    227a:	2800      	cmp	r0, #0
    227c:	db01      	blt.n	2282 <__aeabi_dcmplt+0xe>
    227e:	2000      	movs	r0, #0
    2280:	bd10      	pop	{r4, pc}
    2282:	2001      	movs	r0, #1
    2284:	bd10      	pop	{r4, pc}
    2286:	46c0      	nop			; (mov r8, r8)

00002288 <__aeabi_dcmple>:
    2288:	b510      	push	{r4, lr}
    228a:	f000 fba9 	bl	29e0 <__ledf2>
    228e:	2800      	cmp	r0, #0
    2290:	dd01      	ble.n	2296 <__aeabi_dcmple+0xe>
    2292:	2000      	movs	r0, #0
    2294:	bd10      	pop	{r4, pc}
    2296:	2001      	movs	r0, #1
    2298:	bd10      	pop	{r4, pc}
    229a:	46c0      	nop			; (mov r8, r8)

0000229c <__aeabi_dcmpgt>:
    229c:	b510      	push	{r4, lr}
    229e:	f000 fb2b 	bl	28f8 <__gedf2>
    22a2:	2800      	cmp	r0, #0
    22a4:	dc01      	bgt.n	22aa <__aeabi_dcmpgt+0xe>
    22a6:	2000      	movs	r0, #0
    22a8:	bd10      	pop	{r4, pc}
    22aa:	2001      	movs	r0, #1
    22ac:	bd10      	pop	{r4, pc}
    22ae:	46c0      	nop			; (mov r8, r8)

000022b0 <__aeabi_dcmpge>:
    22b0:	b510      	push	{r4, lr}
    22b2:	f000 fb21 	bl	28f8 <__gedf2>
    22b6:	2800      	cmp	r0, #0
    22b8:	da01      	bge.n	22be <__aeabi_dcmpge+0xe>
    22ba:	2000      	movs	r0, #0
    22bc:	bd10      	pop	{r4, pc}
    22be:	2001      	movs	r0, #1
    22c0:	bd10      	pop	{r4, pc}
    22c2:	46c0      	nop			; (mov r8, r8)

000022c4 <__aeabi_ddiv>:
    22c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    22c6:	464d      	mov	r5, r9
    22c8:	4644      	mov	r4, r8
    22ca:	465f      	mov	r7, fp
    22cc:	4656      	mov	r6, sl
    22ce:	b4f0      	push	{r4, r5, r6, r7}
    22d0:	1c1d      	adds	r5, r3, #0
    22d2:	004b      	lsls	r3, r1, #1
    22d4:	1c14      	adds	r4, r2, #0
    22d6:	030e      	lsls	r6, r1, #12
    22d8:	0d5b      	lsrs	r3, r3, #21
    22da:	0fca      	lsrs	r2, r1, #31
    22dc:	b087      	sub	sp, #28
    22de:	1c07      	adds	r7, r0, #0
    22e0:	0b36      	lsrs	r6, r6, #12
    22e2:	4698      	mov	r8, r3
    22e4:	4691      	mov	r9, r2
    22e6:	2b00      	cmp	r3, #0
    22e8:	d11d      	bne.n	2326 <__aeabi_ddiv+0x62>
    22ea:	1c32      	adds	r2, r6, #0
    22ec:	4302      	orrs	r2, r0
    22ee:	d100      	bne.n	22f2 <__aeabi_ddiv+0x2e>
    22f0:	e181      	b.n	25f6 <__aeabi_ddiv+0x332>
    22f2:	2e00      	cmp	r6, #0
    22f4:	d100      	bne.n	22f8 <__aeabi_ddiv+0x34>
    22f6:	e204      	b.n	2702 <__aeabi_ddiv+0x43e>
    22f8:	1c30      	adds	r0, r6, #0
    22fa:	f001 fa39 	bl	3770 <__clzsi2>
    22fe:	2827      	cmp	r0, #39	; 0x27
    2300:	dd00      	ble.n	2304 <__aeabi_ddiv+0x40>
    2302:	e1f8      	b.n	26f6 <__aeabi_ddiv+0x432>
    2304:	2128      	movs	r1, #40	; 0x28
    2306:	1c03      	adds	r3, r0, #0
    2308:	3b08      	subs	r3, #8
    230a:	1a0a      	subs	r2, r1, r0
    230c:	1c39      	adds	r1, r7, #0
    230e:	409e      	lsls	r6, r3
    2310:	40d1      	lsrs	r1, r2
    2312:	430e      	orrs	r6, r1
    2314:	409f      	lsls	r7, r3
    2316:	4bc1      	ldr	r3, [pc, #772]	; (261c <__aeabi_ddiv+0x358>)
    2318:	2100      	movs	r1, #0
    231a:	1a18      	subs	r0, r3, r0
    231c:	2200      	movs	r2, #0
    231e:	4680      	mov	r8, r0
    2320:	468a      	mov	sl, r1
    2322:	9200      	str	r2, [sp, #0]
    2324:	e00f      	b.n	2346 <__aeabi_ddiv+0x82>
    2326:	48be      	ldr	r0, [pc, #760]	; (2620 <__aeabi_ddiv+0x35c>)
    2328:	4283      	cmp	r3, r0
    232a:	d031      	beq.n	2390 <__aeabi_ddiv+0xcc>
    232c:	2180      	movs	r1, #128	; 0x80
    232e:	034b      	lsls	r3, r1, #13
    2330:	431e      	orrs	r6, r3
    2332:	48bc      	ldr	r0, [pc, #752]	; (2624 <__aeabi_ddiv+0x360>)
    2334:	0f7a      	lsrs	r2, r7, #29
    2336:	00f6      	lsls	r6, r6, #3
    2338:	2100      	movs	r1, #0
    233a:	2300      	movs	r3, #0
    233c:	4316      	orrs	r6, r2
    233e:	00ff      	lsls	r7, r7, #3
    2340:	4480      	add	r8, r0
    2342:	468a      	mov	sl, r1
    2344:	9300      	str	r3, [sp, #0]
    2346:	1c29      	adds	r1, r5, #0
    2348:	1c20      	adds	r0, r4, #0
    234a:	1c25      	adds	r5, r4, #0
    234c:	004a      	lsls	r2, r1, #1
    234e:	030c      	lsls	r4, r1, #12
    2350:	0fcb      	lsrs	r3, r1, #31
    2352:	0b24      	lsrs	r4, r4, #12
    2354:	0d52      	lsrs	r2, r2, #21
    2356:	469b      	mov	fp, r3
    2358:	d125      	bne.n	23a6 <__aeabi_ddiv+0xe2>
    235a:	1c21      	adds	r1, r4, #0
    235c:	4301      	orrs	r1, r0
    235e:	d100      	bne.n	2362 <__aeabi_ddiv+0x9e>
    2360:	e150      	b.n	2604 <__aeabi_ddiv+0x340>
    2362:	2c00      	cmp	r4, #0
    2364:	d100      	bne.n	2368 <__aeabi_ddiv+0xa4>
    2366:	e1c2      	b.n	26ee <__aeabi_ddiv+0x42a>
    2368:	1c20      	adds	r0, r4, #0
    236a:	f001 fa01 	bl	3770 <__clzsi2>
    236e:	2827      	cmp	r0, #39	; 0x27
    2370:	dd00      	ble.n	2374 <__aeabi_ddiv+0xb0>
    2372:	e1b6      	b.n	26e2 <__aeabi_ddiv+0x41e>
    2374:	1c03      	adds	r3, r0, #0
    2376:	2228      	movs	r2, #40	; 0x28
    2378:	3b08      	subs	r3, #8
    237a:	1c29      	adds	r1, r5, #0
    237c:	1a12      	subs	r2, r2, r0
    237e:	409c      	lsls	r4, r3
    2380:	40d1      	lsrs	r1, r2
    2382:	430c      	orrs	r4, r1
    2384:	409d      	lsls	r5, r3
    2386:	4ba5      	ldr	r3, [pc, #660]	; (261c <__aeabi_ddiv+0x358>)
    2388:	1a1a      	subs	r2, r3, r0
    238a:	2000      	movs	r0, #0
    238c:	9002      	str	r0, [sp, #8]
    238e:	e019      	b.n	23c4 <__aeabi_ddiv+0x100>
    2390:	1c32      	adds	r2, r6, #0
    2392:	433a      	orrs	r2, r7
    2394:	d000      	beq.n	2398 <__aeabi_ddiv+0xd4>
    2396:	e129      	b.n	25ec <__aeabi_ddiv+0x328>
    2398:	2708      	movs	r7, #8
    239a:	2302      	movs	r3, #2
    239c:	46ba      	mov	sl, r7
    239e:	2600      	movs	r6, #0
    23a0:	2700      	movs	r7, #0
    23a2:	9300      	str	r3, [sp, #0]
    23a4:	e7cf      	b.n	2346 <__aeabi_ddiv+0x82>
    23a6:	489e      	ldr	r0, [pc, #632]	; (2620 <__aeabi_ddiv+0x35c>)
    23a8:	4282      	cmp	r2, r0
    23aa:	d100      	bne.n	23ae <__aeabi_ddiv+0xea>
    23ac:	e113      	b.n	25d6 <__aeabi_ddiv+0x312>
    23ae:	2180      	movs	r1, #128	; 0x80
    23b0:	034b      	lsls	r3, r1, #13
    23b2:	431c      	orrs	r4, r3
    23b4:	499b      	ldr	r1, [pc, #620]	; (2624 <__aeabi_ddiv+0x360>)
    23b6:	0f68      	lsrs	r0, r5, #29
    23b8:	00e4      	lsls	r4, r4, #3
    23ba:	2300      	movs	r3, #0
    23bc:	4304      	orrs	r4, r0
    23be:	00ed      	lsls	r5, r5, #3
    23c0:	1852      	adds	r2, r2, r1
    23c2:	9302      	str	r3, [sp, #8]
    23c4:	4648      	mov	r0, r9
    23c6:	465b      	mov	r3, fp
    23c8:	4043      	eors	r3, r0
    23ca:	9802      	ldr	r0, [sp, #8]
    23cc:	4651      	mov	r1, sl
    23ce:	9301      	str	r3, [sp, #4]
    23d0:	4301      	orrs	r1, r0
    23d2:	290f      	cmp	r1, #15
    23d4:	d800      	bhi.n	23d8 <__aeabi_ddiv+0x114>
    23d6:	e0df      	b.n	2598 <__aeabi_ddiv+0x2d4>
    23d8:	4643      	mov	r3, r8
    23da:	1a9a      	subs	r2, r3, r2
    23dc:	9204      	str	r2, [sp, #16]
    23de:	42a6      	cmp	r6, r4
    23e0:	d800      	bhi.n	23e4 <__aeabi_ddiv+0x120>
    23e2:	e16e      	b.n	26c2 <__aeabi_ddiv+0x3fe>
    23e4:	0871      	lsrs	r1, r6, #1
    23e6:	087b      	lsrs	r3, r7, #1
    23e8:	07f6      	lsls	r6, r6, #31
    23ea:	4333      	orrs	r3, r6
    23ec:	07fa      	lsls	r2, r7, #31
    23ee:	4689      	mov	r9, r1
    23f0:	4698      	mov	r8, r3
    23f2:	9202      	str	r2, [sp, #8]
    23f4:	0e28      	lsrs	r0, r5, #24
    23f6:	0224      	lsls	r4, r4, #8
    23f8:	4304      	orrs	r4, r0
    23fa:	022d      	lsls	r5, r5, #8
    23fc:	0427      	lsls	r7, r4, #16
    23fe:	0c39      	lsrs	r1, r7, #16
    2400:	46ab      	mov	fp, r5
    2402:	0c25      	lsrs	r5, r4, #16
    2404:	9100      	str	r1, [sp, #0]
    2406:	4648      	mov	r0, r9
    2408:	1c29      	adds	r1, r5, #0
    240a:	f7ff fe6d 	bl	20e8 <__aeabi_uidiv>
    240e:	9f00      	ldr	r7, [sp, #0]
    2410:	1c06      	adds	r6, r0, #0
    2412:	4347      	muls	r7, r0
    2414:	1c29      	adds	r1, r5, #0
    2416:	4648      	mov	r0, r9
    2418:	f7ff feaa 	bl	2170 <__aeabi_uidivmod>
    241c:	4643      	mov	r3, r8
    241e:	0408      	lsls	r0, r1, #16
    2420:	0c1a      	lsrs	r2, r3, #16
    2422:	4310      	orrs	r0, r2
    2424:	4287      	cmp	r7, r0
    2426:	d907      	bls.n	2438 <__aeabi_ddiv+0x174>
    2428:	1900      	adds	r0, r0, r4
    242a:	3e01      	subs	r6, #1
    242c:	4284      	cmp	r4, r0
    242e:	d803      	bhi.n	2438 <__aeabi_ddiv+0x174>
    2430:	4287      	cmp	r7, r0
    2432:	d901      	bls.n	2438 <__aeabi_ddiv+0x174>
    2434:	3e01      	subs	r6, #1
    2436:	1900      	adds	r0, r0, r4
    2438:	1bc1      	subs	r1, r0, r7
    243a:	468a      	mov	sl, r1
    243c:	1c08      	adds	r0, r1, #0
    243e:	1c29      	adds	r1, r5, #0
    2440:	f7ff fe52 	bl	20e8 <__aeabi_uidiv>
    2444:	9b00      	ldr	r3, [sp, #0]
    2446:	1c07      	adds	r7, r0, #0
    2448:	4343      	muls	r3, r0
    244a:	1c29      	adds	r1, r5, #0
    244c:	4650      	mov	r0, sl
    244e:	4699      	mov	r9, r3
    2450:	f7ff fe8e 	bl	2170 <__aeabi_uidivmod>
    2454:	4642      	mov	r2, r8
    2456:	0410      	lsls	r0, r2, #16
    2458:	040b      	lsls	r3, r1, #16
    245a:	0c01      	lsrs	r1, r0, #16
    245c:	430b      	orrs	r3, r1
    245e:	4599      	cmp	r9, r3
    2460:	d904      	bls.n	246c <__aeabi_ddiv+0x1a8>
    2462:	191b      	adds	r3, r3, r4
    2464:	3f01      	subs	r7, #1
    2466:	429c      	cmp	r4, r3
    2468:	d800      	bhi.n	246c <__aeabi_ddiv+0x1a8>
    246a:	e164      	b.n	2736 <__aeabi_ddiv+0x472>
    246c:	0436      	lsls	r6, r6, #16
    246e:	433e      	orrs	r6, r7
    2470:	465f      	mov	r7, fp
    2472:	464a      	mov	r2, r9
    2474:	0c39      	lsrs	r1, r7, #16
    2476:	4689      	mov	r9, r1
    2478:	1a9b      	subs	r3, r3, r2
    247a:	4659      	mov	r1, fp
    247c:	0432      	lsls	r2, r6, #16
    247e:	0c17      	lsrs	r7, r2, #16
    2480:	040a      	lsls	r2, r1, #16
    2482:	4649      	mov	r1, r9
    2484:	4379      	muls	r1, r7
    2486:	0c12      	lsrs	r2, r2, #16
    2488:	9203      	str	r2, [sp, #12]
    248a:	468c      	mov	ip, r1
    248c:	9903      	ldr	r1, [sp, #12]
    248e:	0c30      	lsrs	r0, r6, #16
    2490:	437a      	muls	r2, r7
    2492:	4341      	muls	r1, r0
    2494:	464f      	mov	r7, r9
    2496:	4378      	muls	r0, r7
    2498:	448c      	add	ip, r1
    249a:	0c17      	lsrs	r7, r2, #16
    249c:	4467      	add	r7, ip
    249e:	42b9      	cmp	r1, r7
    24a0:	d902      	bls.n	24a8 <__aeabi_ddiv+0x1e4>
    24a2:	2180      	movs	r1, #128	; 0x80
    24a4:	0249      	lsls	r1, r1, #9
    24a6:	1840      	adds	r0, r0, r1
    24a8:	0c39      	lsrs	r1, r7, #16
    24aa:	0412      	lsls	r2, r2, #16
    24ac:	1840      	adds	r0, r0, r1
    24ae:	043f      	lsls	r7, r7, #16
    24b0:	0c11      	lsrs	r1, r2, #16
    24b2:	187f      	adds	r7, r7, r1
    24b4:	4283      	cmp	r3, r0
    24b6:	d200      	bcs.n	24ba <__aeabi_ddiv+0x1f6>
    24b8:	e127      	b.n	270a <__aeabi_ddiv+0x446>
    24ba:	d100      	bne.n	24be <__aeabi_ddiv+0x1fa>
    24bc:	e141      	b.n	2742 <__aeabi_ddiv+0x47e>
    24be:	9902      	ldr	r1, [sp, #8]
    24c0:	1a1b      	subs	r3, r3, r0
    24c2:	1bcf      	subs	r7, r1, r7
    24c4:	42b9      	cmp	r1, r7
    24c6:	4180      	sbcs	r0, r0
    24c8:	4241      	negs	r1, r0
    24ca:	1a5a      	subs	r2, r3, r1
    24cc:	4690      	mov	r8, r2
    24ce:	42a2      	cmp	r2, r4
    24d0:	d100      	bne.n	24d4 <__aeabi_ddiv+0x210>
    24d2:	e15f      	b.n	2794 <__aeabi_ddiv+0x4d0>
    24d4:	1c10      	adds	r0, r2, #0
    24d6:	1c29      	adds	r1, r5, #0
    24d8:	f7ff fe06 	bl	20e8 <__aeabi_uidiv>
    24dc:	9b00      	ldr	r3, [sp, #0]
    24de:	9002      	str	r0, [sp, #8]
    24e0:	4343      	muls	r3, r0
    24e2:	1c29      	adds	r1, r5, #0
    24e4:	4640      	mov	r0, r8
    24e6:	469a      	mov	sl, r3
    24e8:	f7ff fe42 	bl	2170 <__aeabi_uidivmod>
    24ec:	0c38      	lsrs	r0, r7, #16
    24ee:	0409      	lsls	r1, r1, #16
    24f0:	4301      	orrs	r1, r0
    24f2:	458a      	cmp	sl, r1
    24f4:	d90a      	bls.n	250c <__aeabi_ddiv+0x248>
    24f6:	9a02      	ldr	r2, [sp, #8]
    24f8:	1909      	adds	r1, r1, r4
    24fa:	3a01      	subs	r2, #1
    24fc:	9202      	str	r2, [sp, #8]
    24fe:	428c      	cmp	r4, r1
    2500:	d804      	bhi.n	250c <__aeabi_ddiv+0x248>
    2502:	458a      	cmp	sl, r1
    2504:	d902      	bls.n	250c <__aeabi_ddiv+0x248>
    2506:	3a01      	subs	r2, #1
    2508:	9202      	str	r2, [sp, #8]
    250a:	1909      	adds	r1, r1, r4
    250c:	4653      	mov	r3, sl
    250e:	1ac8      	subs	r0, r1, r3
    2510:	1c29      	adds	r1, r5, #0
    2512:	9005      	str	r0, [sp, #20]
    2514:	f7ff fde8 	bl	20e8 <__aeabi_uidiv>
    2518:	9a00      	ldr	r2, [sp, #0]
    251a:	1c29      	adds	r1, r5, #0
    251c:	4342      	muls	r2, r0
    251e:	4680      	mov	r8, r0
    2520:	9805      	ldr	r0, [sp, #20]
    2522:	4692      	mov	sl, r2
    2524:	f7ff fe24 	bl	2170 <__aeabi_uidivmod>
    2528:	043f      	lsls	r7, r7, #16
    252a:	040d      	lsls	r5, r1, #16
    252c:	0c3a      	lsrs	r2, r7, #16
    252e:	432a      	orrs	r2, r5
    2530:	4592      	cmp	sl, r2
    2532:	d909      	bls.n	2548 <__aeabi_ddiv+0x284>
    2534:	2101      	movs	r1, #1
    2536:	424b      	negs	r3, r1
    2538:	1912      	adds	r2, r2, r4
    253a:	4498      	add	r8, r3
    253c:	4294      	cmp	r4, r2
    253e:	d803      	bhi.n	2548 <__aeabi_ddiv+0x284>
    2540:	4592      	cmp	sl, r2
    2542:	d901      	bls.n	2548 <__aeabi_ddiv+0x284>
    2544:	4498      	add	r8, r3
    2546:	1912      	adds	r2, r2, r4
    2548:	9d02      	ldr	r5, [sp, #8]
    254a:	4643      	mov	r3, r8
    254c:	042f      	lsls	r7, r5, #16
    254e:	431f      	orrs	r7, r3
    2550:	4650      	mov	r0, sl
    2552:	1a11      	subs	r1, r2, r0
    2554:	0438      	lsls	r0, r7, #16
    2556:	0c03      	lsrs	r3, r0, #16
    2558:	464d      	mov	r5, r9
    255a:	435d      	muls	r5, r3
    255c:	9803      	ldr	r0, [sp, #12]
    255e:	46ac      	mov	ip, r5
    2560:	9d03      	ldr	r5, [sp, #12]
    2562:	0c3a      	lsrs	r2, r7, #16
    2564:	4358      	muls	r0, r3
    2566:	4355      	muls	r5, r2
    2568:	464b      	mov	r3, r9
    256a:	435a      	muls	r2, r3
    256c:	44ac      	add	ip, r5
    256e:	0c03      	lsrs	r3, r0, #16
    2570:	4463      	add	r3, ip
    2572:	429d      	cmp	r5, r3
    2574:	d902      	bls.n	257c <__aeabi_ddiv+0x2b8>
    2576:	2580      	movs	r5, #128	; 0x80
    2578:	026d      	lsls	r5, r5, #9
    257a:	1952      	adds	r2, r2, r5
    257c:	0c1d      	lsrs	r5, r3, #16
    257e:	0400      	lsls	r0, r0, #16
    2580:	1952      	adds	r2, r2, r5
    2582:	041b      	lsls	r3, r3, #16
    2584:	0c05      	lsrs	r5, r0, #16
    2586:	195b      	adds	r3, r3, r5
    2588:	4291      	cmp	r1, r2
    258a:	d200      	bcs.n	258e <__aeabi_ddiv+0x2ca>
    258c:	e0e6      	b.n	275c <__aeabi_ddiv+0x498>
    258e:	d100      	bne.n	2592 <__aeabi_ddiv+0x2ce>
    2590:	e13d      	b.n	280e <__aeabi_ddiv+0x54a>
    2592:	2201      	movs	r2, #1
    2594:	4317      	orrs	r7, r2
    2596:	e05a      	b.n	264e <__aeabi_ddiv+0x38a>
    2598:	0089      	lsls	r1, r1, #2
    259a:	4823      	ldr	r0, [pc, #140]	; (2628 <__aeabi_ddiv+0x364>)
    259c:	468c      	mov	ip, r1
    259e:	4460      	add	r0, ip
    25a0:	6801      	ldr	r1, [r0, #0]
    25a2:	468f      	mov	pc, r1
    25a4:	9b01      	ldr	r3, [sp, #4]
    25a6:	4a1e      	ldr	r2, [pc, #120]	; (2620 <__aeabi_ddiv+0x35c>)
    25a8:	2600      	movs	r6, #0
    25aa:	2700      	movs	r7, #0
    25ac:	2000      	movs	r0, #0
    25ae:	2100      	movs	r1, #0
    25b0:	1c38      	adds	r0, r7, #0
    25b2:	0d0f      	lsrs	r7, r1, #20
    25b4:	053c      	lsls	r4, r7, #20
    25b6:	4d1d      	ldr	r5, [pc, #116]	; (262c <__aeabi_ddiv+0x368>)
    25b8:	4334      	orrs	r4, r6
    25ba:	0512      	lsls	r2, r2, #20
    25bc:	4025      	ands	r5, r4
    25be:	4315      	orrs	r5, r2
    25c0:	006e      	lsls	r6, r5, #1
    25c2:	07db      	lsls	r3, r3, #31
    25c4:	0871      	lsrs	r1, r6, #1
    25c6:	4319      	orrs	r1, r3
    25c8:	b007      	add	sp, #28
    25ca:	bc3c      	pop	{r2, r3, r4, r5}
    25cc:	4690      	mov	r8, r2
    25ce:	4699      	mov	r9, r3
    25d0:	46a2      	mov	sl, r4
    25d2:	46ab      	mov	fp, r5
    25d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    25d6:	1c21      	adds	r1, r4, #0
    25d8:	2003      	movs	r0, #3
    25da:	4329      	orrs	r1, r5
    25dc:	9002      	str	r0, [sp, #8]
    25de:	d000      	beq.n	25e2 <__aeabi_ddiv+0x31e>
    25e0:	e6f0      	b.n	23c4 <__aeabi_ddiv+0x100>
    25e2:	2302      	movs	r3, #2
    25e4:	2400      	movs	r4, #0
    25e6:	2500      	movs	r5, #0
    25e8:	9302      	str	r3, [sp, #8]
    25ea:	e6eb      	b.n	23c4 <__aeabi_ddiv+0x100>
    25ec:	200c      	movs	r0, #12
    25ee:	2103      	movs	r1, #3
    25f0:	4682      	mov	sl, r0
    25f2:	9100      	str	r1, [sp, #0]
    25f4:	e6a7      	b.n	2346 <__aeabi_ddiv+0x82>
    25f6:	2704      	movs	r7, #4
    25f8:	2301      	movs	r3, #1
    25fa:	46ba      	mov	sl, r7
    25fc:	2600      	movs	r6, #0
    25fe:	2700      	movs	r7, #0
    2600:	9300      	str	r3, [sp, #0]
    2602:	e6a0      	b.n	2346 <__aeabi_ddiv+0x82>
    2604:	2101      	movs	r1, #1
    2606:	2400      	movs	r4, #0
    2608:	2500      	movs	r5, #0
    260a:	9102      	str	r1, [sp, #8]
    260c:	e6da      	b.n	23c4 <__aeabi_ddiv+0x100>
    260e:	2701      	movs	r7, #1
    2610:	2300      	movs	r3, #0
    2612:	4e07      	ldr	r6, [pc, #28]	; (2630 <__aeabi_ddiv+0x36c>)
    2614:	427f      	negs	r7, r7
    2616:	4a02      	ldr	r2, [pc, #8]	; (2620 <__aeabi_ddiv+0x35c>)
    2618:	e7c8      	b.n	25ac <__aeabi_ddiv+0x2e8>
    261a:	46c0      	nop			; (mov r8, r8)
    261c:	fffffc0d 	.word	0xfffffc0d
    2620:	000007ff 	.word	0x000007ff
    2624:	fffffc01 	.word	0xfffffc01
    2628:	00008720 	.word	0x00008720
    262c:	800fffff 	.word	0x800fffff
    2630:	000fffff 	.word	0x000fffff
    2634:	1c2f      	adds	r7, r5, #0
    2636:	465a      	mov	r2, fp
    2638:	9d02      	ldr	r5, [sp, #8]
    263a:	1c26      	adds	r6, r4, #0
    263c:	9201      	str	r2, [sp, #4]
    263e:	2d02      	cmp	r5, #2
    2640:	d0b0      	beq.n	25a4 <__aeabi_ddiv+0x2e0>
    2642:	2d03      	cmp	r5, #3
    2644:	d100      	bne.n	2648 <__aeabi_ddiv+0x384>
    2646:	e101      	b.n	284c <__aeabi_ddiv+0x588>
    2648:	2d01      	cmp	r5, #1
    264a:	d100      	bne.n	264e <__aeabi_ddiv+0x38a>
    264c:	e09c      	b.n	2788 <__aeabi_ddiv+0x4c4>
    264e:	9b04      	ldr	r3, [sp, #16]
    2650:	4882      	ldr	r0, [pc, #520]	; (285c <__aeabi_ddiv+0x598>)
    2652:	181a      	adds	r2, r3, r0
    2654:	2a00      	cmp	r2, #0
    2656:	dc00      	bgt.n	265a <__aeabi_ddiv+0x396>
    2658:	e08c      	b.n	2774 <__aeabi_ddiv+0x4b0>
    265a:	240f      	movs	r4, #15
    265c:	403c      	ands	r4, r7
    265e:	2c04      	cmp	r4, #4
    2660:	d005      	beq.n	266e <__aeabi_ddiv+0x3aa>
    2662:	1d3b      	adds	r3, r7, #4
    2664:	42bb      	cmp	r3, r7
    2666:	41bf      	sbcs	r7, r7
    2668:	427d      	negs	r5, r7
    266a:	1976      	adds	r6, r6, r5
    266c:	1c1f      	adds	r7, r3, #0
    266e:	01f1      	lsls	r1, r6, #7
    2670:	d505      	bpl.n	267e <__aeabi_ddiv+0x3ba>
    2672:	4a7b      	ldr	r2, [pc, #492]	; (2860 <__aeabi_ddiv+0x59c>)
    2674:	9904      	ldr	r1, [sp, #16]
    2676:	2080      	movs	r0, #128	; 0x80
    2678:	00c4      	lsls	r4, r0, #3
    267a:	4016      	ands	r6, r2
    267c:	190a      	adds	r2, r1, r4
    267e:	4b79      	ldr	r3, [pc, #484]	; (2864 <__aeabi_ddiv+0x5a0>)
    2680:	429a      	cmp	r2, r3
    2682:	dd00      	ble.n	2686 <__aeabi_ddiv+0x3c2>
    2684:	e78e      	b.n	25a4 <__aeabi_ddiv+0x2e0>
    2686:	0775      	lsls	r5, r6, #29
    2688:	08ff      	lsrs	r7, r7, #3
    268a:	0276      	lsls	r6, r6, #9
    268c:	0551      	lsls	r1, r2, #21
    268e:	432f      	orrs	r7, r5
    2690:	0b36      	lsrs	r6, r6, #12
    2692:	0d4a      	lsrs	r2, r1, #21
    2694:	9b01      	ldr	r3, [sp, #4]
    2696:	e789      	b.n	25ac <__aeabi_ddiv+0x2e8>
    2698:	2200      	movs	r2, #0
    269a:	2600      	movs	r6, #0
    269c:	2700      	movs	r7, #0
    269e:	e785      	b.n	25ac <__aeabi_ddiv+0x2e8>
    26a0:	2080      	movs	r0, #128	; 0x80
    26a2:	0301      	lsls	r1, r0, #12
    26a4:	420e      	tst	r6, r1
    26a6:	d016      	beq.n	26d6 <__aeabi_ddiv+0x412>
    26a8:	420c      	tst	r4, r1
    26aa:	d114      	bne.n	26d6 <__aeabi_ddiv+0x412>
    26ac:	430c      	orrs	r4, r1
    26ae:	0326      	lsls	r6, r4, #12
    26b0:	0b36      	lsrs	r6, r6, #12
    26b2:	465b      	mov	r3, fp
    26b4:	1c2f      	adds	r7, r5, #0
    26b6:	4a6c      	ldr	r2, [pc, #432]	; (2868 <__aeabi_ddiv+0x5a4>)
    26b8:	e778      	b.n	25ac <__aeabi_ddiv+0x2e8>
    26ba:	464c      	mov	r4, r9
    26bc:	9401      	str	r4, [sp, #4]
    26be:	9d00      	ldr	r5, [sp, #0]
    26c0:	e7bd      	b.n	263e <__aeabi_ddiv+0x37a>
    26c2:	42a6      	cmp	r6, r4
    26c4:	d043      	beq.n	274e <__aeabi_ddiv+0x48a>
    26c6:	9804      	ldr	r0, [sp, #16]
    26c8:	46b8      	mov	r8, r7
    26ca:	3801      	subs	r0, #1
    26cc:	2700      	movs	r7, #0
    26ce:	9004      	str	r0, [sp, #16]
    26d0:	46b1      	mov	r9, r6
    26d2:	9702      	str	r7, [sp, #8]
    26d4:	e68e      	b.n	23f4 <__aeabi_ddiv+0x130>
    26d6:	430e      	orrs	r6, r1
    26d8:	0333      	lsls	r3, r6, #12
    26da:	0b1e      	lsrs	r6, r3, #12
    26dc:	4a62      	ldr	r2, [pc, #392]	; (2868 <__aeabi_ddiv+0x5a4>)
    26de:	464b      	mov	r3, r9
    26e0:	e764      	b.n	25ac <__aeabi_ddiv+0x2e8>
    26e2:	1c04      	adds	r4, r0, #0
    26e4:	3c28      	subs	r4, #40	; 0x28
    26e6:	40a5      	lsls	r5, r4
    26e8:	1c2c      	adds	r4, r5, #0
    26ea:	2500      	movs	r5, #0
    26ec:	e64b      	b.n	2386 <__aeabi_ddiv+0xc2>
    26ee:	f001 f83f 	bl	3770 <__clzsi2>
    26f2:	3020      	adds	r0, #32
    26f4:	e63b      	b.n	236e <__aeabi_ddiv+0xaa>
    26f6:	1c06      	adds	r6, r0, #0
    26f8:	3e28      	subs	r6, #40	; 0x28
    26fa:	40b7      	lsls	r7, r6
    26fc:	1c3e      	adds	r6, r7, #0
    26fe:	2700      	movs	r7, #0
    2700:	e609      	b.n	2316 <__aeabi_ddiv+0x52>
    2702:	f001 f835 	bl	3770 <__clzsi2>
    2706:	3020      	adds	r0, #32
    2708:	e5f9      	b.n	22fe <__aeabi_ddiv+0x3a>
    270a:	9a02      	ldr	r2, [sp, #8]
    270c:	3e01      	subs	r6, #1
    270e:	1c11      	adds	r1, r2, #0
    2710:	4459      	add	r1, fp
    2712:	4559      	cmp	r1, fp
    2714:	4192      	sbcs	r2, r2
    2716:	4252      	negs	r2, r2
    2718:	1912      	adds	r2, r2, r4
    271a:	18d3      	adds	r3, r2, r3
    271c:	429c      	cmp	r4, r3
    271e:	d204      	bcs.n	272a <__aeabi_ddiv+0x466>
    2720:	4298      	cmp	r0, r3
    2722:	d86b      	bhi.n	27fc <__aeabi_ddiv+0x538>
    2724:	d016      	beq.n	2754 <__aeabi_ddiv+0x490>
    2726:	1a1b      	subs	r3, r3, r0
    2728:	e6cb      	b.n	24c2 <__aeabi_ddiv+0x1fe>
    272a:	42a3      	cmp	r3, r4
    272c:	d1fb      	bne.n	2726 <__aeabi_ddiv+0x462>
    272e:	458b      	cmp	fp, r1
    2730:	d9f6      	bls.n	2720 <__aeabi_ddiv+0x45c>
    2732:	1a23      	subs	r3, r4, r0
    2734:	e6c5      	b.n	24c2 <__aeabi_ddiv+0x1fe>
    2736:	4599      	cmp	r9, r3
    2738:	d800      	bhi.n	273c <__aeabi_ddiv+0x478>
    273a:	e697      	b.n	246c <__aeabi_ddiv+0x1a8>
    273c:	3f01      	subs	r7, #1
    273e:	191b      	adds	r3, r3, r4
    2740:	e694      	b.n	246c <__aeabi_ddiv+0x1a8>
    2742:	9a02      	ldr	r2, [sp, #8]
    2744:	42ba      	cmp	r2, r7
    2746:	d3e0      	bcc.n	270a <__aeabi_ddiv+0x446>
    2748:	9902      	ldr	r1, [sp, #8]
    274a:	2300      	movs	r3, #0
    274c:	e6b9      	b.n	24c2 <__aeabi_ddiv+0x1fe>
    274e:	42af      	cmp	r7, r5
    2750:	d9b9      	bls.n	26c6 <__aeabi_ddiv+0x402>
    2752:	e647      	b.n	23e4 <__aeabi_ddiv+0x120>
    2754:	428f      	cmp	r7, r1
    2756:	d851      	bhi.n	27fc <__aeabi_ddiv+0x538>
    2758:	2300      	movs	r3, #0
    275a:	e6b2      	b.n	24c2 <__aeabi_ddiv+0x1fe>
    275c:	1909      	adds	r1, r1, r4
    275e:	3f01      	subs	r7, #1
    2760:	4658      	mov	r0, fp
    2762:	428c      	cmp	r4, r1
    2764:	d919      	bls.n	279a <__aeabi_ddiv+0x4d6>
    2766:	4291      	cmp	r1, r2
    2768:	d000      	beq.n	276c <__aeabi_ddiv+0x4a8>
    276a:	e712      	b.n	2592 <__aeabi_ddiv+0x2ce>
    276c:	4298      	cmp	r0, r3
    276e:	d000      	beq.n	2772 <__aeabi_ddiv+0x4ae>
    2770:	e70f      	b.n	2592 <__aeabi_ddiv+0x2ce>
    2772:	e76c      	b.n	264e <__aeabi_ddiv+0x38a>
    2774:	4c3d      	ldr	r4, [pc, #244]	; (286c <__aeabi_ddiv+0x5a8>)
    2776:	9d04      	ldr	r5, [sp, #16]
    2778:	1b63      	subs	r3, r4, r5
    277a:	2b38      	cmp	r3, #56	; 0x38
    277c:	dd1c      	ble.n	27b8 <__aeabi_ddiv+0x4f4>
    277e:	9b01      	ldr	r3, [sp, #4]
    2780:	2200      	movs	r2, #0
    2782:	2600      	movs	r6, #0
    2784:	2700      	movs	r7, #0
    2786:	e711      	b.n	25ac <__aeabi_ddiv+0x2e8>
    2788:	9b01      	ldr	r3, [sp, #4]
    278a:	2200      	movs	r2, #0
    278c:	402b      	ands	r3, r5
    278e:	2600      	movs	r6, #0
    2790:	2700      	movs	r7, #0
    2792:	e70b      	b.n	25ac <__aeabi_ddiv+0x2e8>
    2794:	2701      	movs	r7, #1
    2796:	427f      	negs	r7, r7
    2798:	e759      	b.n	264e <__aeabi_ddiv+0x38a>
    279a:	428a      	cmp	r2, r1
    279c:	d803      	bhi.n	27a6 <__aeabi_ddiv+0x4e2>
    279e:	d000      	beq.n	27a2 <__aeabi_ddiv+0x4de>
    27a0:	e6f7      	b.n	2592 <__aeabi_ddiv+0x2ce>
    27a2:	4298      	cmp	r0, r3
    27a4:	d2e2      	bcs.n	276c <__aeabi_ddiv+0x4a8>
    27a6:	465d      	mov	r5, fp
    27a8:	0068      	lsls	r0, r5, #1
    27aa:	4558      	cmp	r0, fp
    27ac:	41ad      	sbcs	r5, r5
    27ae:	426d      	negs	r5, r5
    27b0:	192c      	adds	r4, r5, r4
    27b2:	3f01      	subs	r7, #1
    27b4:	1909      	adds	r1, r1, r4
    27b6:	e7d6      	b.n	2766 <__aeabi_ddiv+0x4a2>
    27b8:	2b1f      	cmp	r3, #31
    27ba:	dc34      	bgt.n	2826 <__aeabi_ddiv+0x562>
    27bc:	9c04      	ldr	r4, [sp, #16]
    27be:	4a2c      	ldr	r2, [pc, #176]	; (2870 <__aeabi_ddiv+0x5ac>)
    27c0:	1c38      	adds	r0, r7, #0
    27c2:	18a5      	adds	r5, r4, r2
    27c4:	1c31      	adds	r1, r6, #0
    27c6:	40af      	lsls	r7, r5
    27c8:	40d8      	lsrs	r0, r3
    27ca:	40a9      	lsls	r1, r5
    27cc:	1c3c      	adds	r4, r7, #0
    27ce:	4301      	orrs	r1, r0
    27d0:	1e67      	subs	r7, r4, #1
    27d2:	41bc      	sbcs	r4, r7
    27d4:	1c0f      	adds	r7, r1, #0
    27d6:	4327      	orrs	r7, r4
    27d8:	40de      	lsrs	r6, r3
    27da:	230f      	movs	r3, #15
    27dc:	403b      	ands	r3, r7
    27de:	2b04      	cmp	r3, #4
    27e0:	d005      	beq.n	27ee <__aeabi_ddiv+0x52a>
    27e2:	1d3a      	adds	r2, r7, #4
    27e4:	42ba      	cmp	r2, r7
    27e6:	41bf      	sbcs	r7, r7
    27e8:	427d      	negs	r5, r7
    27ea:	1976      	adds	r6, r6, r5
    27ec:	1c17      	adds	r7, r2, #0
    27ee:	0232      	lsls	r2, r6, #8
    27f0:	d511      	bpl.n	2816 <__aeabi_ddiv+0x552>
    27f2:	9b01      	ldr	r3, [sp, #4]
    27f4:	2201      	movs	r2, #1
    27f6:	2600      	movs	r6, #0
    27f8:	2700      	movs	r7, #0
    27fa:	e6d7      	b.n	25ac <__aeabi_ddiv+0x2e8>
    27fc:	4459      	add	r1, fp
    27fe:	4559      	cmp	r1, fp
    2800:	4192      	sbcs	r2, r2
    2802:	4252      	negs	r2, r2
    2804:	1912      	adds	r2, r2, r4
    2806:	18d3      	adds	r3, r2, r3
    2808:	3e01      	subs	r6, #1
    280a:	1a1b      	subs	r3, r3, r0
    280c:	e659      	b.n	24c2 <__aeabi_ddiv+0x1fe>
    280e:	2b00      	cmp	r3, #0
    2810:	d1a4      	bne.n	275c <__aeabi_ddiv+0x498>
    2812:	2000      	movs	r0, #0
    2814:	e7aa      	b.n	276c <__aeabi_ddiv+0x4a8>
    2816:	0770      	lsls	r0, r6, #29
    2818:	08ff      	lsrs	r7, r7, #3
    281a:	0271      	lsls	r1, r6, #9
    281c:	4307      	orrs	r7, r0
    281e:	0b0e      	lsrs	r6, r1, #12
    2820:	9b01      	ldr	r3, [sp, #4]
    2822:	2200      	movs	r2, #0
    2824:	e6c2      	b.n	25ac <__aeabi_ddiv+0x2e8>
    2826:	4913      	ldr	r1, [pc, #76]	; (2874 <__aeabi_ddiv+0x5b0>)
    2828:	9c04      	ldr	r4, [sp, #16]
    282a:	1c30      	adds	r0, r6, #0
    282c:	1b0a      	subs	r2, r1, r4
    282e:	40d0      	lsrs	r0, r2
    2830:	1c05      	adds	r5, r0, #0
    2832:	2b20      	cmp	r3, #32
    2834:	d008      	beq.n	2848 <__aeabi_ddiv+0x584>
    2836:	4b10      	ldr	r3, [pc, #64]	; (2878 <__aeabi_ddiv+0x5b4>)
    2838:	18e1      	adds	r1, r4, r3
    283a:	408e      	lsls	r6, r1
    283c:	4337      	orrs	r7, r6
    283e:	1e7b      	subs	r3, r7, #1
    2840:	419f      	sbcs	r7, r3
    2842:	432f      	orrs	r7, r5
    2844:	2600      	movs	r6, #0
    2846:	e7c8      	b.n	27da <__aeabi_ddiv+0x516>
    2848:	2600      	movs	r6, #0
    284a:	e7f7      	b.n	283c <__aeabi_ddiv+0x578>
    284c:	2280      	movs	r2, #128	; 0x80
    284e:	0310      	lsls	r0, r2, #12
    2850:	4306      	orrs	r6, r0
    2852:	0331      	lsls	r1, r6, #12
    2854:	0b0e      	lsrs	r6, r1, #12
    2856:	9b01      	ldr	r3, [sp, #4]
    2858:	4a03      	ldr	r2, [pc, #12]	; (2868 <__aeabi_ddiv+0x5a4>)
    285a:	e6a7      	b.n	25ac <__aeabi_ddiv+0x2e8>
    285c:	000003ff 	.word	0x000003ff
    2860:	feffffff 	.word	0xfeffffff
    2864:	000007fe 	.word	0x000007fe
    2868:	000007ff 	.word	0x000007ff
    286c:	fffffc02 	.word	0xfffffc02
    2870:	0000041e 	.word	0x0000041e
    2874:	fffffbe2 	.word	0xfffffbe2
    2878:	0000043e 	.word	0x0000043e

0000287c <__eqdf2>:
    287c:	b5f0      	push	{r4, r5, r6, r7, lr}
    287e:	4694      	mov	ip, r2
    2880:	4647      	mov	r7, r8
    2882:	031a      	lsls	r2, r3, #12
    2884:	1c06      	adds	r6, r0, #0
    2886:	0058      	lsls	r0, r3, #1
    2888:	b480      	push	{r7}
    288a:	0b17      	lsrs	r7, r2, #12
    288c:	0d42      	lsrs	r2, r0, #21
    288e:	4819      	ldr	r0, [pc, #100]	; (28f4 <__eqdf2+0x78>)
    2890:	030d      	lsls	r5, r1, #12
    2892:	004c      	lsls	r4, r1, #1
    2894:	0fdb      	lsrs	r3, r3, #31
    2896:	0b2d      	lsrs	r5, r5, #12
    2898:	0d64      	lsrs	r4, r4, #21
    289a:	0fc9      	lsrs	r1, r1, #31
    289c:	4698      	mov	r8, r3
    289e:	4284      	cmp	r4, r0
    28a0:	d008      	beq.n	28b4 <__eqdf2+0x38>
    28a2:	4814      	ldr	r0, [pc, #80]	; (28f4 <__eqdf2+0x78>)
    28a4:	4282      	cmp	r2, r0
    28a6:	d00d      	beq.n	28c4 <__eqdf2+0x48>
    28a8:	2001      	movs	r0, #1
    28aa:	4294      	cmp	r4, r2
    28ac:	d012      	beq.n	28d4 <__eqdf2+0x58>
    28ae:	bc04      	pop	{r2}
    28b0:	4690      	mov	r8, r2
    28b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    28b4:	1c2b      	adds	r3, r5, #0
    28b6:	4333      	orrs	r3, r6
    28b8:	2001      	movs	r0, #1
    28ba:	2b00      	cmp	r3, #0
    28bc:	d1f7      	bne.n	28ae <__eqdf2+0x32>
    28be:	480d      	ldr	r0, [pc, #52]	; (28f4 <__eqdf2+0x78>)
    28c0:	4282      	cmp	r2, r0
    28c2:	d1f1      	bne.n	28a8 <__eqdf2+0x2c>
    28c4:	4663      	mov	r3, ip
    28c6:	433b      	orrs	r3, r7
    28c8:	2001      	movs	r0, #1
    28ca:	2b00      	cmp	r3, #0
    28cc:	d1ef      	bne.n	28ae <__eqdf2+0x32>
    28ce:	2001      	movs	r0, #1
    28d0:	4294      	cmp	r4, r2
    28d2:	d1ec      	bne.n	28ae <__eqdf2+0x32>
    28d4:	42bd      	cmp	r5, r7
    28d6:	d1ea      	bne.n	28ae <__eqdf2+0x32>
    28d8:	4566      	cmp	r6, ip
    28da:	d1e8      	bne.n	28ae <__eqdf2+0x32>
    28dc:	4541      	cmp	r1, r8
    28de:	d006      	beq.n	28ee <__eqdf2+0x72>
    28e0:	2c00      	cmp	r4, #0
    28e2:	d1e4      	bne.n	28ae <__eqdf2+0x32>
    28e4:	1c28      	adds	r0, r5, #0
    28e6:	4330      	orrs	r0, r6
    28e8:	1e45      	subs	r5, r0, #1
    28ea:	41a8      	sbcs	r0, r5
    28ec:	e7df      	b.n	28ae <__eqdf2+0x32>
    28ee:	2000      	movs	r0, #0
    28f0:	e7dd      	b.n	28ae <__eqdf2+0x32>
    28f2:	46c0      	nop			; (mov r8, r8)
    28f4:	000007ff 	.word	0x000007ff

000028f8 <__gedf2>:
    28f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    28fa:	4657      	mov	r7, sl
    28fc:	464e      	mov	r6, r9
    28fe:	4645      	mov	r5, r8
    2900:	b4e0      	push	{r5, r6, r7}
    2902:	1c04      	adds	r4, r0, #0
    2904:	004e      	lsls	r6, r1, #1
    2906:	0308      	lsls	r0, r1, #12
    2908:	0fc9      	lsrs	r1, r1, #31
    290a:	468a      	mov	sl, r1
    290c:	1c17      	adds	r7, r2, #0
    290e:	0059      	lsls	r1, r3, #1
    2910:	031a      	lsls	r2, r3, #12
    2912:	0b05      	lsrs	r5, r0, #12
    2914:	0d70      	lsrs	r0, r6, #21
    2916:	0b16      	lsrs	r6, r2, #12
    2918:	0d4a      	lsrs	r2, r1, #21
    291a:	4930      	ldr	r1, [pc, #192]	; (29dc <__gedf2+0xe4>)
    291c:	0fdb      	lsrs	r3, r3, #31
    291e:	469c      	mov	ip, r3
    2920:	4288      	cmp	r0, r1
    2922:	d032      	beq.n	298a <__gedf2+0x92>
    2924:	492d      	ldr	r1, [pc, #180]	; (29dc <__gedf2+0xe4>)
    2926:	428a      	cmp	r2, r1
    2928:	d035      	beq.n	2996 <__gedf2+0x9e>
    292a:	2800      	cmp	r0, #0
    292c:	d10f      	bne.n	294e <__gedf2+0x56>
    292e:	1c29      	adds	r1, r5, #0
    2930:	4321      	orrs	r1, r4
    2932:	424b      	negs	r3, r1
    2934:	414b      	adcs	r3, r1
    2936:	4698      	mov	r8, r3
    2938:	2a00      	cmp	r2, #0
    293a:	d00b      	beq.n	2954 <__gedf2+0x5c>
    293c:	2b00      	cmp	r3, #0
    293e:	d11a      	bne.n	2976 <__gedf2+0x7e>
    2940:	45e2      	cmp	sl, ip
    2942:	d02c      	beq.n	299e <__gedf2+0xa6>
    2944:	4655      	mov	r5, sl
    2946:	2d00      	cmp	r5, #0
    2948:	d118      	bne.n	297c <__gedf2+0x84>
    294a:	2001      	movs	r0, #1
    294c:	e018      	b.n	2980 <__gedf2+0x88>
    294e:	2a00      	cmp	r2, #0
    2950:	d1f6      	bne.n	2940 <__gedf2+0x48>
    2952:	4690      	mov	r8, r2
    2954:	1c31      	adds	r1, r6, #0
    2956:	4339      	orrs	r1, r7
    2958:	424b      	negs	r3, r1
    295a:	414b      	adcs	r3, r1
    295c:	4641      	mov	r1, r8
    295e:	2900      	cmp	r1, #0
    2960:	d106      	bne.n	2970 <__gedf2+0x78>
    2962:	2b00      	cmp	r3, #0
    2964:	d0ec      	beq.n	2940 <__gedf2+0x48>
    2966:	4656      	mov	r6, sl
    2968:	2001      	movs	r0, #1
    296a:	2e00      	cmp	r6, #0
    296c:	d008      	beq.n	2980 <__gedf2+0x88>
    296e:	e005      	b.n	297c <__gedf2+0x84>
    2970:	2000      	movs	r0, #0
    2972:	2b00      	cmp	r3, #0
    2974:	d104      	bne.n	2980 <__gedf2+0x88>
    2976:	4667      	mov	r7, ip
    2978:	2f00      	cmp	r7, #0
    297a:	d1e6      	bne.n	294a <__gedf2+0x52>
    297c:	2301      	movs	r3, #1
    297e:	4258      	negs	r0, r3
    2980:	bc1c      	pop	{r2, r3, r4}
    2982:	4690      	mov	r8, r2
    2984:	4699      	mov	r9, r3
    2986:	46a2      	mov	sl, r4
    2988:	bdf0      	pop	{r4, r5, r6, r7, pc}
    298a:	1c2b      	adds	r3, r5, #0
    298c:	4323      	orrs	r3, r4
    298e:	d0c9      	beq.n	2924 <__gedf2+0x2c>
    2990:	2102      	movs	r1, #2
    2992:	4248      	negs	r0, r1
    2994:	e7f4      	b.n	2980 <__gedf2+0x88>
    2996:	1c33      	adds	r3, r6, #0
    2998:	433b      	orrs	r3, r7
    299a:	d0c6      	beq.n	292a <__gedf2+0x32>
    299c:	e7f8      	b.n	2990 <__gedf2+0x98>
    299e:	4290      	cmp	r0, r2
    29a0:	dc05      	bgt.n	29ae <__gedf2+0xb6>
    29a2:	da09      	bge.n	29b8 <__gedf2+0xc0>
    29a4:	4652      	mov	r2, sl
    29a6:	2a00      	cmp	r2, #0
    29a8:	d0e8      	beq.n	297c <__gedf2+0x84>
    29aa:	2001      	movs	r0, #1
    29ac:	e7e8      	b.n	2980 <__gedf2+0x88>
    29ae:	4654      	mov	r4, sl
    29b0:	2c00      	cmp	r4, #0
    29b2:	d1e3      	bne.n	297c <__gedf2+0x84>
    29b4:	2001      	movs	r0, #1
    29b6:	e7e3      	b.n	2980 <__gedf2+0x88>
    29b8:	42b5      	cmp	r5, r6
    29ba:	d8c3      	bhi.n	2944 <__gedf2+0x4c>
    29bc:	d007      	beq.n	29ce <__gedf2+0xd6>
    29be:	2000      	movs	r0, #0
    29c0:	42b5      	cmp	r5, r6
    29c2:	d2dd      	bcs.n	2980 <__gedf2+0x88>
    29c4:	4650      	mov	r0, sl
    29c6:	2800      	cmp	r0, #0
    29c8:	d0d8      	beq.n	297c <__gedf2+0x84>
    29ca:	2001      	movs	r0, #1
    29cc:	e7d8      	b.n	2980 <__gedf2+0x88>
    29ce:	42bc      	cmp	r4, r7
    29d0:	d8b8      	bhi.n	2944 <__gedf2+0x4c>
    29d2:	2000      	movs	r0, #0
    29d4:	42bc      	cmp	r4, r7
    29d6:	d3f5      	bcc.n	29c4 <__gedf2+0xcc>
    29d8:	e7d2      	b.n	2980 <__gedf2+0x88>
    29da:	46c0      	nop			; (mov r8, r8)
    29dc:	000007ff 	.word	0x000007ff

000029e0 <__ledf2>:
    29e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    29e2:	4644      	mov	r4, r8
    29e4:	465f      	mov	r7, fp
    29e6:	4656      	mov	r6, sl
    29e8:	464d      	mov	r5, r9
    29ea:	b4f0      	push	{r4, r5, r6, r7}
    29ec:	4694      	mov	ip, r2
    29ee:	1c06      	adds	r6, r0, #0
    29f0:	031a      	lsls	r2, r3, #12
    29f2:	0058      	lsls	r0, r3, #1
    29f4:	0b17      	lsrs	r7, r2, #12
    29f6:	0d42      	lsrs	r2, r0, #21
    29f8:	482e      	ldr	r0, [pc, #184]	; (2ab4 <__ledf2+0xd4>)
    29fa:	030d      	lsls	r5, r1, #12
    29fc:	004c      	lsls	r4, r1, #1
    29fe:	0fdb      	lsrs	r3, r3, #31
    2a00:	0b2d      	lsrs	r5, r5, #12
    2a02:	0d64      	lsrs	r4, r4, #21
    2a04:	0fc9      	lsrs	r1, r1, #31
    2a06:	4698      	mov	r8, r3
    2a08:	4284      	cmp	r4, r0
    2a0a:	d033      	beq.n	2a74 <__ledf2+0x94>
    2a0c:	4829      	ldr	r0, [pc, #164]	; (2ab4 <__ledf2+0xd4>)
    2a0e:	4282      	cmp	r2, r0
    2a10:	d036      	beq.n	2a80 <__ledf2+0xa0>
    2a12:	2c00      	cmp	r4, #0
    2a14:	d019      	beq.n	2a4a <__ledf2+0x6a>
    2a16:	2a00      	cmp	r2, #0
    2a18:	d120      	bne.n	2a5c <__ledf2+0x7c>
    2a1a:	4693      	mov	fp, r2
    2a1c:	4663      	mov	r3, ip
    2a1e:	433b      	orrs	r3, r7
    2a20:	4258      	negs	r0, r3
    2a22:	4158      	adcs	r0, r3
    2a24:	465b      	mov	r3, fp
    2a26:	4682      	mov	sl, r0
    2a28:	2b00      	cmp	r3, #0
    2a2a:	d01d      	beq.n	2a68 <__ledf2+0x88>
    2a2c:	4651      	mov	r1, sl
    2a2e:	2000      	movs	r0, #0
    2a30:	2900      	cmp	r1, #0
    2a32:	d104      	bne.n	2a3e <__ledf2+0x5e>
    2a34:	4642      	mov	r2, r8
    2a36:	2a00      	cmp	r2, #0
    2a38:	d114      	bne.n	2a64 <__ledf2+0x84>
    2a3a:	2401      	movs	r4, #1
    2a3c:	4260      	negs	r0, r4
    2a3e:	bc3c      	pop	{r2, r3, r4, r5}
    2a40:	4690      	mov	r8, r2
    2a42:	4699      	mov	r9, r3
    2a44:	46a2      	mov	sl, r4
    2a46:	46ab      	mov	fp, r5
    2a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a4a:	1c2b      	adds	r3, r5, #0
    2a4c:	4333      	orrs	r3, r6
    2a4e:	4258      	negs	r0, r3
    2a50:	4143      	adcs	r3, r0
    2a52:	469b      	mov	fp, r3
    2a54:	2a00      	cmp	r2, #0
    2a56:	d0e1      	beq.n	2a1c <__ledf2+0x3c>
    2a58:	2b00      	cmp	r3, #0
    2a5a:	d1eb      	bne.n	2a34 <__ledf2+0x54>
    2a5c:	4541      	cmp	r1, r8
    2a5e:	d015      	beq.n	2a8c <__ledf2+0xac>
    2a60:	2900      	cmp	r1, #0
    2a62:	d1ea      	bne.n	2a3a <__ledf2+0x5a>
    2a64:	2001      	movs	r0, #1
    2a66:	e7ea      	b.n	2a3e <__ledf2+0x5e>
    2a68:	2800      	cmp	r0, #0
    2a6a:	d0f7      	beq.n	2a5c <__ledf2+0x7c>
    2a6c:	2001      	movs	r0, #1
    2a6e:	2900      	cmp	r1, #0
    2a70:	d0e5      	beq.n	2a3e <__ledf2+0x5e>
    2a72:	e7e2      	b.n	2a3a <__ledf2+0x5a>
    2a74:	1c2b      	adds	r3, r5, #0
    2a76:	4333      	orrs	r3, r6
    2a78:	2002      	movs	r0, #2
    2a7a:	2b00      	cmp	r3, #0
    2a7c:	d1df      	bne.n	2a3e <__ledf2+0x5e>
    2a7e:	e7c5      	b.n	2a0c <__ledf2+0x2c>
    2a80:	4663      	mov	r3, ip
    2a82:	433b      	orrs	r3, r7
    2a84:	2002      	movs	r0, #2
    2a86:	2b00      	cmp	r3, #0
    2a88:	d1d9      	bne.n	2a3e <__ledf2+0x5e>
    2a8a:	e7c2      	b.n	2a12 <__ledf2+0x32>
    2a8c:	4294      	cmp	r4, r2
    2a8e:	dce7      	bgt.n	2a60 <__ledf2+0x80>
    2a90:	db05      	blt.n	2a9e <__ledf2+0xbe>
    2a92:	42bd      	cmp	r5, r7
    2a94:	d8e4      	bhi.n	2a60 <__ledf2+0x80>
    2a96:	d006      	beq.n	2aa6 <__ledf2+0xc6>
    2a98:	2000      	movs	r0, #0
    2a9a:	42bd      	cmp	r5, r7
    2a9c:	d2cf      	bcs.n	2a3e <__ledf2+0x5e>
    2a9e:	2900      	cmp	r1, #0
    2aa0:	d0cb      	beq.n	2a3a <__ledf2+0x5a>
    2aa2:	2001      	movs	r0, #1
    2aa4:	e7cb      	b.n	2a3e <__ledf2+0x5e>
    2aa6:	4566      	cmp	r6, ip
    2aa8:	d8da      	bhi.n	2a60 <__ledf2+0x80>
    2aaa:	2000      	movs	r0, #0
    2aac:	4566      	cmp	r6, ip
    2aae:	d3f6      	bcc.n	2a9e <__ledf2+0xbe>
    2ab0:	e7c5      	b.n	2a3e <__ledf2+0x5e>
    2ab2:	46c0      	nop			; (mov r8, r8)
    2ab4:	000007ff 	.word	0x000007ff

00002ab8 <__aeabi_dmul>:
    2ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2aba:	4656      	mov	r6, sl
    2abc:	4644      	mov	r4, r8
    2abe:	465f      	mov	r7, fp
    2ac0:	464d      	mov	r5, r9
    2ac2:	b4f0      	push	{r4, r5, r6, r7}
    2ac4:	004f      	lsls	r7, r1, #1
    2ac6:	1c1d      	adds	r5, r3, #0
    2ac8:	030b      	lsls	r3, r1, #12
    2aca:	1c14      	adds	r4, r2, #0
    2acc:	0b1a      	lsrs	r2, r3, #12
    2ace:	0d7b      	lsrs	r3, r7, #21
    2ad0:	b087      	sub	sp, #28
    2ad2:	1c06      	adds	r6, r0, #0
    2ad4:	4692      	mov	sl, r2
    2ad6:	4698      	mov	r8, r3
    2ad8:	0fcf      	lsrs	r7, r1, #31
    2ada:	2b00      	cmp	r3, #0
    2adc:	d121      	bne.n	2b22 <__aeabi_dmul+0x6a>
    2ade:	4302      	orrs	r2, r0
    2ae0:	d100      	bne.n	2ae4 <__aeabi_dmul+0x2c>
    2ae2:	e149      	b.n	2d78 <__aeabi_dmul+0x2c0>
    2ae4:	4653      	mov	r3, sl
    2ae6:	2b00      	cmp	r3, #0
    2ae8:	d100      	bne.n	2aec <__aeabi_dmul+0x34>
    2aea:	e1e4      	b.n	2eb6 <__aeabi_dmul+0x3fe>
    2aec:	4650      	mov	r0, sl
    2aee:	f000 fe3f 	bl	3770 <__clzsi2>
    2af2:	1e03      	subs	r3, r0, #0
    2af4:	2b27      	cmp	r3, #39	; 0x27
    2af6:	dd00      	ble.n	2afa <__aeabi_dmul+0x42>
    2af8:	e1d8      	b.n	2eac <__aeabi_dmul+0x3f4>
    2afa:	3b08      	subs	r3, #8
    2afc:	4651      	mov	r1, sl
    2afe:	4099      	lsls	r1, r3
    2b00:	2228      	movs	r2, #40	; 0x28
    2b02:	4688      	mov	r8, r1
    2b04:	1a11      	subs	r1, r2, r0
    2b06:	1c32      	adds	r2, r6, #0
    2b08:	40ca      	lsrs	r2, r1
    2b0a:	4641      	mov	r1, r8
    2b0c:	430a      	orrs	r2, r1
    2b0e:	4692      	mov	sl, r2
    2b10:	409e      	lsls	r6, r3
    2b12:	4bd8      	ldr	r3, [pc, #864]	; (2e74 <__aeabi_dmul+0x3bc>)
    2b14:	2200      	movs	r2, #0
    2b16:	1a18      	subs	r0, r3, r0
    2b18:	2100      	movs	r1, #0
    2b1a:	4680      	mov	r8, r0
    2b1c:	4691      	mov	r9, r2
    2b1e:	9103      	str	r1, [sp, #12]
    2b20:	e011      	b.n	2b46 <__aeabi_dmul+0x8e>
    2b22:	48d5      	ldr	r0, [pc, #852]	; (2e78 <__aeabi_dmul+0x3c0>)
    2b24:	4283      	cmp	r3, r0
    2b26:	d03e      	beq.n	2ba6 <__aeabi_dmul+0xee>
    2b28:	2180      	movs	r1, #128	; 0x80
    2b2a:	4653      	mov	r3, sl
    2b2c:	034a      	lsls	r2, r1, #13
    2b2e:	431a      	orrs	r2, r3
    2b30:	00d0      	lsls	r0, r2, #3
    2b32:	0f71      	lsrs	r1, r6, #29
    2b34:	4308      	orrs	r0, r1
    2b36:	4ad1      	ldr	r2, [pc, #836]	; (2e7c <__aeabi_dmul+0x3c4>)
    2b38:	4682      	mov	sl, r0
    2b3a:	2300      	movs	r3, #0
    2b3c:	2000      	movs	r0, #0
    2b3e:	00f6      	lsls	r6, r6, #3
    2b40:	4490      	add	r8, r2
    2b42:	4699      	mov	r9, r3
    2b44:	9003      	str	r0, [sp, #12]
    2b46:	1c29      	adds	r1, r5, #0
    2b48:	1c20      	adds	r0, r4, #0
    2b4a:	1c25      	adds	r5, r4, #0
    2b4c:	004a      	lsls	r2, r1, #1
    2b4e:	030c      	lsls	r4, r1, #12
    2b50:	0fcb      	lsrs	r3, r1, #31
    2b52:	0b24      	lsrs	r4, r4, #12
    2b54:	0d52      	lsrs	r2, r2, #21
    2b56:	469b      	mov	fp, r3
    2b58:	d131      	bne.n	2bbe <__aeabi_dmul+0x106>
    2b5a:	1c21      	adds	r1, r4, #0
    2b5c:	4301      	orrs	r1, r0
    2b5e:	d100      	bne.n	2b62 <__aeabi_dmul+0xaa>
    2b60:	e112      	b.n	2d88 <__aeabi_dmul+0x2d0>
    2b62:	2c00      	cmp	r4, #0
    2b64:	d100      	bne.n	2b68 <__aeabi_dmul+0xb0>
    2b66:	e19d      	b.n	2ea4 <__aeabi_dmul+0x3ec>
    2b68:	1c20      	adds	r0, r4, #0
    2b6a:	f000 fe01 	bl	3770 <__clzsi2>
    2b6e:	2827      	cmp	r0, #39	; 0x27
    2b70:	dd00      	ble.n	2b74 <__aeabi_dmul+0xbc>
    2b72:	e191      	b.n	2e98 <__aeabi_dmul+0x3e0>
    2b74:	1c03      	adds	r3, r0, #0
    2b76:	2228      	movs	r2, #40	; 0x28
    2b78:	3b08      	subs	r3, #8
    2b7a:	1c29      	adds	r1, r5, #0
    2b7c:	1a12      	subs	r2, r2, r0
    2b7e:	409c      	lsls	r4, r3
    2b80:	40d1      	lsrs	r1, r2
    2b82:	430c      	orrs	r4, r1
    2b84:	409d      	lsls	r5, r3
    2b86:	4bbb      	ldr	r3, [pc, #748]	; (2e74 <__aeabi_dmul+0x3bc>)
    2b88:	4659      	mov	r1, fp
    2b8a:	1a1a      	subs	r2, r3, r0
    2b8c:	4079      	eors	r1, r7
    2b8e:	2000      	movs	r0, #0
    2b90:	464b      	mov	r3, r9
    2b92:	9101      	str	r1, [sp, #4]
    2b94:	4303      	orrs	r3, r0
    2b96:	2b0f      	cmp	r3, #15
    2b98:	d826      	bhi.n	2be8 <__aeabi_dmul+0x130>
    2b9a:	0099      	lsls	r1, r3, #2
    2b9c:	4bb8      	ldr	r3, [pc, #736]	; (2e80 <__aeabi_dmul+0x3c8>)
    2b9e:	468c      	mov	ip, r1
    2ba0:	4463      	add	r3, ip
    2ba2:	6819      	ldr	r1, [r3, #0]
    2ba4:	468f      	mov	pc, r1
    2ba6:	1c11      	adds	r1, r2, #0
    2ba8:	4331      	orrs	r1, r6
    2baa:	d000      	beq.n	2bae <__aeabi_dmul+0xf6>
    2bac:	e0df      	b.n	2d6e <__aeabi_dmul+0x2b6>
    2bae:	2608      	movs	r6, #8
    2bb0:	2000      	movs	r0, #0
    2bb2:	2102      	movs	r1, #2
    2bb4:	46b1      	mov	r9, r6
    2bb6:	4682      	mov	sl, r0
    2bb8:	2600      	movs	r6, #0
    2bba:	9103      	str	r1, [sp, #12]
    2bbc:	e7c3      	b.n	2b46 <__aeabi_dmul+0x8e>
    2bbe:	48ae      	ldr	r0, [pc, #696]	; (2e78 <__aeabi_dmul+0x3c0>)
    2bc0:	4282      	cmp	r2, r0
    2bc2:	d100      	bne.n	2bc6 <__aeabi_dmul+0x10e>
    2bc4:	e0c9      	b.n	2d5a <__aeabi_dmul+0x2a2>
    2bc6:	2180      	movs	r1, #128	; 0x80
    2bc8:	034b      	lsls	r3, r1, #13
    2bca:	431c      	orrs	r4, r3
    2bcc:	49ab      	ldr	r1, [pc, #684]	; (2e7c <__aeabi_dmul+0x3c4>)
    2bce:	0f68      	lsrs	r0, r5, #29
    2bd0:	00e4      	lsls	r4, r4, #3
    2bd2:	4304      	orrs	r4, r0
    2bd4:	00ed      	lsls	r5, r5, #3
    2bd6:	1852      	adds	r2, r2, r1
    2bd8:	2000      	movs	r0, #0
    2bda:	4659      	mov	r1, fp
    2bdc:	4079      	eors	r1, r7
    2bde:	464b      	mov	r3, r9
    2be0:	9101      	str	r1, [sp, #4]
    2be2:	4303      	orrs	r3, r0
    2be4:	2b0f      	cmp	r3, #15
    2be6:	d9d8      	bls.n	2b9a <__aeabi_dmul+0xe2>
    2be8:	4442      	add	r2, r8
    2bea:	0433      	lsls	r3, r6, #16
    2bec:	0429      	lsls	r1, r5, #16
    2bee:	9204      	str	r2, [sp, #16]
    2bf0:	0c1a      	lsrs	r2, r3, #16
    2bf2:	0c0f      	lsrs	r7, r1, #16
    2bf4:	1c10      	adds	r0, r2, #0
    2bf6:	4378      	muls	r0, r7
    2bf8:	0c36      	lsrs	r6, r6, #16
    2bfa:	1c33      	adds	r3, r6, #0
    2bfc:	4680      	mov	r8, r0
    2bfe:	0c2d      	lsrs	r5, r5, #16
    2c00:	437b      	muls	r3, r7
    2c02:	1c30      	adds	r0, r6, #0
    2c04:	4368      	muls	r0, r5
    2c06:	1c11      	adds	r1, r2, #0
    2c08:	4369      	muls	r1, r5
    2c0a:	469c      	mov	ip, r3
    2c0c:	4643      	mov	r3, r8
    2c0e:	4683      	mov	fp, r0
    2c10:	0c18      	lsrs	r0, r3, #16
    2c12:	1808      	adds	r0, r1, r0
    2c14:	4460      	add	r0, ip
    2c16:	4584      	cmp	ip, r0
    2c18:	d900      	bls.n	2c1c <__aeabi_dmul+0x164>
    2c1a:	e11f      	b.n	2e5c <__aeabi_dmul+0x3a4>
    2c1c:	0c01      	lsrs	r1, r0, #16
    2c1e:	4643      	mov	r3, r8
    2c20:	9103      	str	r1, [sp, #12]
    2c22:	0419      	lsls	r1, r3, #16
    2c24:	0c0b      	lsrs	r3, r1, #16
    2c26:	0400      	lsls	r0, r0, #16
    2c28:	18c0      	adds	r0, r0, r3
    2c2a:	0421      	lsls	r1, r4, #16
    2c2c:	0c24      	lsrs	r4, r4, #16
    2c2e:	9005      	str	r0, [sp, #20]
    2c30:	1c10      	adds	r0, r2, #0
    2c32:	4362      	muls	r2, r4
    2c34:	0c09      	lsrs	r1, r1, #16
    2c36:	9202      	str	r2, [sp, #8]
    2c38:	4348      	muls	r0, r1
    2c3a:	1c32      	adds	r2, r6, #0
    2c3c:	4366      	muls	r6, r4
    2c3e:	434a      	muls	r2, r1
    2c40:	9b02      	ldr	r3, [sp, #8]
    2c42:	46b1      	mov	r9, r6
    2c44:	0c06      	lsrs	r6, r0, #16
    2c46:	4690      	mov	r8, r2
    2c48:	46b4      	mov	ip, r6
    2c4a:	1c1a      	adds	r2, r3, #0
    2c4c:	4462      	add	r2, ip
    2c4e:	4442      	add	r2, r8
    2c50:	4590      	cmp	r8, r2
    2c52:	d902      	bls.n	2c5a <__aeabi_dmul+0x1a2>
    2c54:	2680      	movs	r6, #128	; 0x80
    2c56:	0273      	lsls	r3, r6, #9
    2c58:	4499      	add	r9, r3
    2c5a:	0c16      	lsrs	r6, r2, #16
    2c5c:	46b0      	mov	r8, r6
    2c5e:	44c1      	add	r9, r8
    2c60:	0400      	lsls	r0, r0, #16
    2c62:	464b      	mov	r3, r9
    2c64:	0c06      	lsrs	r6, r0, #16
    2c66:	0412      	lsls	r2, r2, #16
    2c68:	9302      	str	r3, [sp, #8]
    2c6a:	1993      	adds	r3, r2, r6
    2c6c:	4656      	mov	r6, sl
    2c6e:	0432      	lsls	r2, r6, #16
    2c70:	0c10      	lsrs	r0, r2, #16
    2c72:	1c02      	adds	r2, r0, #0
    2c74:	436a      	muls	r2, r5
    2c76:	469c      	mov	ip, r3
    2c78:	1c03      	adds	r3, r0, #0
    2c7a:	437b      	muls	r3, r7
    2c7c:	4691      	mov	r9, r2
    2c7e:	0c32      	lsrs	r2, r6, #16
    2c80:	4357      	muls	r7, r2
    2c82:	4698      	mov	r8, r3
    2c84:	0c1b      	lsrs	r3, r3, #16
    2c86:	469a      	mov	sl, r3
    2c88:	44d1      	add	r9, sl
    2c8a:	44b9      	add	r9, r7
    2c8c:	4355      	muls	r5, r2
    2c8e:	454f      	cmp	r7, r9
    2c90:	d902      	bls.n	2c98 <__aeabi_dmul+0x1e0>
    2c92:	2780      	movs	r7, #128	; 0x80
    2c94:	027e      	lsls	r6, r7, #9
    2c96:	19ad      	adds	r5, r5, r6
    2c98:	464b      	mov	r3, r9
    2c9a:	0c1f      	lsrs	r7, r3, #16
    2c9c:	4646      	mov	r6, r8
    2c9e:	19ed      	adds	r5, r5, r7
    2ca0:	041f      	lsls	r7, r3, #16
    2ca2:	0433      	lsls	r3, r6, #16
    2ca4:	0c1e      	lsrs	r6, r3, #16
    2ca6:	1c03      	adds	r3, r0, #0
    2ca8:	434b      	muls	r3, r1
    2caa:	4360      	muls	r0, r4
    2cac:	4351      	muls	r1, r2
    2cae:	4354      	muls	r4, r2
    2cb0:	0c1a      	lsrs	r2, r3, #16
    2cb2:	1880      	adds	r0, r0, r2
    2cb4:	46b0      	mov	r8, r6
    2cb6:	1840      	adds	r0, r0, r1
    2cb8:	4447      	add	r7, r8
    2cba:	469a      	mov	sl, r3
    2cbc:	4281      	cmp	r1, r0
    2cbe:	d902      	bls.n	2cc6 <__aeabi_dmul+0x20e>
    2cc0:	2180      	movs	r1, #128	; 0x80
    2cc2:	024e      	lsls	r6, r1, #9
    2cc4:	19a4      	adds	r4, r4, r6
    2cc6:	9b03      	ldr	r3, [sp, #12]
    2cc8:	1c1a      	adds	r2, r3, #0
    2cca:	4462      	add	r2, ip
    2ccc:	445a      	add	r2, fp
    2cce:	4562      	cmp	r2, ip
    2cd0:	4189      	sbcs	r1, r1
    2cd2:	424e      	negs	r6, r1
    2cd4:	4651      	mov	r1, sl
    2cd6:	46b3      	mov	fp, r6
    2cd8:	0403      	lsls	r3, r0, #16
    2cda:	040e      	lsls	r6, r1, #16
    2cdc:	469c      	mov	ip, r3
    2cde:	9902      	ldr	r1, [sp, #8]
    2ce0:	0c33      	lsrs	r3, r6, #16
    2ce2:	4463      	add	r3, ip
    2ce4:	18ce      	adds	r6, r1, r3
    2ce6:	46b0      	mov	r8, r6
    2ce8:	46c2      	mov	sl, r8
    2cea:	44da      	add	sl, fp
    2cec:	19d2      	adds	r2, r2, r7
    2cee:	42ba      	cmp	r2, r7
    2cf0:	41bf      	sbcs	r7, r7
    2cf2:	4651      	mov	r1, sl
    2cf4:	427b      	negs	r3, r7
    2cf6:	186f      	adds	r7, r5, r1
    2cf8:	18f9      	adds	r1, r7, r3
    2cfa:	4699      	mov	r9, r3
    2cfc:	45da      	cmp	sl, fp
    2cfe:	419b      	sbcs	r3, r3
    2d00:	425e      	negs	r6, r3
    2d02:	9b02      	ldr	r3, [sp, #8]
    2d04:	46b3      	mov	fp, r6
    2d06:	4598      	cmp	r8, r3
    2d08:	41b6      	sbcs	r6, r6
    2d0a:	4276      	negs	r6, r6
    2d0c:	465b      	mov	r3, fp
    2d0e:	431e      	orrs	r6, r3
    2d10:	0c00      	lsrs	r0, r0, #16
    2d12:	4549      	cmp	r1, r9
    2d14:	419b      	sbcs	r3, r3
    2d16:	42af      	cmp	r7, r5
    2d18:	41ad      	sbcs	r5, r5
    2d1a:	1836      	adds	r6, r6, r0
    2d1c:	426f      	negs	r7, r5
    2d1e:	4258      	negs	r0, r3
    2d20:	4338      	orrs	r0, r7
    2d22:	1836      	adds	r6, r6, r0
    2d24:	9805      	ldr	r0, [sp, #20]
    2d26:	1934      	adds	r4, r6, r4
    2d28:	0256      	lsls	r6, r2, #9
    2d2a:	4306      	orrs	r6, r0
    2d2c:	0dcb      	lsrs	r3, r1, #23
    2d2e:	0264      	lsls	r4, r4, #9
    2d30:	1e70      	subs	r0, r6, #1
    2d32:	4186      	sbcs	r6, r0
    2d34:	0dd2      	lsrs	r2, r2, #23
    2d36:	4316      	orrs	r6, r2
    2d38:	0249      	lsls	r1, r1, #9
    2d3a:	431c      	orrs	r4, r3
    2d3c:	430e      	orrs	r6, r1
    2d3e:	01e0      	lsls	r0, r4, #7
    2d40:	d52f      	bpl.n	2da2 <__aeabi_dmul+0x2ea>
    2d42:	2701      	movs	r7, #1
    2d44:	9d04      	ldr	r5, [sp, #16]
    2d46:	4037      	ands	r7, r6
    2d48:	0873      	lsrs	r3, r6, #1
    2d4a:	1c3e      	adds	r6, r7, #0
    2d4c:	07e0      	lsls	r0, r4, #31
    2d4e:	3501      	adds	r5, #1
    2d50:	431e      	orrs	r6, r3
    2d52:	9504      	str	r5, [sp, #16]
    2d54:	4306      	orrs	r6, r0
    2d56:	0864      	lsrs	r4, r4, #1
    2d58:	e023      	b.n	2da2 <__aeabi_dmul+0x2ea>
    2d5a:	1c23      	adds	r3, r4, #0
    2d5c:	432b      	orrs	r3, r5
    2d5e:	2003      	movs	r0, #3
    2d60:	2b00      	cmp	r3, #0
    2d62:	d000      	beq.n	2d66 <__aeabi_dmul+0x2ae>
    2d64:	e739      	b.n	2bda <__aeabi_dmul+0x122>
    2d66:	2400      	movs	r4, #0
    2d68:	2500      	movs	r5, #0
    2d6a:	2002      	movs	r0, #2
    2d6c:	e735      	b.n	2bda <__aeabi_dmul+0x122>
    2d6e:	220c      	movs	r2, #12
    2d70:	2303      	movs	r3, #3
    2d72:	4691      	mov	r9, r2
    2d74:	9303      	str	r3, [sp, #12]
    2d76:	e6e6      	b.n	2b46 <__aeabi_dmul+0x8e>
    2d78:	2604      	movs	r6, #4
    2d7a:	2300      	movs	r3, #0
    2d7c:	2001      	movs	r0, #1
    2d7e:	46b1      	mov	r9, r6
    2d80:	469a      	mov	sl, r3
    2d82:	2600      	movs	r6, #0
    2d84:	9003      	str	r0, [sp, #12]
    2d86:	e6de      	b.n	2b46 <__aeabi_dmul+0x8e>
    2d88:	2400      	movs	r4, #0
    2d8a:	2500      	movs	r5, #0
    2d8c:	2001      	movs	r0, #1
    2d8e:	e724      	b.n	2bda <__aeabi_dmul+0x122>
    2d90:	9803      	ldr	r0, [sp, #12]
    2d92:	4654      	mov	r4, sl
    2d94:	2802      	cmp	r0, #2
    2d96:	d044      	beq.n	2e22 <__aeabi_dmul+0x36a>
    2d98:	2803      	cmp	r0, #3
    2d9a:	d100      	bne.n	2d9e <__aeabi_dmul+0x2e6>
    2d9c:	e0ea      	b.n	2f74 <__aeabi_dmul+0x4bc>
    2d9e:	2801      	cmp	r0, #1
    2da0:	d060      	beq.n	2e64 <__aeabi_dmul+0x3ac>
    2da2:	9a04      	ldr	r2, [sp, #16]
    2da4:	4937      	ldr	r1, [pc, #220]	; (2e84 <__aeabi_dmul+0x3cc>)
    2da6:	1850      	adds	r0, r2, r1
    2da8:	2800      	cmp	r0, #0
    2daa:	dc00      	bgt.n	2dae <__aeabi_dmul+0x2f6>
    2dac:	e095      	b.n	2eda <__aeabi_dmul+0x422>
    2dae:	270f      	movs	r7, #15
    2db0:	4037      	ands	r7, r6
    2db2:	2f04      	cmp	r7, #4
    2db4:	d005      	beq.n	2dc2 <__aeabi_dmul+0x30a>
    2db6:	1d31      	adds	r1, r6, #4
    2db8:	42b1      	cmp	r1, r6
    2dba:	41b6      	sbcs	r6, r6
    2dbc:	4275      	negs	r5, r6
    2dbe:	1964      	adds	r4, r4, r5
    2dc0:	1c0e      	adds	r6, r1, #0
    2dc2:	01e1      	lsls	r1, r4, #7
    2dc4:	d505      	bpl.n	2dd2 <__aeabi_dmul+0x31a>
    2dc6:	4830      	ldr	r0, [pc, #192]	; (2e88 <__aeabi_dmul+0x3d0>)
    2dc8:	9a04      	ldr	r2, [sp, #16]
    2dca:	2380      	movs	r3, #128	; 0x80
    2dcc:	00df      	lsls	r7, r3, #3
    2dce:	4004      	ands	r4, r0
    2dd0:	19d0      	adds	r0, r2, r7
    2dd2:	492e      	ldr	r1, [pc, #184]	; (2e8c <__aeabi_dmul+0x3d4>)
    2dd4:	4288      	cmp	r0, r1
    2dd6:	dc24      	bgt.n	2e22 <__aeabi_dmul+0x36a>
    2dd8:	9b01      	ldr	r3, [sp, #4]
    2dda:	0765      	lsls	r5, r4, #29
    2ddc:	08f6      	lsrs	r6, r6, #3
    2dde:	0264      	lsls	r4, r4, #9
    2de0:	0542      	lsls	r2, r0, #21
    2de2:	2701      	movs	r7, #1
    2de4:	432e      	orrs	r6, r5
    2de6:	0b24      	lsrs	r4, r4, #12
    2de8:	0d52      	lsrs	r2, r2, #21
    2dea:	401f      	ands	r7, r3
    2dec:	2000      	movs	r0, #0
    2dee:	2100      	movs	r1, #0
    2df0:	0d09      	lsrs	r1, r1, #20
    2df2:	050d      	lsls	r5, r1, #20
    2df4:	4325      	orrs	r5, r4
    2df6:	4c26      	ldr	r4, [pc, #152]	; (2e90 <__aeabi_dmul+0x3d8>)
    2df8:	0512      	lsls	r2, r2, #20
    2dfa:	402c      	ands	r4, r5
    2dfc:	4314      	orrs	r4, r2
    2dfe:	0063      	lsls	r3, r4, #1
    2e00:	1c30      	adds	r0, r6, #0
    2e02:	085e      	lsrs	r6, r3, #1
    2e04:	07ff      	lsls	r7, r7, #31
    2e06:	1c31      	adds	r1, r6, #0
    2e08:	4339      	orrs	r1, r7
    2e0a:	b007      	add	sp, #28
    2e0c:	bc3c      	pop	{r2, r3, r4, r5}
    2e0e:	4690      	mov	r8, r2
    2e10:	4699      	mov	r9, r3
    2e12:	46a2      	mov	sl, r4
    2e14:	46ab      	mov	fp, r5
    2e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e18:	465a      	mov	r2, fp
    2e1a:	1c2e      	adds	r6, r5, #0
    2e1c:	9201      	str	r2, [sp, #4]
    2e1e:	2802      	cmp	r0, #2
    2e20:	d1ba      	bne.n	2d98 <__aeabi_dmul+0x2e0>
    2e22:	9e01      	ldr	r6, [sp, #4]
    2e24:	2701      	movs	r7, #1
    2e26:	4037      	ands	r7, r6
    2e28:	4a13      	ldr	r2, [pc, #76]	; (2e78 <__aeabi_dmul+0x3c0>)
    2e2a:	2400      	movs	r4, #0
    2e2c:	2600      	movs	r6, #0
    2e2e:	e7dd      	b.n	2dec <__aeabi_dmul+0x334>
    2e30:	4654      	mov	r4, sl
    2e32:	9701      	str	r7, [sp, #4]
    2e34:	9803      	ldr	r0, [sp, #12]
    2e36:	e7ad      	b.n	2d94 <__aeabi_dmul+0x2dc>
    2e38:	2601      	movs	r6, #1
    2e3a:	2700      	movs	r7, #0
    2e3c:	4c15      	ldr	r4, [pc, #84]	; (2e94 <__aeabi_dmul+0x3dc>)
    2e3e:	4276      	negs	r6, r6
    2e40:	4a0d      	ldr	r2, [pc, #52]	; (2e78 <__aeabi_dmul+0x3c0>)
    2e42:	e7d3      	b.n	2dec <__aeabi_dmul+0x334>
    2e44:	1c2e      	adds	r6, r5, #0
    2e46:	e7a5      	b.n	2d94 <__aeabi_dmul+0x2dc>
    2e48:	2280      	movs	r2, #128	; 0x80
    2e4a:	0313      	lsls	r3, r2, #12
    2e4c:	4651      	mov	r1, sl
    2e4e:	4219      	tst	r1, r3
    2e50:	d135      	bne.n	2ebe <__aeabi_dmul+0x406>
    2e52:	430b      	orrs	r3, r1
    2e54:	031d      	lsls	r5, r3, #12
    2e56:	0b2c      	lsrs	r4, r5, #12
    2e58:	4a07      	ldr	r2, [pc, #28]	; (2e78 <__aeabi_dmul+0x3c0>)
    2e5a:	e7c7      	b.n	2dec <__aeabi_dmul+0x334>
    2e5c:	2180      	movs	r1, #128	; 0x80
    2e5e:	024b      	lsls	r3, r1, #9
    2e60:	449b      	add	fp, r3
    2e62:	e6db      	b.n	2c1c <__aeabi_dmul+0x164>
    2e64:	9b01      	ldr	r3, [sp, #4]
    2e66:	2200      	movs	r2, #0
    2e68:	4018      	ands	r0, r3
    2e6a:	b2c7      	uxtb	r7, r0
    2e6c:	2400      	movs	r4, #0
    2e6e:	2600      	movs	r6, #0
    2e70:	e7bc      	b.n	2dec <__aeabi_dmul+0x334>
    2e72:	46c0      	nop			; (mov r8, r8)
    2e74:	fffffc0d 	.word	0xfffffc0d
    2e78:	000007ff 	.word	0x000007ff
    2e7c:	fffffc01 	.word	0xfffffc01
    2e80:	00008760 	.word	0x00008760
    2e84:	000003ff 	.word	0x000003ff
    2e88:	feffffff 	.word	0xfeffffff
    2e8c:	000007fe 	.word	0x000007fe
    2e90:	800fffff 	.word	0x800fffff
    2e94:	000fffff 	.word	0x000fffff
    2e98:	1c04      	adds	r4, r0, #0
    2e9a:	3c28      	subs	r4, #40	; 0x28
    2e9c:	40a5      	lsls	r5, r4
    2e9e:	1c2c      	adds	r4, r5, #0
    2ea0:	2500      	movs	r5, #0
    2ea2:	e670      	b.n	2b86 <__aeabi_dmul+0xce>
    2ea4:	f000 fc64 	bl	3770 <__clzsi2>
    2ea8:	3020      	adds	r0, #32
    2eaa:	e660      	b.n	2b6e <__aeabi_dmul+0xb6>
    2eac:	3b28      	subs	r3, #40	; 0x28
    2eae:	409e      	lsls	r6, r3
    2eb0:	46b2      	mov	sl, r6
    2eb2:	2600      	movs	r6, #0
    2eb4:	e62d      	b.n	2b12 <__aeabi_dmul+0x5a>
    2eb6:	f000 fc5b 	bl	3770 <__clzsi2>
    2eba:	3020      	adds	r0, #32
    2ebc:	e619      	b.n	2af2 <__aeabi_dmul+0x3a>
    2ebe:	421c      	tst	r4, r3
    2ec0:	d106      	bne.n	2ed0 <__aeabi_dmul+0x418>
    2ec2:	431c      	orrs	r4, r3
    2ec4:	0326      	lsls	r6, r4, #12
    2ec6:	0b34      	lsrs	r4, r6, #12
    2ec8:	465f      	mov	r7, fp
    2eca:	1c2e      	adds	r6, r5, #0
    2ecc:	4a2e      	ldr	r2, [pc, #184]	; (2f88 <__aeabi_dmul+0x4d0>)
    2ece:	e78d      	b.n	2dec <__aeabi_dmul+0x334>
    2ed0:	430b      	orrs	r3, r1
    2ed2:	0318      	lsls	r0, r3, #12
    2ed4:	0b04      	lsrs	r4, r0, #12
    2ed6:	4a2c      	ldr	r2, [pc, #176]	; (2f88 <__aeabi_dmul+0x4d0>)
    2ed8:	e788      	b.n	2dec <__aeabi_dmul+0x334>
    2eda:	4f2c      	ldr	r7, [pc, #176]	; (2f8c <__aeabi_dmul+0x4d4>)
    2edc:	9d04      	ldr	r5, [sp, #16]
    2ede:	1b7b      	subs	r3, r7, r5
    2ee0:	2b38      	cmp	r3, #56	; 0x38
    2ee2:	dd06      	ble.n	2ef2 <__aeabi_dmul+0x43a>
    2ee4:	9e01      	ldr	r6, [sp, #4]
    2ee6:	2701      	movs	r7, #1
    2ee8:	4037      	ands	r7, r6
    2eea:	2200      	movs	r2, #0
    2eec:	2400      	movs	r4, #0
    2eee:	2600      	movs	r6, #0
    2ef0:	e77c      	b.n	2dec <__aeabi_dmul+0x334>
    2ef2:	2b1f      	cmp	r3, #31
    2ef4:	dc21      	bgt.n	2f3a <__aeabi_dmul+0x482>
    2ef6:	9a04      	ldr	r2, [sp, #16]
    2ef8:	4f25      	ldr	r7, [pc, #148]	; (2f90 <__aeabi_dmul+0x4d8>)
    2efa:	1c35      	adds	r5, r6, #0
    2efc:	19d1      	adds	r1, r2, r7
    2efe:	1c20      	adds	r0, r4, #0
    2f00:	408e      	lsls	r6, r1
    2f02:	40dd      	lsrs	r5, r3
    2f04:	4088      	lsls	r0, r1
    2f06:	1c32      	adds	r2, r6, #0
    2f08:	4328      	orrs	r0, r5
    2f0a:	1e56      	subs	r6, r2, #1
    2f0c:	41b2      	sbcs	r2, r6
    2f0e:	1c06      	adds	r6, r0, #0
    2f10:	4316      	orrs	r6, r2
    2f12:	40dc      	lsrs	r4, r3
    2f14:	230f      	movs	r3, #15
    2f16:	4033      	ands	r3, r6
    2f18:	2b04      	cmp	r3, #4
    2f1a:	d005      	beq.n	2f28 <__aeabi_dmul+0x470>
    2f1c:	1d37      	adds	r7, r6, #4
    2f1e:	42b7      	cmp	r7, r6
    2f20:	41b6      	sbcs	r6, r6
    2f22:	4271      	negs	r1, r6
    2f24:	1864      	adds	r4, r4, r1
    2f26:	1c3e      	adds	r6, r7, #0
    2f28:	0225      	lsls	r5, r4, #8
    2f2a:	d517      	bpl.n	2f5c <__aeabi_dmul+0x4a4>
    2f2c:	9b01      	ldr	r3, [sp, #4]
    2f2e:	2701      	movs	r7, #1
    2f30:	401f      	ands	r7, r3
    2f32:	2201      	movs	r2, #1
    2f34:	2400      	movs	r4, #0
    2f36:	2600      	movs	r6, #0
    2f38:	e758      	b.n	2dec <__aeabi_dmul+0x334>
    2f3a:	4816      	ldr	r0, [pc, #88]	; (2f94 <__aeabi_dmul+0x4dc>)
    2f3c:	9a04      	ldr	r2, [sp, #16]
    2f3e:	1c21      	adds	r1, r4, #0
    2f40:	1a87      	subs	r7, r0, r2
    2f42:	40f9      	lsrs	r1, r7
    2f44:	1c0d      	adds	r5, r1, #0
    2f46:	2b20      	cmp	r3, #32
    2f48:	d012      	beq.n	2f70 <__aeabi_dmul+0x4b8>
    2f4a:	4b13      	ldr	r3, [pc, #76]	; (2f98 <__aeabi_dmul+0x4e0>)
    2f4c:	18d0      	adds	r0, r2, r3
    2f4e:	4084      	lsls	r4, r0
    2f50:	4326      	orrs	r6, r4
    2f52:	1e72      	subs	r2, r6, #1
    2f54:	4196      	sbcs	r6, r2
    2f56:	432e      	orrs	r6, r5
    2f58:	2400      	movs	r4, #0
    2f5a:	e7db      	b.n	2f14 <__aeabi_dmul+0x45c>
    2f5c:	9a01      	ldr	r2, [sp, #4]
    2f5e:	0765      	lsls	r5, r4, #29
    2f60:	08f6      	lsrs	r6, r6, #3
    2f62:	0260      	lsls	r0, r4, #9
    2f64:	2701      	movs	r7, #1
    2f66:	4017      	ands	r7, r2
    2f68:	432e      	orrs	r6, r5
    2f6a:	0b04      	lsrs	r4, r0, #12
    2f6c:	2200      	movs	r2, #0
    2f6e:	e73d      	b.n	2dec <__aeabi_dmul+0x334>
    2f70:	2400      	movs	r4, #0
    2f72:	e7ed      	b.n	2f50 <__aeabi_dmul+0x498>
    2f74:	2180      	movs	r1, #128	; 0x80
    2f76:	030f      	lsls	r7, r1, #12
    2f78:	433c      	orrs	r4, r7
    2f7a:	9801      	ldr	r0, [sp, #4]
    2f7c:	0324      	lsls	r4, r4, #12
    2f7e:	2701      	movs	r7, #1
    2f80:	0b24      	lsrs	r4, r4, #12
    2f82:	4007      	ands	r7, r0
    2f84:	4a00      	ldr	r2, [pc, #0]	; (2f88 <__aeabi_dmul+0x4d0>)
    2f86:	e731      	b.n	2dec <__aeabi_dmul+0x334>
    2f88:	000007ff 	.word	0x000007ff
    2f8c:	fffffc02 	.word	0xfffffc02
    2f90:	0000041e 	.word	0x0000041e
    2f94:	fffffbe2 	.word	0xfffffbe2
    2f98:	0000043e 	.word	0x0000043e

00002f9c <__aeabi_dsub>:
    2f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f9e:	4657      	mov	r7, sl
    2fa0:	464e      	mov	r6, r9
    2fa2:	4645      	mov	r5, r8
    2fa4:	b4e0      	push	{r5, r6, r7}
    2fa6:	1c07      	adds	r7, r0, #0
    2fa8:	030d      	lsls	r5, r1, #12
    2faa:	004e      	lsls	r6, r1, #1
    2fac:	0a68      	lsrs	r0, r5, #9
    2fae:	0fcc      	lsrs	r4, r1, #31
    2fb0:	0f79      	lsrs	r1, r7, #29
    2fb2:	4308      	orrs	r0, r1
    2fb4:	4684      	mov	ip, r0
    2fb6:	1c11      	adds	r1, r2, #0
    2fb8:	0318      	lsls	r0, r3, #12
    2fba:	005a      	lsls	r2, r3, #1
    2fbc:	00fd      	lsls	r5, r7, #3
    2fbe:	0a40      	lsrs	r0, r0, #9
    2fc0:	0fdf      	lsrs	r7, r3, #31
    2fc2:	0f4b      	lsrs	r3, r1, #29
    2fc4:	4318      	orrs	r0, r3
    2fc6:	4bc7      	ldr	r3, [pc, #796]	; (32e4 <__aeabi_dsub+0x348>)
    2fc8:	00c9      	lsls	r1, r1, #3
    2fca:	0d76      	lsrs	r6, r6, #21
    2fcc:	0d52      	lsrs	r2, r2, #21
    2fce:	468a      	mov	sl, r1
    2fd0:	429a      	cmp	r2, r3
    2fd2:	d100      	bne.n	2fd6 <__aeabi_dsub+0x3a>
    2fd4:	e0de      	b.n	3194 <__aeabi_dsub+0x1f8>
    2fd6:	2301      	movs	r3, #1
    2fd8:	405f      	eors	r7, r3
    2fda:	46b9      	mov	r9, r7
    2fdc:	42bc      	cmp	r4, r7
    2fde:	d100      	bne.n	2fe2 <__aeabi_dsub+0x46>
    2fe0:	e0a6      	b.n	3130 <__aeabi_dsub+0x194>
    2fe2:	1ab7      	subs	r7, r6, r2
    2fe4:	2f00      	cmp	r7, #0
    2fe6:	dc00      	bgt.n	2fea <__aeabi_dsub+0x4e>
    2fe8:	e10b      	b.n	3202 <__aeabi_dsub+0x266>
    2fea:	2a00      	cmp	r2, #0
    2fec:	d112      	bne.n	3014 <__aeabi_dsub+0x78>
    2fee:	4652      	mov	r2, sl
    2ff0:	4302      	orrs	r2, r0
    2ff2:	d100      	bne.n	2ff6 <__aeabi_dsub+0x5a>
    2ff4:	e0d2      	b.n	319c <__aeabi_dsub+0x200>
    2ff6:	3f01      	subs	r7, #1
    2ff8:	2f00      	cmp	r7, #0
    2ffa:	d000      	beq.n	2ffe <__aeabi_dsub+0x62>
    2ffc:	e15b      	b.n	32b6 <__aeabi_dsub+0x31a>
    2ffe:	4651      	mov	r1, sl
    3000:	1a6f      	subs	r7, r5, r1
    3002:	42bd      	cmp	r5, r7
    3004:	41ad      	sbcs	r5, r5
    3006:	4662      	mov	r2, ip
    3008:	426b      	negs	r3, r5
    300a:	1a10      	subs	r0, r2, r0
    300c:	1c3d      	adds	r5, r7, #0
    300e:	1ac3      	subs	r3, r0, r3
    3010:	1c37      	adds	r7, r6, #0
    3012:	e024      	b.n	305e <__aeabi_dsub+0xc2>
    3014:	4ab3      	ldr	r2, [pc, #716]	; (32e4 <__aeabi_dsub+0x348>)
    3016:	4296      	cmp	r6, r2
    3018:	d100      	bne.n	301c <__aeabi_dsub+0x80>
    301a:	e0de      	b.n	31da <__aeabi_dsub+0x23e>
    301c:	2180      	movs	r1, #128	; 0x80
    301e:	040b      	lsls	r3, r1, #16
    3020:	4318      	orrs	r0, r3
    3022:	2f38      	cmp	r7, #56	; 0x38
    3024:	dd00      	ble.n	3028 <__aeabi_dsub+0x8c>
    3026:	e11e      	b.n	3266 <__aeabi_dsub+0x2ca>
    3028:	2f1f      	cmp	r7, #31
    302a:	dd00      	ble.n	302e <__aeabi_dsub+0x92>
    302c:	e160      	b.n	32f0 <__aeabi_dsub+0x354>
    302e:	2120      	movs	r1, #32
    3030:	1bc9      	subs	r1, r1, r7
    3032:	1c02      	adds	r2, r0, #0
    3034:	4653      	mov	r3, sl
    3036:	408a      	lsls	r2, r1
    3038:	40fb      	lsrs	r3, r7
    303a:	431a      	orrs	r2, r3
    303c:	4653      	mov	r3, sl
    303e:	408b      	lsls	r3, r1
    3040:	1c19      	adds	r1, r3, #0
    3042:	1e4b      	subs	r3, r1, #1
    3044:	4199      	sbcs	r1, r3
    3046:	1c03      	adds	r3, r0, #0
    3048:	430a      	orrs	r2, r1
    304a:	40fb      	lsrs	r3, r7
    304c:	1aaa      	subs	r2, r5, r2
    304e:	4667      	mov	r7, ip
    3050:	4295      	cmp	r5, r2
    3052:	41ad      	sbcs	r5, r5
    3054:	1af8      	subs	r0, r7, r3
    3056:	426b      	negs	r3, r5
    3058:	1ac3      	subs	r3, r0, r3
    305a:	1c15      	adds	r5, r2, #0
    305c:	1c37      	adds	r7, r6, #0
    305e:	021a      	lsls	r2, r3, #8
    3060:	d400      	bmi.n	3064 <__aeabi_dsub+0xc8>
    3062:	e0c2      	b.n	31ea <__aeabi_dsub+0x24e>
    3064:	025e      	lsls	r6, r3, #9
    3066:	0a71      	lsrs	r1, r6, #9
    3068:	4688      	mov	r8, r1
    306a:	4642      	mov	r2, r8
    306c:	2a00      	cmp	r2, #0
    306e:	d100      	bne.n	3072 <__aeabi_dsub+0xd6>
    3070:	e0eb      	b.n	324a <__aeabi_dsub+0x2ae>
    3072:	4640      	mov	r0, r8
    3074:	f000 fb7c 	bl	3770 <__clzsi2>
    3078:	1c02      	adds	r2, r0, #0
    307a:	3a08      	subs	r2, #8
    307c:	2a1f      	cmp	r2, #31
    307e:	dd00      	ble.n	3082 <__aeabi_dsub+0xe6>
    3080:	e0ec      	b.n	325c <__aeabi_dsub+0x2c0>
    3082:	2328      	movs	r3, #40	; 0x28
    3084:	1a18      	subs	r0, r3, r0
    3086:	1c2e      	adds	r6, r5, #0
    3088:	4641      	mov	r1, r8
    308a:	40c6      	lsrs	r6, r0
    308c:	4091      	lsls	r1, r2
    308e:	1c33      	adds	r3, r6, #0
    3090:	430b      	orrs	r3, r1
    3092:	4095      	lsls	r5, r2
    3094:	4297      	cmp	r7, r2
    3096:	dd00      	ble.n	309a <__aeabi_dsub+0xfe>
    3098:	e0a4      	b.n	31e4 <__aeabi_dsub+0x248>
    309a:	1bd0      	subs	r0, r2, r7
    309c:	1c41      	adds	r1, r0, #1
    309e:	291f      	cmp	r1, #31
    30a0:	dd00      	ble.n	30a4 <__aeabi_dsub+0x108>
    30a2:	e10d      	b.n	32c0 <__aeabi_dsub+0x324>
    30a4:	271f      	movs	r7, #31
    30a6:	1a3a      	subs	r2, r7, r0
    30a8:	1c2e      	adds	r6, r5, #0
    30aa:	1c18      	adds	r0, r3, #0
    30ac:	40ce      	lsrs	r6, r1
    30ae:	4090      	lsls	r0, r2
    30b0:	4095      	lsls	r5, r2
    30b2:	4330      	orrs	r0, r6
    30b4:	1e6a      	subs	r2, r5, #1
    30b6:	4195      	sbcs	r5, r2
    30b8:	40cb      	lsrs	r3, r1
    30ba:	4305      	orrs	r5, r0
    30bc:	2101      	movs	r1, #1
    30be:	2700      	movs	r7, #0
    30c0:	260f      	movs	r6, #15
    30c2:	402e      	ands	r6, r5
    30c4:	2e04      	cmp	r6, #4
    30c6:	d100      	bne.n	30ca <__aeabi_dsub+0x12e>
    30c8:	e070      	b.n	31ac <__aeabi_dsub+0x210>
    30ca:	1d2e      	adds	r6, r5, #4
    30cc:	42ae      	cmp	r6, r5
    30ce:	41ad      	sbcs	r5, r5
    30d0:	4268      	negs	r0, r5
    30d2:	2201      	movs	r2, #1
    30d4:	181b      	adds	r3, r3, r0
    30d6:	4014      	ands	r4, r2
    30d8:	0218      	lsls	r0, r3, #8
    30da:	d507      	bpl.n	30ec <__aeabi_dsub+0x150>
    30dc:	4f81      	ldr	r7, [pc, #516]	; (32e4 <__aeabi_dsub+0x348>)
    30de:	42b9      	cmp	r1, r7
    30e0:	d100      	bne.n	30e4 <__aeabi_dsub+0x148>
    30e2:	e0ae      	b.n	3242 <__aeabi_dsub+0x2a6>
    30e4:	4d80      	ldr	r5, [pc, #512]	; (32e8 <__aeabi_dsub+0x34c>)
    30e6:	1c0f      	adds	r7, r1, #0
    30e8:	402b      	ands	r3, r5
    30ea:	3101      	adds	r1, #1
    30ec:	08f2      	lsrs	r2, r6, #3
    30ee:	0549      	lsls	r1, r1, #21
    30f0:	075e      	lsls	r6, r3, #29
    30f2:	4332      	orrs	r2, r6
    30f4:	08db      	lsrs	r3, r3, #3
    30f6:	0d48      	lsrs	r0, r1, #21
    30f8:	2801      	cmp	r0, #1
    30fa:	dc00      	bgt.n	30fe <__aeabi_dsub+0x162>
    30fc:	e077      	b.n	31ee <__aeabi_dsub+0x252>
    30fe:	031b      	lsls	r3, r3, #12
    3100:	057f      	lsls	r7, r7, #21
    3102:	0b1b      	lsrs	r3, r3, #12
    3104:	0d7e      	lsrs	r6, r7, #21
    3106:	2000      	movs	r0, #0
    3108:	2100      	movs	r1, #0
    310a:	0d0d      	lsrs	r5, r1, #20
    310c:	1c10      	adds	r0, r2, #0
    310e:	0529      	lsls	r1, r5, #20
    3110:	4a76      	ldr	r2, [pc, #472]	; (32ec <__aeabi_dsub+0x350>)
    3112:	430b      	orrs	r3, r1
    3114:	0577      	lsls	r7, r6, #21
    3116:	087e      	lsrs	r6, r7, #1
    3118:	401a      	ands	r2, r3
    311a:	4332      	orrs	r2, r6
    311c:	0053      	lsls	r3, r2, #1
    311e:	085d      	lsrs	r5, r3, #1
    3120:	1c29      	adds	r1, r5, #0
    3122:	07e4      	lsls	r4, r4, #31
    3124:	4321      	orrs	r1, r4
    3126:	bc1c      	pop	{r2, r3, r4}
    3128:	4690      	mov	r8, r2
    312a:	4699      	mov	r9, r3
    312c:	46a2      	mov	sl, r4
    312e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3130:	1ab3      	subs	r3, r6, r2
    3132:	2b00      	cmp	r3, #0
    3134:	dc00      	bgt.n	3138 <__aeabi_dsub+0x19c>
    3136:	e0a3      	b.n	3280 <__aeabi_dsub+0x2e4>
    3138:	2a00      	cmp	r2, #0
    313a:	d03b      	beq.n	31b4 <__aeabi_dsub+0x218>
    313c:	4a69      	ldr	r2, [pc, #420]	; (32e4 <__aeabi_dsub+0x348>)
    313e:	4296      	cmp	r6, r2
    3140:	d04b      	beq.n	31da <__aeabi_dsub+0x23e>
    3142:	2180      	movs	r1, #128	; 0x80
    3144:	040f      	lsls	r7, r1, #16
    3146:	4338      	orrs	r0, r7
    3148:	2b38      	cmp	r3, #56	; 0x38
    314a:	dc00      	bgt.n	314e <__aeabi_dsub+0x1b2>
    314c:	e114      	b.n	3378 <__aeabi_dsub+0x3dc>
    314e:	4653      	mov	r3, sl
    3150:	4318      	orrs	r0, r3
    3152:	2700      	movs	r7, #0
    3154:	2200      	movs	r2, #0
    3156:	2800      	cmp	r0, #0
    3158:	d000      	beq.n	315c <__aeabi_dsub+0x1c0>
    315a:	2201      	movs	r2, #1
    315c:	1952      	adds	r2, r2, r5
    315e:	42aa      	cmp	r2, r5
    3160:	41ad      	sbcs	r5, r5
    3162:	4467      	add	r7, ip
    3164:	426b      	negs	r3, r5
    3166:	18fb      	adds	r3, r7, r3
    3168:	1c15      	adds	r5, r2, #0
    316a:	1c37      	adds	r7, r6, #0
    316c:	021e      	lsls	r6, r3, #8
    316e:	d53c      	bpl.n	31ea <__aeabi_dsub+0x24e>
    3170:	485c      	ldr	r0, [pc, #368]	; (32e4 <__aeabi_dsub+0x348>)
    3172:	1c7e      	adds	r6, r7, #1
    3174:	4286      	cmp	r6, r0
    3176:	d100      	bne.n	317a <__aeabi_dsub+0x1de>
    3178:	e177      	b.n	346a <__aeabi_dsub+0x4ce>
    317a:	495b      	ldr	r1, [pc, #364]	; (32e8 <__aeabi_dsub+0x34c>)
    317c:	2201      	movs	r2, #1
    317e:	402a      	ands	r2, r5
    3180:	400b      	ands	r3, r1
    3182:	0868      	lsrs	r0, r5, #1
    3184:	1c15      	adds	r5, r2, #0
    3186:	07d9      	lsls	r1, r3, #31
    3188:	4305      	orrs	r5, r0
    318a:	430d      	orrs	r5, r1
    318c:	085b      	lsrs	r3, r3, #1
    318e:	1cb9      	adds	r1, r7, #2
    3190:	1c37      	adds	r7, r6, #0
    3192:	e795      	b.n	30c0 <__aeabi_dsub+0x124>
    3194:	4301      	orrs	r1, r0
    3196:	d100      	bne.n	319a <__aeabi_dsub+0x1fe>
    3198:	e71d      	b.n	2fd6 <__aeabi_dsub+0x3a>
    319a:	e71e      	b.n	2fda <__aeabi_dsub+0x3e>
    319c:	1c71      	adds	r1, r6, #1
    319e:	1c37      	adds	r7, r6, #0
    31a0:	260f      	movs	r6, #15
    31a2:	4663      	mov	r3, ip
    31a4:	402e      	ands	r6, r5
    31a6:	2e04      	cmp	r6, #4
    31a8:	d000      	beq.n	31ac <__aeabi_dsub+0x210>
    31aa:	e78e      	b.n	30ca <__aeabi_dsub+0x12e>
    31ac:	2201      	movs	r2, #1
    31ae:	4014      	ands	r4, r2
    31b0:	1c2e      	adds	r6, r5, #0
    31b2:	e791      	b.n	30d8 <__aeabi_dsub+0x13c>
    31b4:	4652      	mov	r2, sl
    31b6:	4302      	orrs	r2, r0
    31b8:	d0f0      	beq.n	319c <__aeabi_dsub+0x200>
    31ba:	3b01      	subs	r3, #1
    31bc:	2b00      	cmp	r3, #0
    31be:	d109      	bne.n	31d4 <__aeabi_dsub+0x238>
    31c0:	4657      	mov	r7, sl
    31c2:	1979      	adds	r1, r7, r5
    31c4:	42a9      	cmp	r1, r5
    31c6:	4192      	sbcs	r2, r2
    31c8:	4255      	negs	r5, r2
    31ca:	4460      	add	r0, ip
    31cc:	1943      	adds	r3, r0, r5
    31ce:	1c37      	adds	r7, r6, #0
    31d0:	1c0d      	adds	r5, r1, #0
    31d2:	e7cb      	b.n	316c <__aeabi_dsub+0x1d0>
    31d4:	4943      	ldr	r1, [pc, #268]	; (32e4 <__aeabi_dsub+0x348>)
    31d6:	428e      	cmp	r6, r1
    31d8:	d1b6      	bne.n	3148 <__aeabi_dsub+0x1ac>
    31da:	2080      	movs	r0, #128	; 0x80
    31dc:	4663      	mov	r3, ip
    31de:	0101      	lsls	r1, r0, #4
    31e0:	1c37      	adds	r7, r6, #0
    31e2:	e76d      	b.n	30c0 <__aeabi_dsub+0x124>
    31e4:	1abf      	subs	r7, r7, r2
    31e6:	4a40      	ldr	r2, [pc, #256]	; (32e8 <__aeabi_dsub+0x34c>)
    31e8:	4013      	ands	r3, r2
    31ea:	1c79      	adds	r1, r7, #1
    31ec:	e768      	b.n	30c0 <__aeabi_dsub+0x124>
    31ee:	1c15      	adds	r5, r2, #0
    31f0:	431d      	orrs	r5, r3
    31f2:	d100      	bne.n	31f6 <__aeabi_dsub+0x25a>
    31f4:	e220      	b.n	3638 <__aeabi_dsub+0x69c>
    31f6:	2f00      	cmp	r7, #0
    31f8:	d03e      	beq.n	3278 <__aeabi_dsub+0x2dc>
    31fa:	2680      	movs	r6, #128	; 0x80
    31fc:	0331      	lsls	r1, r6, #12
    31fe:	430b      	orrs	r3, r1
    3200:	e77d      	b.n	30fe <__aeabi_dsub+0x162>
    3202:	2f00      	cmp	r7, #0
    3204:	d000      	beq.n	3208 <__aeabi_dsub+0x26c>
    3206:	e085      	b.n	3314 <__aeabi_dsub+0x378>
    3208:	1c72      	adds	r2, r6, #1
    320a:	0551      	lsls	r1, r2, #21
    320c:	0d4b      	lsrs	r3, r1, #21
    320e:	2b01      	cmp	r3, #1
    3210:	dc00      	bgt.n	3214 <__aeabi_dsub+0x278>
    3212:	e0ef      	b.n	33f4 <__aeabi_dsub+0x458>
    3214:	4657      	mov	r7, sl
    3216:	1bea      	subs	r2, r5, r7
    3218:	4295      	cmp	r5, r2
    321a:	419b      	sbcs	r3, r3
    321c:	4667      	mov	r7, ip
    321e:	1a39      	subs	r1, r7, r0
    3220:	425b      	negs	r3, r3
    3222:	1ac9      	subs	r1, r1, r3
    3224:	4688      	mov	r8, r1
    3226:	020b      	lsls	r3, r1, #8
    3228:	d400      	bmi.n	322c <__aeabi_dsub+0x290>
    322a:	e09c      	b.n	3366 <__aeabi_dsub+0x3ca>
    322c:	4654      	mov	r4, sl
    322e:	1b65      	subs	r5, r4, r5
    3230:	45aa      	cmp	sl, r5
    3232:	4192      	sbcs	r2, r2
    3234:	1bc0      	subs	r0, r0, r7
    3236:	4257      	negs	r7, r2
    3238:	1bc3      	subs	r3, r0, r7
    323a:	4698      	mov	r8, r3
    323c:	1c37      	adds	r7, r6, #0
    323e:	464c      	mov	r4, r9
    3240:	e713      	b.n	306a <__aeabi_dsub+0xce>
    3242:	1c0e      	adds	r6, r1, #0
    3244:	2300      	movs	r3, #0
    3246:	2200      	movs	r2, #0
    3248:	e75d      	b.n	3106 <__aeabi_dsub+0x16a>
    324a:	1c28      	adds	r0, r5, #0
    324c:	f000 fa90 	bl	3770 <__clzsi2>
    3250:	3020      	adds	r0, #32
    3252:	1c02      	adds	r2, r0, #0
    3254:	3a08      	subs	r2, #8
    3256:	2a1f      	cmp	r2, #31
    3258:	dc00      	bgt.n	325c <__aeabi_dsub+0x2c0>
    325a:	e712      	b.n	3082 <__aeabi_dsub+0xe6>
    325c:	3828      	subs	r0, #40	; 0x28
    325e:	4085      	lsls	r5, r0
    3260:	1c2b      	adds	r3, r5, #0
    3262:	2500      	movs	r5, #0
    3264:	e716      	b.n	3094 <__aeabi_dsub+0xf8>
    3266:	4657      	mov	r7, sl
    3268:	4338      	orrs	r0, r7
    326a:	2300      	movs	r3, #0
    326c:	2200      	movs	r2, #0
    326e:	2800      	cmp	r0, #0
    3270:	d100      	bne.n	3274 <__aeabi_dsub+0x2d8>
    3272:	e6eb      	b.n	304c <__aeabi_dsub+0xb0>
    3274:	2201      	movs	r2, #1
    3276:	e6e9      	b.n	304c <__aeabi_dsub+0xb0>
    3278:	0318      	lsls	r0, r3, #12
    327a:	0b03      	lsrs	r3, r0, #12
    327c:	2600      	movs	r6, #0
    327e:	e742      	b.n	3106 <__aeabi_dsub+0x16a>
    3280:	2b00      	cmp	r3, #0
    3282:	d000      	beq.n	3286 <__aeabi_dsub+0x2ea>
    3284:	e0d8      	b.n	3438 <__aeabi_dsub+0x49c>
    3286:	1c77      	adds	r7, r6, #1
    3288:	0579      	lsls	r1, r7, #21
    328a:	0d4a      	lsrs	r2, r1, #21
    328c:	2a01      	cmp	r2, #1
    328e:	dc00      	bgt.n	3292 <__aeabi_dsub+0x2f6>
    3290:	e094      	b.n	33bc <__aeabi_dsub+0x420>
    3292:	4b14      	ldr	r3, [pc, #80]	; (32e4 <__aeabi_dsub+0x348>)
    3294:	429f      	cmp	r7, r3
    3296:	d100      	bne.n	329a <__aeabi_dsub+0x2fe>
    3298:	e0fd      	b.n	3496 <__aeabi_dsub+0x4fa>
    329a:	4651      	mov	r1, sl
    329c:	1949      	adds	r1, r1, r5
    329e:	42a9      	cmp	r1, r5
    32a0:	41ad      	sbcs	r5, r5
    32a2:	4662      	mov	r2, ip
    32a4:	426b      	negs	r3, r5
    32a6:	1880      	adds	r0, r0, r2
    32a8:	18c2      	adds	r2, r0, r3
    32aa:	0849      	lsrs	r1, r1, #1
    32ac:	07d5      	lsls	r5, r2, #31
    32ae:	430d      	orrs	r5, r1
    32b0:	0853      	lsrs	r3, r2, #1
    32b2:	1cb1      	adds	r1, r6, #2
    32b4:	e704      	b.n	30c0 <__aeabi_dsub+0x124>
    32b6:	490b      	ldr	r1, [pc, #44]	; (32e4 <__aeabi_dsub+0x348>)
    32b8:	428e      	cmp	r6, r1
    32ba:	d000      	beq.n	32be <__aeabi_dsub+0x322>
    32bc:	e6b1      	b.n	3022 <__aeabi_dsub+0x86>
    32be:	e78c      	b.n	31da <__aeabi_dsub+0x23e>
    32c0:	1c06      	adds	r6, r0, #0
    32c2:	3e1f      	subs	r6, #31
    32c4:	1c1f      	adds	r7, r3, #0
    32c6:	40f7      	lsrs	r7, r6
    32c8:	1c3e      	adds	r6, r7, #0
    32ca:	2920      	cmp	r1, #32
    32cc:	d072      	beq.n	33b4 <__aeabi_dsub+0x418>
    32ce:	223f      	movs	r2, #63	; 0x3f
    32d0:	1a10      	subs	r0, r2, r0
    32d2:	4083      	lsls	r3, r0
    32d4:	431d      	orrs	r5, r3
    32d6:	1e6b      	subs	r3, r5, #1
    32d8:	419d      	sbcs	r5, r3
    32da:	4335      	orrs	r5, r6
    32dc:	2101      	movs	r1, #1
    32de:	2300      	movs	r3, #0
    32e0:	2700      	movs	r7, #0
    32e2:	e6ed      	b.n	30c0 <__aeabi_dsub+0x124>
    32e4:	000007ff 	.word	0x000007ff
    32e8:	ff7fffff 	.word	0xff7fffff
    32ec:	800fffff 	.word	0x800fffff
    32f0:	1c3b      	adds	r3, r7, #0
    32f2:	3b20      	subs	r3, #32
    32f4:	1c01      	adds	r1, r0, #0
    32f6:	40d9      	lsrs	r1, r3
    32f8:	1c0b      	adds	r3, r1, #0
    32fa:	2f20      	cmp	r7, #32
    32fc:	d05c      	beq.n	33b8 <__aeabi_dsub+0x41c>
    32fe:	2240      	movs	r2, #64	; 0x40
    3300:	1bd7      	subs	r7, r2, r7
    3302:	40b8      	lsls	r0, r7
    3304:	1c02      	adds	r2, r0, #0
    3306:	4650      	mov	r0, sl
    3308:	4302      	orrs	r2, r0
    330a:	1e51      	subs	r1, r2, #1
    330c:	418a      	sbcs	r2, r1
    330e:	431a      	orrs	r2, r3
    3310:	2300      	movs	r3, #0
    3312:	e69b      	b.n	304c <__aeabi_dsub+0xb0>
    3314:	427f      	negs	r7, r7
    3316:	2e00      	cmp	r6, #0
    3318:	d040      	beq.n	339c <__aeabi_dsub+0x400>
    331a:	4cca      	ldr	r4, [pc, #808]	; (3644 <__aeabi_dsub+0x6a8>)
    331c:	42a2      	cmp	r2, r4
    331e:	d100      	bne.n	3322 <__aeabi_dsub+0x386>
    3320:	e11f      	b.n	3562 <__aeabi_dsub+0x5c6>
    3322:	2180      	movs	r1, #128	; 0x80
    3324:	4666      	mov	r6, ip
    3326:	040b      	lsls	r3, r1, #16
    3328:	431e      	orrs	r6, r3
    332a:	46b4      	mov	ip, r6
    332c:	2f38      	cmp	r7, #56	; 0x38
    332e:	dd00      	ble.n	3332 <__aeabi_dsub+0x396>
    3330:	e0a9      	b.n	3486 <__aeabi_dsub+0x4ea>
    3332:	2f1f      	cmp	r7, #31
    3334:	dd00      	ble.n	3338 <__aeabi_dsub+0x39c>
    3336:	e13d      	b.n	35b4 <__aeabi_dsub+0x618>
    3338:	2320      	movs	r3, #32
    333a:	1bde      	subs	r6, r3, r7
    333c:	1c29      	adds	r1, r5, #0
    333e:	4664      	mov	r4, ip
    3340:	40b4      	lsls	r4, r6
    3342:	40f9      	lsrs	r1, r7
    3344:	40b5      	lsls	r5, r6
    3346:	1e6b      	subs	r3, r5, #1
    3348:	419d      	sbcs	r5, r3
    334a:	4321      	orrs	r1, r4
    334c:	4663      	mov	r3, ip
    334e:	430d      	orrs	r5, r1
    3350:	40fb      	lsrs	r3, r7
    3352:	4657      	mov	r7, sl
    3354:	1b7d      	subs	r5, r7, r5
    3356:	1ac0      	subs	r0, r0, r3
    3358:	45aa      	cmp	sl, r5
    335a:	419b      	sbcs	r3, r3
    335c:	425f      	negs	r7, r3
    335e:	1bc3      	subs	r3, r0, r7
    3360:	464c      	mov	r4, r9
    3362:	1c17      	adds	r7, r2, #0
    3364:	e67b      	b.n	305e <__aeabi_dsub+0xc2>
    3366:	1c0d      	adds	r5, r1, #0
    3368:	4315      	orrs	r5, r2
    336a:	d120      	bne.n	33ae <__aeabi_dsub+0x412>
    336c:	2400      	movs	r4, #0
    336e:	2101      	movs	r1, #1
    3370:	2300      	movs	r3, #0
    3372:	2604      	movs	r6, #4
    3374:	2700      	movs	r7, #0
    3376:	e6af      	b.n	30d8 <__aeabi_dsub+0x13c>
    3378:	2b1f      	cmp	r3, #31
    337a:	dc4a      	bgt.n	3412 <__aeabi_dsub+0x476>
    337c:	2120      	movs	r1, #32
    337e:	1ac9      	subs	r1, r1, r3
    3380:	1c07      	adds	r7, r0, #0
    3382:	4652      	mov	r2, sl
    3384:	408f      	lsls	r7, r1
    3386:	40da      	lsrs	r2, r3
    3388:	433a      	orrs	r2, r7
    338a:	4657      	mov	r7, sl
    338c:	408f      	lsls	r7, r1
    338e:	1c39      	adds	r1, r7, #0
    3390:	1e4f      	subs	r7, r1, #1
    3392:	41b9      	sbcs	r1, r7
    3394:	40d8      	lsrs	r0, r3
    3396:	430a      	orrs	r2, r1
    3398:	1c07      	adds	r7, r0, #0
    339a:	e6df      	b.n	315c <__aeabi_dsub+0x1c0>
    339c:	4664      	mov	r4, ip
    339e:	432c      	orrs	r4, r5
    33a0:	d169      	bne.n	3476 <__aeabi_dsub+0x4da>
    33a2:	1c51      	adds	r1, r2, #1
    33a4:	1c03      	adds	r3, r0, #0
    33a6:	4655      	mov	r5, sl
    33a8:	1c17      	adds	r7, r2, #0
    33aa:	464c      	mov	r4, r9
    33ac:	e688      	b.n	30c0 <__aeabi_dsub+0x124>
    33ae:	1c15      	adds	r5, r2, #0
    33b0:	1c37      	adds	r7, r6, #0
    33b2:	e65a      	b.n	306a <__aeabi_dsub+0xce>
    33b4:	2300      	movs	r3, #0
    33b6:	e78d      	b.n	32d4 <__aeabi_dsub+0x338>
    33b8:	2200      	movs	r2, #0
    33ba:	e7a4      	b.n	3306 <__aeabi_dsub+0x36a>
    33bc:	4667      	mov	r7, ip
    33be:	432f      	orrs	r7, r5
    33c0:	2e00      	cmp	r6, #0
    33c2:	d000      	beq.n	33c6 <__aeabi_dsub+0x42a>
    33c4:	e0d4      	b.n	3570 <__aeabi_dsub+0x5d4>
    33c6:	2f00      	cmp	r7, #0
    33c8:	d100      	bne.n	33cc <__aeabi_dsub+0x430>
    33ca:	e126      	b.n	361a <__aeabi_dsub+0x67e>
    33cc:	4653      	mov	r3, sl
    33ce:	4303      	orrs	r3, r0
    33d0:	d100      	bne.n	33d4 <__aeabi_dsub+0x438>
    33d2:	e0e4      	b.n	359e <__aeabi_dsub+0x602>
    33d4:	4651      	mov	r1, sl
    33d6:	194f      	adds	r7, r1, r5
    33d8:	42af      	cmp	r7, r5
    33da:	41ad      	sbcs	r5, r5
    33dc:	4460      	add	r0, ip
    33de:	426e      	negs	r6, r5
    33e0:	1983      	adds	r3, r0, r6
    33e2:	021e      	lsls	r6, r3, #8
    33e4:	d400      	bmi.n	33e8 <__aeabi_dsub+0x44c>
    33e6:	e14e      	b.n	3686 <__aeabi_dsub+0x6ea>
    33e8:	4897      	ldr	r0, [pc, #604]	; (3648 <__aeabi_dsub+0x6ac>)
    33ea:	1c3d      	adds	r5, r7, #0
    33ec:	4003      	ands	r3, r0
    33ee:	2102      	movs	r1, #2
    33f0:	2701      	movs	r7, #1
    33f2:	e665      	b.n	30c0 <__aeabi_dsub+0x124>
    33f4:	4661      	mov	r1, ip
    33f6:	4329      	orrs	r1, r5
    33f8:	2e00      	cmp	r6, #0
    33fa:	d129      	bne.n	3450 <__aeabi_dsub+0x4b4>
    33fc:	2900      	cmp	r1, #0
    33fe:	d176      	bne.n	34ee <__aeabi_dsub+0x552>
    3400:	4651      	mov	r1, sl
    3402:	4301      	orrs	r1, r0
    3404:	d0b2      	beq.n	336c <__aeabi_dsub+0x3d0>
    3406:	1c03      	adds	r3, r0, #0
    3408:	4655      	mov	r5, sl
    340a:	464c      	mov	r4, r9
    340c:	2101      	movs	r1, #1
    340e:	2700      	movs	r7, #0
    3410:	e656      	b.n	30c0 <__aeabi_dsub+0x124>
    3412:	1c1f      	adds	r7, r3, #0
    3414:	3f20      	subs	r7, #32
    3416:	1c01      	adds	r1, r0, #0
    3418:	40f9      	lsrs	r1, r7
    341a:	1c0f      	adds	r7, r1, #0
    341c:	2b20      	cmp	r3, #32
    341e:	d100      	bne.n	3422 <__aeabi_dsub+0x486>
    3420:	e0c6      	b.n	35b0 <__aeabi_dsub+0x614>
    3422:	2240      	movs	r2, #64	; 0x40
    3424:	1ad3      	subs	r3, r2, r3
    3426:	4098      	lsls	r0, r3
    3428:	1c02      	adds	r2, r0, #0
    342a:	4650      	mov	r0, sl
    342c:	4302      	orrs	r2, r0
    342e:	1e53      	subs	r3, r2, #1
    3430:	419a      	sbcs	r2, r3
    3432:	433a      	orrs	r2, r7
    3434:	2700      	movs	r7, #0
    3436:	e691      	b.n	315c <__aeabi_dsub+0x1c0>
    3438:	425b      	negs	r3, r3
    343a:	2e00      	cmp	r6, #0
    343c:	d130      	bne.n	34a0 <__aeabi_dsub+0x504>
    343e:	4667      	mov	r7, ip
    3440:	432f      	orrs	r7, r5
    3442:	d000      	beq.n	3446 <__aeabi_dsub+0x4aa>
    3444:	e0c8      	b.n	35d8 <__aeabi_dsub+0x63c>
    3446:	1c51      	adds	r1, r2, #1
    3448:	1c03      	adds	r3, r0, #0
    344a:	4655      	mov	r5, sl
    344c:	1c17      	adds	r7, r2, #0
    344e:	e637      	b.n	30c0 <__aeabi_dsub+0x124>
    3450:	2900      	cmp	r1, #0
    3452:	d165      	bne.n	3520 <__aeabi_dsub+0x584>
    3454:	4657      	mov	r7, sl
    3456:	4307      	orrs	r7, r0
    3458:	d100      	bne.n	345c <__aeabi_dsub+0x4c0>
    345a:	e0c8      	b.n	35ee <__aeabi_dsub+0x652>
    345c:	1c03      	adds	r3, r0, #0
    345e:	2080      	movs	r0, #128	; 0x80
    3460:	4655      	mov	r5, sl
    3462:	464c      	mov	r4, r9
    3464:	0101      	lsls	r1, r0, #4
    3466:	4f77      	ldr	r7, [pc, #476]	; (3644 <__aeabi_dsub+0x6a8>)
    3468:	e62a      	b.n	30c0 <__aeabi_dsub+0x124>
    346a:	2380      	movs	r3, #128	; 0x80
    346c:	1c37      	adds	r7, r6, #0
    346e:	0119      	lsls	r1, r3, #4
    3470:	2604      	movs	r6, #4
    3472:	2300      	movs	r3, #0
    3474:	e630      	b.n	30d8 <__aeabi_dsub+0x13c>
    3476:	3f01      	subs	r7, #1
    3478:	2f00      	cmp	r7, #0
    347a:	d16e      	bne.n	355a <__aeabi_dsub+0x5be>
    347c:	4654      	mov	r4, sl
    347e:	4661      	mov	r1, ip
    3480:	1b65      	subs	r5, r4, r5
    3482:	1a40      	subs	r0, r0, r1
    3484:	e768      	b.n	3358 <__aeabi_dsub+0x3bc>
    3486:	4667      	mov	r7, ip
    3488:	433d      	orrs	r5, r7
    348a:	2300      	movs	r3, #0
    348c:	2d00      	cmp	r5, #0
    348e:	d100      	bne.n	3492 <__aeabi_dsub+0x4f6>
    3490:	e75f      	b.n	3352 <__aeabi_dsub+0x3b6>
    3492:	2501      	movs	r5, #1
    3494:	e75d      	b.n	3352 <__aeabi_dsub+0x3b6>
    3496:	2680      	movs	r6, #128	; 0x80
    3498:	0131      	lsls	r1, r6, #4
    349a:	2300      	movs	r3, #0
    349c:	2604      	movs	r6, #4
    349e:	e61b      	b.n	30d8 <__aeabi_dsub+0x13c>
    34a0:	4968      	ldr	r1, [pc, #416]	; (3644 <__aeabi_dsub+0x6a8>)
    34a2:	428a      	cmp	r2, r1
    34a4:	d100      	bne.n	34a8 <__aeabi_dsub+0x50c>
    34a6:	e0c1      	b.n	362c <__aeabi_dsub+0x690>
    34a8:	2780      	movs	r7, #128	; 0x80
    34aa:	4666      	mov	r6, ip
    34ac:	0439      	lsls	r1, r7, #16
    34ae:	430e      	orrs	r6, r1
    34b0:	46b4      	mov	ip, r6
    34b2:	2b38      	cmp	r3, #56	; 0x38
    34b4:	dd00      	ble.n	34b8 <__aeabi_dsub+0x51c>
    34b6:	e0a2      	b.n	35fe <__aeabi_dsub+0x662>
    34b8:	2b1f      	cmp	r3, #31
    34ba:	dd00      	ble.n	34be <__aeabi_dsub+0x522>
    34bc:	e0d0      	b.n	3660 <__aeabi_dsub+0x6c4>
    34be:	2120      	movs	r1, #32
    34c0:	1ac9      	subs	r1, r1, r3
    34c2:	1c2e      	adds	r6, r5, #0
    34c4:	4667      	mov	r7, ip
    34c6:	408f      	lsls	r7, r1
    34c8:	408d      	lsls	r5, r1
    34ca:	40de      	lsrs	r6, r3
    34cc:	433e      	orrs	r6, r7
    34ce:	1c29      	adds	r1, r5, #0
    34d0:	4667      	mov	r7, ip
    34d2:	1e4d      	subs	r5, r1, #1
    34d4:	41a9      	sbcs	r1, r5
    34d6:	40df      	lsrs	r7, r3
    34d8:	1c35      	adds	r5, r6, #0
    34da:	430d      	orrs	r5, r1
    34dc:	1c3e      	adds	r6, r7, #0
    34de:	4455      	add	r5, sl
    34e0:	4555      	cmp	r5, sl
    34e2:	419b      	sbcs	r3, r3
    34e4:	1830      	adds	r0, r6, r0
    34e6:	425e      	negs	r6, r3
    34e8:	1983      	adds	r3, r0, r6
    34ea:	1c17      	adds	r7, r2, #0
    34ec:	e63e      	b.n	316c <__aeabi_dsub+0x1d0>
    34ee:	4656      	mov	r6, sl
    34f0:	4306      	orrs	r6, r0
    34f2:	d054      	beq.n	359e <__aeabi_dsub+0x602>
    34f4:	4657      	mov	r7, sl
    34f6:	1bea      	subs	r2, r5, r7
    34f8:	4663      	mov	r3, ip
    34fa:	4295      	cmp	r5, r2
    34fc:	41b6      	sbcs	r6, r6
    34fe:	1a19      	subs	r1, r3, r0
    3500:	4273      	negs	r3, r6
    3502:	1acb      	subs	r3, r1, r3
    3504:	021e      	lsls	r6, r3, #8
    3506:	d400      	bmi.n	350a <__aeabi_dsub+0x56e>
    3508:	e0a2      	b.n	3650 <__aeabi_dsub+0x6b4>
    350a:	1b7d      	subs	r5, r7, r5
    350c:	4664      	mov	r4, ip
    350e:	45aa      	cmp	sl, r5
    3510:	41bf      	sbcs	r7, r7
    3512:	1b00      	subs	r0, r0, r4
    3514:	427a      	negs	r2, r7
    3516:	1a83      	subs	r3, r0, r2
    3518:	464c      	mov	r4, r9
    351a:	2101      	movs	r1, #1
    351c:	2700      	movs	r7, #0
    351e:	e5cf      	b.n	30c0 <__aeabi_dsub+0x124>
    3520:	4656      	mov	r6, sl
    3522:	4306      	orrs	r6, r0
    3524:	d03f      	beq.n	35a6 <__aeabi_dsub+0x60a>
    3526:	4662      	mov	r2, ip
    3528:	2180      	movs	r1, #128	; 0x80
    352a:	0757      	lsls	r7, r2, #29
    352c:	08ed      	lsrs	r5, r5, #3
    352e:	08d3      	lsrs	r3, r2, #3
    3530:	030a      	lsls	r2, r1, #12
    3532:	433d      	orrs	r5, r7
    3534:	4213      	tst	r3, r2
    3536:	d008      	beq.n	354a <__aeabi_dsub+0x5ae>
    3538:	08c6      	lsrs	r6, r0, #3
    353a:	4216      	tst	r6, r2
    353c:	d105      	bne.n	354a <__aeabi_dsub+0x5ae>
    353e:	4655      	mov	r5, sl
    3540:	08ec      	lsrs	r4, r5, #3
    3542:	0745      	lsls	r5, r0, #29
    3544:	4325      	orrs	r5, r4
    3546:	1c33      	adds	r3, r6, #0
    3548:	464c      	mov	r4, r9
    354a:	0f68      	lsrs	r0, r5, #29
    354c:	00db      	lsls	r3, r3, #3
    354e:	2680      	movs	r6, #128	; 0x80
    3550:	4303      	orrs	r3, r0
    3552:	00ed      	lsls	r5, r5, #3
    3554:	0131      	lsls	r1, r6, #4
    3556:	4f3b      	ldr	r7, [pc, #236]	; (3644 <__aeabi_dsub+0x6a8>)
    3558:	e5b2      	b.n	30c0 <__aeabi_dsub+0x124>
    355a:	493a      	ldr	r1, [pc, #232]	; (3644 <__aeabi_dsub+0x6a8>)
    355c:	428a      	cmp	r2, r1
    355e:	d000      	beq.n	3562 <__aeabi_dsub+0x5c6>
    3560:	e6e4      	b.n	332c <__aeabi_dsub+0x390>
    3562:	2680      	movs	r6, #128	; 0x80
    3564:	1c03      	adds	r3, r0, #0
    3566:	4655      	mov	r5, sl
    3568:	464c      	mov	r4, r9
    356a:	0131      	lsls	r1, r6, #4
    356c:	1c17      	adds	r7, r2, #0
    356e:	e5a7      	b.n	30c0 <__aeabi_dsub+0x124>
    3570:	2f00      	cmp	r7, #0
    3572:	d04c      	beq.n	360e <__aeabi_dsub+0x672>
    3574:	4653      	mov	r3, sl
    3576:	4303      	orrs	r3, r0
    3578:	d015      	beq.n	35a6 <__aeabi_dsub+0x60a>
    357a:	4662      	mov	r2, ip
    357c:	2680      	movs	r6, #128	; 0x80
    357e:	08ed      	lsrs	r5, r5, #3
    3580:	0751      	lsls	r1, r2, #29
    3582:	08d3      	lsrs	r3, r2, #3
    3584:	0337      	lsls	r7, r6, #12
    3586:	430d      	orrs	r5, r1
    3588:	423b      	tst	r3, r7
    358a:	d0de      	beq.n	354a <__aeabi_dsub+0x5ae>
    358c:	08c2      	lsrs	r2, r0, #3
    358e:	423a      	tst	r2, r7
    3590:	d1db      	bne.n	354a <__aeabi_dsub+0x5ae>
    3592:	4655      	mov	r5, sl
    3594:	08e9      	lsrs	r1, r5, #3
    3596:	0745      	lsls	r5, r0, #29
    3598:	1c13      	adds	r3, r2, #0
    359a:	430d      	orrs	r5, r1
    359c:	e7d5      	b.n	354a <__aeabi_dsub+0x5ae>
    359e:	4663      	mov	r3, ip
    35a0:	2101      	movs	r1, #1
    35a2:	2700      	movs	r7, #0
    35a4:	e58c      	b.n	30c0 <__aeabi_dsub+0x124>
    35a6:	2780      	movs	r7, #128	; 0x80
    35a8:	0139      	lsls	r1, r7, #4
    35aa:	4663      	mov	r3, ip
    35ac:	4f25      	ldr	r7, [pc, #148]	; (3644 <__aeabi_dsub+0x6a8>)
    35ae:	e587      	b.n	30c0 <__aeabi_dsub+0x124>
    35b0:	2200      	movs	r2, #0
    35b2:	e73a      	b.n	342a <__aeabi_dsub+0x48e>
    35b4:	1c3c      	adds	r4, r7, #0
    35b6:	3c20      	subs	r4, #32
    35b8:	4666      	mov	r6, ip
    35ba:	40e6      	lsrs	r6, r4
    35bc:	1c33      	adds	r3, r6, #0
    35be:	2f20      	cmp	r7, #32
    35c0:	d05f      	beq.n	3682 <__aeabi_dsub+0x6e6>
    35c2:	2440      	movs	r4, #64	; 0x40
    35c4:	1be7      	subs	r7, r4, r7
    35c6:	4666      	mov	r6, ip
    35c8:	40be      	lsls	r6, r7
    35ca:	1c31      	adds	r1, r6, #0
    35cc:	430d      	orrs	r5, r1
    35ce:	1e69      	subs	r1, r5, #1
    35d0:	418d      	sbcs	r5, r1
    35d2:	431d      	orrs	r5, r3
    35d4:	2300      	movs	r3, #0
    35d6:	e6bc      	b.n	3352 <__aeabi_dsub+0x3b6>
    35d8:	3b01      	subs	r3, #1
    35da:	2b00      	cmp	r3, #0
    35dc:	d122      	bne.n	3624 <__aeabi_dsub+0x688>
    35de:	4455      	add	r5, sl
    35e0:	4555      	cmp	r5, sl
    35e2:	41bf      	sbcs	r7, r7
    35e4:	427b      	negs	r3, r7
    35e6:	4460      	add	r0, ip
    35e8:	18c3      	adds	r3, r0, r3
    35ea:	1c17      	adds	r7, r2, #0
    35ec:	e5be      	b.n	316c <__aeabi_dsub+0x1d0>
    35ee:	2180      	movs	r1, #128	; 0x80
    35f0:	2204      	movs	r2, #4
    35f2:	2400      	movs	r4, #0
    35f4:	0109      	lsls	r1, r1, #4
    35f6:	4b15      	ldr	r3, [pc, #84]	; (364c <__aeabi_dsub+0x6b0>)
    35f8:	4256      	negs	r6, r2
    35fa:	4f12      	ldr	r7, [pc, #72]	; (3644 <__aeabi_dsub+0x6a8>)
    35fc:	e56c      	b.n	30d8 <__aeabi_dsub+0x13c>
    35fe:	4663      	mov	r3, ip
    3600:	431d      	orrs	r5, r3
    3602:	2600      	movs	r6, #0
    3604:	2d00      	cmp	r5, #0
    3606:	d100      	bne.n	360a <__aeabi_dsub+0x66e>
    3608:	e769      	b.n	34de <__aeabi_dsub+0x542>
    360a:	2501      	movs	r5, #1
    360c:	e767      	b.n	34de <__aeabi_dsub+0x542>
    360e:	2280      	movs	r2, #128	; 0x80
    3610:	1c03      	adds	r3, r0, #0
    3612:	4655      	mov	r5, sl
    3614:	0111      	lsls	r1, r2, #4
    3616:	4f0b      	ldr	r7, [pc, #44]	; (3644 <__aeabi_dsub+0x6a8>)
    3618:	e552      	b.n	30c0 <__aeabi_dsub+0x124>
    361a:	1c03      	adds	r3, r0, #0
    361c:	4655      	mov	r5, sl
    361e:	2101      	movs	r1, #1
    3620:	2700      	movs	r7, #0
    3622:	e54d      	b.n	30c0 <__aeabi_dsub+0x124>
    3624:	4907      	ldr	r1, [pc, #28]	; (3644 <__aeabi_dsub+0x6a8>)
    3626:	428a      	cmp	r2, r1
    3628:	d000      	beq.n	362c <__aeabi_dsub+0x690>
    362a:	e742      	b.n	34b2 <__aeabi_dsub+0x516>
    362c:	2180      	movs	r1, #128	; 0x80
    362e:	1c03      	adds	r3, r0, #0
    3630:	4655      	mov	r5, sl
    3632:	0109      	lsls	r1, r1, #4
    3634:	1c17      	adds	r7, r2, #0
    3636:	e543      	b.n	30c0 <__aeabi_dsub+0x124>
    3638:	057a      	lsls	r2, r7, #21
    363a:	0d56      	lsrs	r6, r2, #21
    363c:	2300      	movs	r3, #0
    363e:	2200      	movs	r2, #0
    3640:	e561      	b.n	3106 <__aeabi_dsub+0x16a>
    3642:	46c0      	nop			; (mov r8, r8)
    3644:	000007ff 	.word	0x000007ff
    3648:	ff7fffff 	.word	0xff7fffff
    364c:	007fffff 	.word	0x007fffff
    3650:	1c1d      	adds	r5, r3, #0
    3652:	4315      	orrs	r5, r2
    3654:	d100      	bne.n	3658 <__aeabi_dsub+0x6bc>
    3656:	e689      	b.n	336c <__aeabi_dsub+0x3d0>
    3658:	1c15      	adds	r5, r2, #0
    365a:	2101      	movs	r1, #1
    365c:	2700      	movs	r7, #0
    365e:	e52f      	b.n	30c0 <__aeabi_dsub+0x124>
    3660:	1c1f      	adds	r7, r3, #0
    3662:	3f20      	subs	r7, #32
    3664:	4661      	mov	r1, ip
    3666:	40f9      	lsrs	r1, r7
    3668:	2b20      	cmp	r3, #32
    366a:	d010      	beq.n	368e <__aeabi_dsub+0x6f2>
    366c:	2640      	movs	r6, #64	; 0x40
    366e:	1af3      	subs	r3, r6, r3
    3670:	4667      	mov	r7, ip
    3672:	409f      	lsls	r7, r3
    3674:	1c3b      	adds	r3, r7, #0
    3676:	431d      	orrs	r5, r3
    3678:	1e6b      	subs	r3, r5, #1
    367a:	419d      	sbcs	r5, r3
    367c:	430d      	orrs	r5, r1
    367e:	2600      	movs	r6, #0
    3680:	e72d      	b.n	34de <__aeabi_dsub+0x542>
    3682:	2100      	movs	r1, #0
    3684:	e7a2      	b.n	35cc <__aeabi_dsub+0x630>
    3686:	1c3d      	adds	r5, r7, #0
    3688:	2101      	movs	r1, #1
    368a:	2700      	movs	r7, #0
    368c:	e518      	b.n	30c0 <__aeabi_dsub+0x124>
    368e:	2300      	movs	r3, #0
    3690:	e7f1      	b.n	3676 <__aeabi_dsub+0x6da>
    3692:	46c0      	nop			; (mov r8, r8)

00003694 <__aeabi_d2iz>:
    3694:	4a13      	ldr	r2, [pc, #76]	; (36e4 <__aeabi_d2iz+0x50>)
    3696:	030b      	lsls	r3, r1, #12
    3698:	b530      	push	{r4, r5, lr}
    369a:	1c05      	adds	r5, r0, #0
    369c:	0048      	lsls	r0, r1, #1
    369e:	0b1c      	lsrs	r4, r3, #12
    36a0:	0fc9      	lsrs	r1, r1, #31
    36a2:	0d43      	lsrs	r3, r0, #21
    36a4:	2000      	movs	r0, #0
    36a6:	4293      	cmp	r3, r2
    36a8:	dd11      	ble.n	36ce <__aeabi_d2iz+0x3a>
    36aa:	480f      	ldr	r0, [pc, #60]	; (36e8 <__aeabi_d2iz+0x54>)
    36ac:	4283      	cmp	r3, r0
    36ae:	dc0f      	bgt.n	36d0 <__aeabi_d2iz+0x3c>
    36b0:	2280      	movs	r2, #128	; 0x80
    36b2:	0350      	lsls	r0, r2, #13
    36b4:	4a0d      	ldr	r2, [pc, #52]	; (36ec <__aeabi_d2iz+0x58>)
    36b6:	4304      	orrs	r4, r0
    36b8:	1ad0      	subs	r0, r2, r3
    36ba:	281f      	cmp	r0, #31
    36bc:	dd0b      	ble.n	36d6 <__aeabi_d2iz+0x42>
    36be:	4d0c      	ldr	r5, [pc, #48]	; (36f0 <__aeabi_d2iz+0x5c>)
    36c0:	1aeb      	subs	r3, r5, r3
    36c2:	40dc      	lsrs	r4, r3
    36c4:	1c22      	adds	r2, r4, #0
    36c6:	4250      	negs	r0, r2
    36c8:	2900      	cmp	r1, #0
    36ca:	d100      	bne.n	36ce <__aeabi_d2iz+0x3a>
    36cc:	1c10      	adds	r0, r2, #0
    36ce:	bd30      	pop	{r4, r5, pc}
    36d0:	4c08      	ldr	r4, [pc, #32]	; (36f4 <__aeabi_d2iz+0x60>)
    36d2:	1908      	adds	r0, r1, r4
    36d4:	e7fb      	b.n	36ce <__aeabi_d2iz+0x3a>
    36d6:	40c5      	lsrs	r5, r0
    36d8:	4807      	ldr	r0, [pc, #28]	; (36f8 <__aeabi_d2iz+0x64>)
    36da:	1c2a      	adds	r2, r5, #0
    36dc:	181d      	adds	r5, r3, r0
    36de:	40ac      	lsls	r4, r5
    36e0:	4322      	orrs	r2, r4
    36e2:	e7f0      	b.n	36c6 <__aeabi_d2iz+0x32>
    36e4:	000003fe 	.word	0x000003fe
    36e8:	0000041d 	.word	0x0000041d
    36ec:	00000433 	.word	0x00000433
    36f0:	00000413 	.word	0x00000413
    36f4:	7fffffff 	.word	0x7fffffff
    36f8:	fffffbed 	.word	0xfffffbed

000036fc <__aeabi_i2d>:
    36fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    36fe:	1e04      	subs	r4, r0, #0
    3700:	d02d      	beq.n	375e <__aeabi_i2d+0x62>
    3702:	0fc5      	lsrs	r5, r0, #31
    3704:	d000      	beq.n	3708 <__aeabi_i2d+0xc>
    3706:	4244      	negs	r4, r0
    3708:	1c20      	adds	r0, r4, #0
    370a:	f000 f831 	bl	3770 <__clzsi2>
    370e:	4916      	ldr	r1, [pc, #88]	; (3768 <__aeabi_i2d+0x6c>)
    3710:	1a0a      	subs	r2, r1, r0
    3712:	280a      	cmp	r0, #10
    3714:	dd16      	ble.n	3744 <__aeabi_i2d+0x48>
    3716:	380b      	subs	r0, #11
    3718:	4084      	lsls	r4, r0
    371a:	0557      	lsls	r7, r2, #21
    371c:	0326      	lsls	r6, r4, #12
    371e:	0d7a      	lsrs	r2, r7, #21
    3720:	0b36      	lsrs	r6, r6, #12
    3722:	2700      	movs	r7, #0
    3724:	2000      	movs	r0, #0
    3726:	2100      	movs	r1, #0
    3728:	1c38      	adds	r0, r7, #0
    372a:	0d0f      	lsrs	r7, r1, #20
    372c:	053b      	lsls	r3, r7, #20
    372e:	4c0f      	ldr	r4, [pc, #60]	; (376c <__aeabi_i2d+0x70>)
    3730:	4333      	orrs	r3, r6
    3732:	401c      	ands	r4, r3
    3734:	0516      	lsls	r6, r2, #20
    3736:	4334      	orrs	r4, r6
    3738:	0061      	lsls	r1, r4, #1
    373a:	084a      	lsrs	r2, r1, #1
    373c:	07ed      	lsls	r5, r5, #31
    373e:	1c11      	adds	r1, r2, #0
    3740:	4329      	orrs	r1, r5
    3742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3744:	260b      	movs	r6, #11
    3746:	1c01      	adds	r1, r0, #0
    3748:	1a30      	subs	r0, r6, r0
    374a:	3115      	adds	r1, #21
    374c:	1c23      	adds	r3, r4, #0
    374e:	40c4      	lsrs	r4, r0
    3750:	408b      	lsls	r3, r1
    3752:	0552      	lsls	r2, r2, #21
    3754:	0321      	lsls	r1, r4, #12
    3756:	1c1f      	adds	r7, r3, #0
    3758:	0b0e      	lsrs	r6, r1, #12
    375a:	0d52      	lsrs	r2, r2, #21
    375c:	e7e2      	b.n	3724 <__aeabi_i2d+0x28>
    375e:	2500      	movs	r5, #0
    3760:	2200      	movs	r2, #0
    3762:	2600      	movs	r6, #0
    3764:	2700      	movs	r7, #0
    3766:	e7dd      	b.n	3724 <__aeabi_i2d+0x28>
    3768:	0000041e 	.word	0x0000041e
    376c:	800fffff 	.word	0x800fffff

00003770 <__clzsi2>:
    3770:	211c      	movs	r1, #28
    3772:	2301      	movs	r3, #1
    3774:	041b      	lsls	r3, r3, #16
    3776:	4298      	cmp	r0, r3
    3778:	d301      	bcc.n	377e <__clzsi2+0xe>
    377a:	0c00      	lsrs	r0, r0, #16
    377c:	3910      	subs	r1, #16
    377e:	0a1b      	lsrs	r3, r3, #8
    3780:	4298      	cmp	r0, r3
    3782:	d301      	bcc.n	3788 <__clzsi2+0x18>
    3784:	0a00      	lsrs	r0, r0, #8
    3786:	3908      	subs	r1, #8
    3788:	091b      	lsrs	r3, r3, #4
    378a:	4298      	cmp	r0, r3
    378c:	d301      	bcc.n	3792 <__clzsi2+0x22>
    378e:	0900      	lsrs	r0, r0, #4
    3790:	3904      	subs	r1, #4
    3792:	a202      	add	r2, pc, #8	; (adr r2, 379c <__clzsi2+0x2c>)
    3794:	5c10      	ldrb	r0, [r2, r0]
    3796:	1840      	adds	r0, r0, r1
    3798:	4770      	bx	lr
    379a:	46c0      	nop			; (mov r8, r8)
    379c:	02020304 	.word	0x02020304
    37a0:	01010101 	.word	0x01010101
	...

000037ac <WDog1_Init>:
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* WDog1_Init(LDD_TUserData *UserDataPtr)
{
    37ac:	b580      	push	{r7, lr}
    37ae:	b084      	sub	sp, #16
    37b0:	af00      	add	r7, sp, #0
    37b2:	6078      	str	r0, [r7, #4]
  /* Allocate device structure */
  WDog1_TDeviceData *DeviceDataPrv;

  /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
    37b4:	4b0c      	ldr	r3, [pc, #48]	; (37e8 <WDog1_Init+0x3c>)
    37b6:	60fb      	str	r3, [r7, #12]
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
    37b8:	68fb      	ldr	r3, [r7, #12]
    37ba:	687a      	ldr	r2, [r7, #4]
    37bc:	601a      	str	r2, [r3, #0]
  /* SIM_COPC: ??=0,??=0,??=0,??=0,COPT=3,COPCLKS=0,COPW=0 */
  SIM_COPC = (uint32_t)((SIM_COPC & (uint32_t)~(uint32_t)(
    37be:	4a0b      	ldr	r2, [pc, #44]	; (37ec <WDog1_Init+0x40>)
    37c0:	490a      	ldr	r1, [pc, #40]	; (37ec <WDog1_Init+0x40>)
    37c2:	2388      	movs	r3, #136	; 0x88
    37c4:	015b      	lsls	r3, r3, #5
    37c6:	58cb      	ldr	r3, [r1, r3]
    37c8:	21ff      	movs	r1, #255	; 0xff
    37ca:	438b      	bics	r3, r1
    37cc:	210c      	movs	r1, #12
    37ce:	4319      	orrs	r1, r3
    37d0:	2388      	movs	r3, #136	; 0x88
    37d2:	015b      	lsls	r3, r3, #5
    37d4:	50d1      	str	r1, [r2, r3]
              0xF0U
             )) | (uint32_t)(
              SIM_COPC_COPT(0x03)
             ));                       /* Set control register */
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_WDog1_ID,DeviceDataPrv);
    37d6:	4b06      	ldr	r3, [pc, #24]	; (37f0 <WDog1_Init+0x44>)
    37d8:	68fa      	ldr	r2, [r7, #12]
    37da:	601a      	str	r2, [r3, #0]
  return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
    37dc:	68fb      	ldr	r3, [r7, #12]
}
    37de:	1c18      	adds	r0, r3, #0
    37e0:	46bd      	mov	sp, r7
    37e2:	b004      	add	sp, #16
    37e4:	bd80      	pop	{r7, pc}
    37e6:	46c0      	nop			; (mov r8, r8)
    37e8:	20000000 	.word	0x20000000
    37ec:	40047000 	.word	0x40047000
    37f0:	20000024 	.word	0x20000024

000037f4 <WDog1_Clear>:
**                           the active clock configuration
**                           ERR_DISABLED - The component is disabled
*/
/* ===================================================================*/
LDD_TError WDog1_Clear(LDD_TDeviceData *DeviceDataPtr)
{
    37f4:	b580      	push	{r7, lr}
    37f6:	b084      	sub	sp, #16
    37f8:	af00      	add	r7, sp, #0
    37fa:	6078      	str	r0, [r7, #4]
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  /* Enable test - this test can be disabled by setting the "Ignore enable test"
     property to the "yes" value in the "Configuration inspector" */
  if ((COP_PDD_GetEnableDeviceStatus(SIM_BASE_PTR)) != 0U) {
    37fc:	4a1d      	ldr	r2, [pc, #116]	; (3874 <WDog1_Clear+0x80>)
    37fe:	2388      	movs	r3, #136	; 0x88
    3800:	015b      	lsls	r3, r3, #5
    3802:	58d3      	ldr	r3, [r2, r3]
    3804:	b2db      	uxtb	r3, r3
    3806:	1c1a      	adds	r2, r3, #0
    3808:	230c      	movs	r3, #12
    380a:	4013      	ands	r3, r2
    380c:	d02b      	beq.n	3866 <WDog1_Clear+0x72>
    /* {Default RTOS Adapter} Critical section begin, general PE function is used */
    EnterCritical();
    380e:	1c3b      	adds	r3, r7, #0
    3810:	330f      	adds	r3, #15
    3812:	f3ef 8010 	mrs	r0, PRIMASK
    3816:	b672      	cpsid	i
    3818:	7018      	strb	r0, [r3, #0]
    381a:	4b17      	ldr	r3, [pc, #92]	; (3878 <WDog1_Clear+0x84>)
    381c:	781b      	ldrb	r3, [r3, #0]
    381e:	b2db      	uxtb	r3, r3
    3820:	3301      	adds	r3, #1
    3822:	b2db      	uxtb	r3, r3
    3824:	4a14      	ldr	r2, [pc, #80]	; (3878 <WDog1_Clear+0x84>)
    3826:	1c19      	adds	r1, r3, #0
    3828:	7011      	strb	r1, [r2, #0]
    382a:	2b01      	cmp	r3, #1
    382c:	d104      	bne.n	3838 <WDog1_Clear+0x44>
    382e:	1c3b      	adds	r3, r7, #0
    3830:	330f      	adds	r3, #15
    3832:	781a      	ldrb	r2, [r3, #0]
    3834:	4b11      	ldr	r3, [pc, #68]	; (387c <WDog1_Clear+0x88>)
    3836:	701a      	strb	r2, [r3, #0]
    COP_PDD_WriteServiceReg(SIM_BASE_PTR, COP_PDD_KEY_1);
    3838:	4a0e      	ldr	r2, [pc, #56]	; (3874 <WDog1_Clear+0x80>)
    383a:	4b11      	ldr	r3, [pc, #68]	; (3880 <WDog1_Clear+0x8c>)
    383c:	2155      	movs	r1, #85	; 0x55
    383e:	50d1      	str	r1, [r2, r3]
    COP_PDD_WriteServiceReg(SIM_BASE_PTR, COP_PDD_KEY_2);
    3840:	4a0c      	ldr	r2, [pc, #48]	; (3874 <WDog1_Clear+0x80>)
    3842:	4b0f      	ldr	r3, [pc, #60]	; (3880 <WDog1_Clear+0x8c>)
    3844:	21aa      	movs	r1, #170	; 0xaa
    3846:	50d1      	str	r1, [r2, r3]
    /* {Default RTOS Adapter} Critical section end, general PE function is used */
    ExitCritical();
    3848:	4b0b      	ldr	r3, [pc, #44]	; (3878 <WDog1_Clear+0x84>)
    384a:	781b      	ldrb	r3, [r3, #0]
    384c:	b2db      	uxtb	r3, r3
    384e:	3b01      	subs	r3, #1
    3850:	b2db      	uxtb	r3, r3
    3852:	4a09      	ldr	r2, [pc, #36]	; (3878 <WDog1_Clear+0x84>)
    3854:	1c19      	adds	r1, r3, #0
    3856:	7011      	strb	r1, [r2, #0]
    3858:	2b00      	cmp	r3, #0
    385a:	d106      	bne.n	386a <WDog1_Clear+0x76>
    385c:	4b07      	ldr	r3, [pc, #28]	; (387c <WDog1_Clear+0x88>)
    385e:	7818      	ldrb	r0, [r3, #0]
    3860:	f380 8810 	msr	PRIMASK, r0
    3864:	e001      	b.n	386a <WDog1_Clear+0x76>
  }
  else {
    return ERR_DISABLED;
    3866:	2307      	movs	r3, #7
    3868:	e000      	b.n	386c <WDog1_Clear+0x78>
  }
  return ERR_OK;
    386a:	2300      	movs	r3, #0
}
    386c:	1c18      	adds	r0, r3, #0
    386e:	46bd      	mov	sp, r7
    3870:	b004      	add	sp, #16
    3872:	bd80      	pop	{r7, pc}
    3874:	40047000 	.word	0x40047000
    3878:	200000b4 	.word	0x200000b4
    387c:	20000ad8 	.word	0x20000ad8
    3880:	00001104 	.word	0x00001104

00003884 <ExtIntLdd1_OnInterrupt>:
**         component and eventually invokes other events.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void ExtIntLdd1_OnInterrupt(LDD_TUserData *UserDataPtr)
{
    3884:	b580      	push	{r7, lr}
    3886:	b082      	sub	sp, #8
    3888:	af00      	add	r7, sp, #0
    388a:	6078      	str	r0, [r7, #4]
  (void)UserDataPtr;                   /* Parameter is not used, suppress unused argument warning */
  UartWakeInt_OnInterrupt();           /* Invoke OnInterrupt event */
    388c:	f002 faaa 	bl	5de4 <UartWakeInt_OnInterrupt>
}
    3890:	46bd      	mov	sp, r7
    3892:	b002      	add	sp, #8
    3894:	bd80      	pop	{r7, pc}
    3896:	46c0      	nop			; (mov r8, r8)

00003898 <TimerIntLdd1_Init>:
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* TimerIntLdd1_Init(LDD_TUserData *UserDataPtr)
{
    3898:	b580      	push	{r7, lr}
    389a:	b084      	sub	sp, #16
    389c:	af00      	add	r7, sp, #0
    389e:	6078      	str	r0, [r7, #4]
  /* Allocate device structure */
  TimerIntLdd1_TDeviceData *DeviceDataPrv;
  /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
    38a0:	4b0f      	ldr	r3, [pc, #60]	; (38e0 <TimerIntLdd1_Init+0x48>)
    38a2:	60fb      	str	r3, [r7, #12]
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
    38a4:	68fb      	ldr	r3, [r7, #12]
    38a6:	687a      	ldr	r2, [r7, #4]
    38a8:	609a      	str	r2, [r3, #8]
  DeviceDataPrv->EnUser = TRUE;        /* Set the flag "device enabled" */
    38aa:	68fb      	ldr	r3, [r7, #12]
    38ac:	2201      	movs	r2, #1
    38ae:	711a      	strb	r2, [r3, #4]
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_TimerIntLdd1_ID,DeviceDataPrv);
    38b0:	4b0c      	ldr	r3, [pc, #48]	; (38e4 <TimerIntLdd1_Init+0x4c>)
    38b2:	68fa      	ldr	r2, [r7, #12]
    38b4:	629a      	str	r2, [r3, #40]	; 0x28
  DeviceDataPrv->LinkedDeviceDataPtr = TU1_Init((LDD_TUserData *)NULL);
    38b6:	2000      	movs	r0, #0
    38b8:	f000 f828 	bl	390c <TU1_Init>
    38bc:	1c02      	adds	r2, r0, #0
    38be:	68fb      	ldr	r3, [r7, #12]
    38c0:	601a      	str	r2, [r3, #0]
  if (DeviceDataPrv->LinkedDeviceDataPtr == NULL) { /* Is initialization of TimerUnit unsuccessful? */
    38c2:	68fb      	ldr	r3, [r7, #12]
    38c4:	681b      	ldr	r3, [r3, #0]
    38c6:	2b00      	cmp	r3, #0
    38c8:	d104      	bne.n	38d4 <TimerIntLdd1_Init+0x3c>
    /* Unregistration of the device structure */
    PE_LDD_UnregisterDeviceStructure(PE_LDD_COMPONENT_TimerIntLdd1_ID);
    38ca:	4b06      	ldr	r3, [pc, #24]	; (38e4 <TimerIntLdd1_Init+0x4c>)
    38cc:	2200      	movs	r2, #0
    38ce:	629a      	str	r2, [r3, #40]	; 0x28
    /* Deallocation of the device structure */
    /* {Default RTOS Adapter} Driver memory deallocation: Dynamic allocation is simulated, no deallocation code is generated */
    return NULL;                       /* If so, then the TimerInt initialization is also unsuccessful */
    38d0:	2300      	movs	r3, #0
    38d2:	e000      	b.n	38d6 <TimerIntLdd1_Init+0x3e>
  }
  return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
    38d4:	68fb      	ldr	r3, [r7, #12]
}
    38d6:	1c18      	adds	r0, r3, #0
    38d8:	46bd      	mov	sp, r7
    38da:	b004      	add	sp, #16
    38dc:	bd80      	pop	{r7, pc}
    38de:	46c0      	nop			; (mov r8, r8)
    38e0:	20000004 	.word	0x20000004
    38e4:	20000024 	.word	0x20000024

000038e8 <TU1_OnCounterRestart>:
**         eventually invokes event TimerIntLdd1_OnInterrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void TU1_OnCounterRestart(LDD_TUserData *UserDataPtr)
{
    38e8:	b580      	push	{r7, lr}
    38ea:	b084      	sub	sp, #16
    38ec:	af00      	add	r7, sp, #0
    38ee:	6078      	str	r0, [r7, #4]
  TimerIntLdd1_TDeviceData *DeviceDataPrv = PE_LDD_DeviceDataList[PE_LDD_COMPONENT_TimerIntLdd1_ID];
    38f0:	4b05      	ldr	r3, [pc, #20]	; (3908 <TU1_OnCounterRestart+0x20>)
    38f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    38f4:	60fb      	str	r3, [r7, #12]

  (void)UserDataPtr;                   /* Parameter is not used, suppress unused argument warning */
  TimerIntLdd1_OnInterrupt(DeviceDataPrv->UserDataPtr); /* Invoke OnInterrupt event */
    38f6:	68fb      	ldr	r3, [r7, #12]
    38f8:	689b      	ldr	r3, [r3, #8]
    38fa:	1c18      	adds	r0, r3, #0
    38fc:	f000 f8a6 	bl	3a4c <TimerIntLdd1_OnInterrupt>
}
    3900:	46bd      	mov	sp, r7
    3902:	b004      	add	sp, #16
    3904:	bd80      	pop	{r7, pc}
    3906:	46c0      	nop			; (mov r8, r8)
    3908:	20000024 	.word	0x20000024

0000390c <TU1_Init>:
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* TU1_Init(LDD_TUserData *UserDataPtr)
{
    390c:	b580      	push	{r7, lr}
    390e:	b084      	sub	sp, #16
    3910:	af00      	add	r7, sp, #0
    3912:	6078      	str	r0, [r7, #4]
  TU1_TDeviceData *DeviceDataPrv;

  if (PE_LDD_DeviceDataList[PE_LDD_COMPONENT_TU1_ID] == NULL) {
    3914:	4b2d      	ldr	r3, [pc, #180]	; (39cc <TU1_Init+0xc0>)
    3916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3918:	2b00      	cmp	r3, #0
    391a:	d145      	bne.n	39a8 <TU1_Init+0x9c>
    /* Allocate device structure */
    /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
    DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
    391c:	4b2c      	ldr	r3, [pc, #176]	; (39d0 <TU1_Init+0xc4>)
    391e:	60fb      	str	r3, [r7, #12]
    DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
    3920:	68fb      	ldr	r3, [r7, #12]
    3922:	687a      	ldr	r2, [r7, #4]
    3924:	60da      	str	r2, [r3, #12]
    DeviceDataPrv->InitCntr = 1U;      /* First initialization */
    3926:	68fb      	ldr	r3, [r7, #12]
    3928:	2201      	movs	r2, #1
    392a:	721a      	strb	r2, [r3, #8]
    DeviceDataPrv->InitCntr++;         /* Increment counter of initialization */
    return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
  }
  /* Interrupt vector(s) allocation */
  /* {Default RTOS Adapter} Set interrupt vector: IVT is static, ISR parameter is passed by the global variable */
  INT_TPM1__DEFAULT_RTOS_ISRPARAM = DeviceDataPrv;
    392c:	4b29      	ldr	r3, [pc, #164]	; (39d4 <TU1_Init+0xc8>)
    392e:	68fa      	ldr	r2, [r7, #12]
    3930:	601a      	str	r2, [r3, #0]
  /* SIM_SCGC6: TPM1=1 */
  SIM_SCGC6 |= SIM_SCGC6_TPM1_MASK;
    3932:	4a29      	ldr	r2, [pc, #164]	; (39d8 <TU1_Init+0xcc>)
    3934:	4928      	ldr	r1, [pc, #160]	; (39d8 <TU1_Init+0xcc>)
    3936:	4b29      	ldr	r3, [pc, #164]	; (39dc <TU1_Init+0xd0>)
    3938:	58cb      	ldr	r3, [r1, r3]
    393a:	2180      	movs	r1, #128	; 0x80
    393c:	0489      	lsls	r1, r1, #18
    393e:	4319      	orrs	r1, r3
    3940:	4b26      	ldr	r3, [pc, #152]	; (39dc <TU1_Init+0xd0>)
    3942:	50d1      	str	r1, [r2, r3]
  /* TPM1_SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,DMA=0,TOF=0,TOIE=0,CPWMS=0,CMOD=0,PS=0 */
  TPM1_SC = (TPM_SC_CMOD(0x00) | TPM_SC_PS(0x00)); /* Clear status and control register */
    3944:	4b26      	ldr	r3, [pc, #152]	; (39e0 <TU1_Init+0xd4>)
    3946:	2200      	movs	r2, #0
    3948:	601a      	str	r2, [r3, #0]
  /* TPM1_CNT: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,COUNT=0 */
  TPM1_CNT = TPM_CNT_COUNT(0x00);      /* Reset counter register */
    394a:	4b25      	ldr	r3, [pc, #148]	; (39e0 <TU1_Init+0xd4>)
    394c:	2200      	movs	r2, #0
    394e:	605a      	str	r2, [r3, #4]
  /* TPM1_C0SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,CHF=0,CHIE=0,MSB=0,MSA=0,ELSB=0,ELSA=0,??=0,DMA=0 */
  TPM1_C0SC = 0x00U;                   /* Clear channel status and control register */
    3950:	4b23      	ldr	r3, [pc, #140]	; (39e0 <TU1_Init+0xd4>)
    3952:	2200      	movs	r2, #0
    3954:	60da      	str	r2, [r3, #12]
  /* TPM1_C1SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,CHF=0,CHIE=0,MSB=0,MSA=0,ELSB=0,ELSA=0,??=0,DMA=0 */
  TPM1_C1SC = 0x00U;                   /* Clear channel status and control register */
    3956:	4b22      	ldr	r3, [pc, #136]	; (39e0 <TU1_Init+0xd4>)
    3958:	2200      	movs	r2, #0
    395a:	615a      	str	r2, [r3, #20]
  /* TPM1_MOD: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,MOD=0x51EB */
  TPM1_MOD = TPM_MOD_MOD(0x51EB);      /* Set up modulo register */
    395c:	4b20      	ldr	r3, [pc, #128]	; (39e0 <TU1_Init+0xd4>)
    395e:	4a21      	ldr	r2, [pc, #132]	; (39e4 <TU1_Init+0xd8>)
    3960:	609a      	str	r2, [r3, #8]
  DeviceDataPrv->EnEvents = 0x0100U;   /* Enable selected events */
    3962:	68fb      	ldr	r3, [r7, #12]
    3964:	2280      	movs	r2, #128	; 0x80
    3966:	0052      	lsls	r2, r2, #1
    3968:	601a      	str	r2, [r3, #0]
  DeviceDataPrv->Source = TPM_PDD_SYSTEM; /* Store clock source */
    396a:	68fb      	ldr	r3, [r7, #12]
    396c:	2208      	movs	r2, #8
    396e:	605a      	str	r2, [r3, #4]
  /* NVIC_IPR4: PRI_18=0x80 */
  NVIC_IPR4 = (uint32_t)((NVIC_IPR4 & (uint32_t)~(uint32_t)(
    3970:	4a1d      	ldr	r2, [pc, #116]	; (39e8 <TU1_Init+0xdc>)
    3972:	491d      	ldr	r1, [pc, #116]	; (39e8 <TU1_Init+0xdc>)
    3974:	23c4      	movs	r3, #196	; 0xc4
    3976:	009b      	lsls	r3, r3, #2
    3978:	58c9      	ldr	r1, [r1, r3]
    397a:	4b1c      	ldr	r3, [pc, #112]	; (39ec <TU1_Init+0xe0>)
    397c:	400b      	ands	r3, r1
    397e:	2180      	movs	r1, #128	; 0x80
    3980:	0409      	lsls	r1, r1, #16
    3982:	4319      	orrs	r1, r3
    3984:	23c4      	movs	r3, #196	; 0xc4
    3986:	009b      	lsls	r3, r3, #2
    3988:	50d1      	str	r1, [r2, r3]
               NVIC_IP_PRI_18(0x7F)
              )) | (uint32_t)(
               NVIC_IP_PRI_18(0x80)
              ));
  /* NVIC_ISER: SETENA|=0x00040000 */
  NVIC_ISER |= NVIC_ISER_SETENA(0x00040000);
    398a:	4b17      	ldr	r3, [pc, #92]	; (39e8 <TU1_Init+0xdc>)
    398c:	4a16      	ldr	r2, [pc, #88]	; (39e8 <TU1_Init+0xdc>)
    398e:	6812      	ldr	r2, [r2, #0]
    3990:	2180      	movs	r1, #128	; 0x80
    3992:	02c9      	lsls	r1, r1, #11
    3994:	430a      	orrs	r2, r1
    3996:	601a      	str	r2, [r3, #0]
  /* TPM1_SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,DMA=0,TOF=0,TOIE=1,CPWMS=0,CMOD=1,PS=0 */
  TPM1_SC = (TPM_SC_TOIE_MASK | TPM_SC_CMOD(0x01) | TPM_SC_PS(0x00)); /* Set up status and control register */
    3998:	4b11      	ldr	r3, [pc, #68]	; (39e0 <TU1_Init+0xd4>)
    399a:	2248      	movs	r2, #72	; 0x48
    399c:	601a      	str	r2, [r3, #0]
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_TU1_ID,DeviceDataPrv);
    399e:	4b0b      	ldr	r3, [pc, #44]	; (39cc <TU1_Init+0xc0>)
    39a0:	68fa      	ldr	r2, [r7, #12]
    39a2:	625a      	str	r2, [r3, #36]	; 0x24
  return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
    39a4:	68fb      	ldr	r3, [r7, #12]
    39a6:	e00c      	b.n	39c2 <TU1_Init+0xb6>
    DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
    DeviceDataPrv->InitCntr = 1U;      /* First initialization */
  }
  else {
    /* Memory is already allocated */
    DeviceDataPrv = (TU1_TDeviceDataPtr) PE_LDD_DeviceDataList[PE_LDD_COMPONENT_TU1_ID];
    39a8:	4b08      	ldr	r3, [pc, #32]	; (39cc <TU1_Init+0xc0>)
    39aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    39ac:	60fb      	str	r3, [r7, #12]
    DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
    39ae:	68fb      	ldr	r3, [r7, #12]
    39b0:	687a      	ldr	r2, [r7, #4]
    39b2:	60da      	str	r2, [r3, #12]
    DeviceDataPrv->InitCntr++;         /* Increment counter of initialization */
    39b4:	68fb      	ldr	r3, [r7, #12]
    39b6:	7a1b      	ldrb	r3, [r3, #8]
    39b8:	3301      	adds	r3, #1
    39ba:	b2da      	uxtb	r2, r3
    39bc:	68fb      	ldr	r3, [r7, #12]
    39be:	721a      	strb	r2, [r3, #8]
    return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
    39c0:	68fb      	ldr	r3, [r7, #12]
  /* TPM1_SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,DMA=0,TOF=0,TOIE=1,CPWMS=0,CMOD=1,PS=0 */
  TPM1_SC = (TPM_SC_TOIE_MASK | TPM_SC_CMOD(0x01) | TPM_SC_PS(0x00)); /* Set up status and control register */
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_TU1_ID,DeviceDataPrv);
  return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
}
    39c2:	1c18      	adds	r0, r3, #0
    39c4:	46bd      	mov	sp, r7
    39c6:	b004      	add	sp, #16
    39c8:	bd80      	pop	{r7, pc}
    39ca:	46c0      	nop			; (mov r8, r8)
    39cc:	20000024 	.word	0x20000024
    39d0:	20000010 	.word	0x20000010
    39d4:	20000020 	.word	0x20000020
    39d8:	40047000 	.word	0x40047000
    39dc:	0000103c 	.word	0x0000103c
    39e0:	40039000 	.word	0x40039000
    39e4:	000051eb 	.word	0x000051eb
    39e8:	e000e100 	.word	0xe000e100
    39ec:	ff00ffff 	.word	0xff00ffff

000039f0 <TU1_Interrupt>:
**         and eventually invokes event(s) of the component.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(TU1_Interrupt)
{
    39f0:	b580      	push	{r7, lr}
    39f2:	b082      	sub	sp, #8
    39f4:	af00      	add	r7, sp, #0
  /* {Default RTOS Adapter} ISR parameter is passed through the global variable */
  TU1_TDeviceDataPtr DeviceDataPrv = INT_TPM1__DEFAULT_RTOS_ISRPARAM;
    39f6:	4b13      	ldr	r3, [pc, #76]	; (3a44 <TU1_Interrupt+0x54>)
    39f8:	681b      	ldr	r3, [r3, #0]
    39fa:	603b      	str	r3, [r7, #0]

  LDD_TEventMask State = 0U;
    39fc:	2300      	movs	r3, #0
    39fe:	607b      	str	r3, [r7, #4]

  if ((TPM_PDD_GetOverflowInterruptFlag(TPM1_BASE_PTR)) != 0U) { /* Is the overflow interrupt flag pending? */
    3a00:	4b11      	ldr	r3, [pc, #68]	; (3a48 <TU1_Interrupt+0x58>)
    3a02:	681a      	ldr	r2, [r3, #0]
    3a04:	2380      	movs	r3, #128	; 0x80
    3a06:	4013      	ands	r3, r2
    3a08:	d004      	beq.n	3a14 <TU1_Interrupt+0x24>
    State |= LDD_TIMERUNIT_ON_COUNTER_RESTART; /* and set mask */
    3a0a:	687b      	ldr	r3, [r7, #4]
    3a0c:	2280      	movs	r2, #128	; 0x80
    3a0e:	0052      	lsls	r2, r2, #1
    3a10:	4313      	orrs	r3, r2
    3a12:	607b      	str	r3, [r7, #4]
  }
  State &= DeviceDataPrv->EnEvents;    /* Handle only enabled interrupts */
    3a14:	683b      	ldr	r3, [r7, #0]
    3a16:	681a      	ldr	r2, [r3, #0]
    3a18:	687b      	ldr	r3, [r7, #4]
    3a1a:	4013      	ands	r3, r2
    3a1c:	607b      	str	r3, [r7, #4]
  if (State & LDD_TIMERUNIT_ON_COUNTER_RESTART) { /* Is the overflow interrupt flag pending? */
    3a1e:	687a      	ldr	r2, [r7, #4]
    3a20:	2380      	movs	r3, #128	; 0x80
    3a22:	005b      	lsls	r3, r3, #1
    3a24:	4013      	ands	r3, r2
    3a26:	d00a      	beq.n	3a3e <TU1_Interrupt+0x4e>
    TPM_PDD_ClearOverflowInterruptFlag(TPM1_BASE_PTR); /* Clear flag */
    3a28:	4b07      	ldr	r3, [pc, #28]	; (3a48 <TU1_Interrupt+0x58>)
    3a2a:	4a07      	ldr	r2, [pc, #28]	; (3a48 <TU1_Interrupt+0x58>)
    3a2c:	6812      	ldr	r2, [r2, #0]
    3a2e:	2180      	movs	r1, #128	; 0x80
    3a30:	430a      	orrs	r2, r1
    3a32:	601a      	str	r2, [r3, #0]
    TU1_OnCounterRestart(DeviceDataPrv->UserDataPtr); /* Invoke OnCounterRestart event */
    3a34:	683b      	ldr	r3, [r7, #0]
    3a36:	68db      	ldr	r3, [r3, #12]
    3a38:	1c18      	adds	r0, r3, #0
    3a3a:	f7ff ff55 	bl	38e8 <TU1_OnCounterRestart>
  }
}
    3a3e:	46bd      	mov	sp, r7
    3a40:	b002      	add	sp, #8
    3a42:	bd80      	pop	{r7, pc}
    3a44:	20000020 	.word	0x20000020
    3a48:	40039000 	.word	0x40039000

00003a4c <TimerIntLdd1_OnInterrupt>:
**     Description :
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void TimerIntLdd1_OnInterrupt(LDD_TUserData *UserDataPtr)
{
    3a4c:	b580      	push	{r7, lr}
    3a4e:	b082      	sub	sp, #8
    3a50:	af00      	add	r7, sp, #0
    3a52:	6078      	str	r0, [r7, #4]
  (void)UserDataPtr;                   /* Parameter is not used, suppress unused argument warning */
  TI1_OnInterrupt();                   /* Invoke OnInterrupt event */
    3a54:	f002 f99c 	bl	5d90 <TI1_OnInterrupt>
}
    3a58:	46bd      	mov	sp, r7
    3a5a:	b002      	add	sp, #8
    3a5c:	bd80      	pop	{r7, pc}
    3a5e:	46c0      	nop			; (mov r8, r8)

00003a60 <TButton_Init>:
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/
void TButton_Init(void)
{
    3a60:	b580      	push	{r7, lr}
    3a62:	af00      	add	r7, sp, #0
  /* SIM_SCGC5: TSI=1 */
  SIM_SCGC5 |= SIM_SCGC5_TSI_MASK;
    3a64:	4a11      	ldr	r2, [pc, #68]	; (3aac <TButton_Init+0x4c>)
    3a66:	4911      	ldr	r1, [pc, #68]	; (3aac <TButton_Init+0x4c>)
    3a68:	4b11      	ldr	r3, [pc, #68]	; (3ab0 <TButton_Init+0x50>)
    3a6a:	58cb      	ldr	r3, [r1, r3]
    3a6c:	2120      	movs	r1, #32
    3a6e:	4319      	orrs	r1, r3
    3a70:	4b0f      	ldr	r3, [pc, #60]	; (3ab0 <TButton_Init+0x50>)
    3a72:	50d1      	str	r1, [r2, r3]
  /* TSI0_GENCS: OUTRGF=1,ESOR=0,MODE=0x0C,REFCHRG=3,DVOLT=0,EXTCHRG=0,PS=0,NSCN=0,TSIIEN=0,STPE=1,STM=0,EOSF=1,CURSW=0 */
  TSI0_GENCS = (uint32_t)((TSI0_GENCS & (uint32_t)~(uint32_t)(
    3a74:	4b0f      	ldr	r3, [pc, #60]	; (3ab4 <TButton_Init+0x54>)
    3a76:	4a0f      	ldr	r2, [pc, #60]	; (3ab4 <TButton_Init+0x54>)
    3a78:	6811      	ldr	r1, [r2, #0]
    3a7a:	4a0f      	ldr	r2, [pc, #60]	; (3ab8 <TButton_Init+0x58>)
    3a7c:	400a      	ands	r2, r1
    3a7e:	490f      	ldr	r1, [pc, #60]	; (3abc <TButton_Init+0x5c>)
    3a80:	430a      	orrs	r2, r1
    3a82:	601a      	str	r2, [r3, #0]
                TSI_GENCS_REFCHRG(0x03) |
                TSI_GENCS_STPE_MASK |
                TSI_GENCS_EOSF_MASK
               ));
  /* TSI0_TSHD: THRESH=0,THRESL=0 */
  TSI0_TSHD = (TSI_TSHD_THRESH(0x00) | TSI_TSHD_THRESL(0x00));
    3a84:	4b0b      	ldr	r3, [pc, #44]	; (3ab4 <TButton_Init+0x54>)
    3a86:	2200      	movs	r2, #0
    3a88:	609a      	str	r2, [r3, #8]
  /* TSI0_DATA: TSICH=0,DMAEN=0 */
  TSI0_DATA &= (uint32_t)~(uint32_t)(
    3a8a:	4b0a      	ldr	r3, [pc, #40]	; (3ab4 <TButton_Init+0x54>)
    3a8c:	4a09      	ldr	r2, [pc, #36]	; (3ab4 <TButton_Init+0x54>)
    3a8e:	6851      	ldr	r1, [r2, #4]
    3a90:	4a0b      	ldr	r2, [pc, #44]	; (3ac0 <TButton_Init+0x60>)
    3a92:	400a      	ands	r2, r1
    3a94:	605a      	str	r2, [r3, #4]
                TSI_DATA_TSICH(0x0F) |
                TSI_DATA_DMAEN_MASK
               );
  /* TSI0_GENCS: OUTRGF=0,TSIEN=1,EOSF=0 */
  TSI0_GENCS = (uint32_t)((TSI0_GENCS & (uint32_t)~(uint32_t)(
    3a96:	4b07      	ldr	r3, [pc, #28]	; (3ab4 <TButton_Init+0x54>)
    3a98:	4a06      	ldr	r2, [pc, #24]	; (3ab4 <TButton_Init+0x54>)
    3a9a:	6811      	ldr	r1, [r2, #0]
    3a9c:	4a09      	ldr	r2, [pc, #36]	; (3ac4 <TButton_Init+0x64>)
    3a9e:	400a      	ands	r2, r1
    3aa0:	2180      	movs	r1, #128	; 0x80
    3aa2:	430a      	orrs	r2, r1
    3aa4:	601a      	str	r2, [r3, #0]
                TSI_GENCS_OUTRGF_MASK |
                TSI_GENCS_EOSF_MASK
               )) | (uint32_t)(
                TSI_GENCS_TSIEN_MASK
               ));
}
    3aa6:	46bd      	mov	sp, r7
    3aa8:	bd80      	pop	{r7, pc}
    3aaa:	46c0      	nop			; (mov r8, r8)
    3aac:	40047000 	.word	0x40047000
    3ab0:	00001038 	.word	0x00001038
    3ab4:	40045000 	.word	0x40045000
    3ab8:	60000089 	.word	0x60000089
    3abc:	8c600024 	.word	0x8c600024
    3ac0:	0f7fffff 	.word	0x0f7fffff
    3ac4:	7fffff7b 	.word	0x7fffff7b

00003ac8 <LatchCurrent_Init>:
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* LatchCurrent_Init(LDD_TUserData *UserDataPtr)
{
    3ac8:	b580      	push	{r7, lr}
    3aca:	b084      	sub	sp, #16
    3acc:	af00      	add	r7, sp, #0
    3ace:	6078      	str	r0, [r7, #4]
  /* Allocate LDD device structure */
  LatchCurrent_TDeviceData *DeviceDataPrv;

  /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
    3ad0:	4b1a      	ldr	r3, [pc, #104]	; (3b3c <LatchCurrent_Init+0x74>)
    3ad2:	60fb      	str	r3, [r7, #12]
  /* Store the UserData pointer */
  DeviceDataPrv->UserData = UserDataPtr;
    3ad4:	68fb      	ldr	r3, [r7, #12]
    3ad6:	687a      	ldr	r2, [r7, #4]
    3ad8:	601a      	str	r2, [r3, #0]
  /* Interrupt vector(s) allocation */
  /* {Default RTOS Adapter} Set interrupt vector: IVT is static, ISR parameter is passed by the global variable */
  INT_PORTC_PORTD__DEFAULT_RTOS_ISRPARAM = DeviceDataPrv;
    3ada:	4b19      	ldr	r3, [pc, #100]	; (3b40 <LatchCurrent_Init+0x78>)
    3adc:	68fa      	ldr	r2, [r7, #12]
    3ade:	601a      	str	r2, [r3, #0]
  /* Initialization of Port Control registers */
  /* PORTC_PCR2: ISF=0,MUX=1 */
  PORTC_PCR2 = (uint32_t)((PORTC_PCR2 & (uint32_t)~(uint32_t)(
    3ae0:	4b18      	ldr	r3, [pc, #96]	; (3b44 <LatchCurrent_Init+0x7c>)
    3ae2:	4a18      	ldr	r2, [pc, #96]	; (3b44 <LatchCurrent_Init+0x7c>)
    3ae4:	6891      	ldr	r1, [r2, #8]
    3ae6:	4a18      	ldr	r2, [pc, #96]	; (3b48 <LatchCurrent_Init+0x80>)
    3ae8:	400a      	ands	r2, r1
    3aea:	2180      	movs	r1, #128	; 0x80
    3aec:	0049      	lsls	r1, r1, #1
    3aee:	430a      	orrs	r2, r1
    3af0:	609a      	str	r2, [r3, #8]
                PORT_PCR_MUX(0x06)
               )) | (uint32_t)(
                PORT_PCR_MUX(0x01)
               ));
  /* PORTC_PCR2: ISF=1,IRQC=0x0A */
  PORTC_PCR2 = (uint32_t)((PORTC_PCR2 & (uint32_t)~(uint32_t)(
    3af2:	4b14      	ldr	r3, [pc, #80]	; (3b44 <LatchCurrent_Init+0x7c>)
    3af4:	4a13      	ldr	r2, [pc, #76]	; (3b44 <LatchCurrent_Init+0x7c>)
    3af6:	6891      	ldr	r1, [r2, #8]
    3af8:	4a14      	ldr	r2, [pc, #80]	; (3b4c <LatchCurrent_Init+0x84>)
    3afa:	400a      	ands	r2, r1
    3afc:	2185      	movs	r1, #133	; 0x85
    3afe:	0449      	lsls	r1, r1, #17
    3b00:	430a      	orrs	r2, r1
    3b02:	609a      	str	r2, [r3, #8]
               )) | (uint32_t)(
                PORT_PCR_ISF_MASK |
                PORT_PCR_IRQC(0x0A)
               ));
  /* NVIC_IPR7: PRI_31=0x80 */
  NVIC_IPR7 = (uint32_t)((NVIC_IPR7 & (uint32_t)~(uint32_t)(
    3b04:	4a12      	ldr	r2, [pc, #72]	; (3b50 <LatchCurrent_Init+0x88>)
    3b06:	4912      	ldr	r1, [pc, #72]	; (3b50 <LatchCurrent_Init+0x88>)
    3b08:	23c7      	movs	r3, #199	; 0xc7
    3b0a:	009b      	lsls	r3, r3, #2
    3b0c:	58cb      	ldr	r3, [r1, r3]
    3b0e:	021b      	lsls	r3, r3, #8
    3b10:	0a1b      	lsrs	r3, r3, #8
    3b12:	2180      	movs	r1, #128	; 0x80
    3b14:	0609      	lsls	r1, r1, #24
    3b16:	4319      	orrs	r1, r3
    3b18:	23c7      	movs	r3, #199	; 0xc7
    3b1a:	009b      	lsls	r3, r3, #2
    3b1c:	50d1      	str	r1, [r2, r3]
               NVIC_IP_PRI_31(0x7F)
              )) | (uint32_t)(
               NVIC_IP_PRI_31(0x80)
              ));
  /* NVIC_ISER: SETENA|=0x80000000 */
  NVIC_ISER |= NVIC_ISER_SETENA(0x80000000);
    3b1e:	4b0c      	ldr	r3, [pc, #48]	; (3b50 <LatchCurrent_Init+0x88>)
    3b20:	4a0b      	ldr	r2, [pc, #44]	; (3b50 <LatchCurrent_Init+0x88>)
    3b22:	6812      	ldr	r2, [r2, #0]
    3b24:	2180      	movs	r1, #128	; 0x80
    3b26:	0609      	lsls	r1, r1, #24
    3b28:	430a      	orrs	r2, r1
    3b2a:	601a      	str	r2, [r3, #0]
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_LatchCurrent_ID,DeviceDataPrv);
    3b2c:	4b09      	ldr	r3, [pc, #36]	; (3b54 <LatchCurrent_Init+0x8c>)
    3b2e:	68fa      	ldr	r2, [r7, #12]
    3b30:	63da      	str	r2, [r3, #60]	; 0x3c
  return ((LDD_TDeviceData *)DeviceDataPrv);
    3b32:	68fb      	ldr	r3, [r7, #12]
}
    3b34:	1c18      	adds	r0, r3, #0
    3b36:	46bd      	mov	sp, r7
    3b38:	b004      	add	sp, #16
    3b3a:	bd80      	pop	{r7, pc}
    3b3c:	20000078 	.word	0x20000078
    3b40:	2000007c 	.word	0x2000007c
    3b44:	4004b000 	.word	0x4004b000
    3b48:	fefff8ff 	.word	0xfefff8ff
    3b4c:	fef0ffff 	.word	0xfef0ffff
    3b50:	e000e100 	.word	0xe000e100
    3b54:	20000024 	.word	0x20000024

00003b58 <LatchCurrent_Interrupt>:
**         and eventually invokes event(s) of the component.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void LatchCurrent_Interrupt(void)
{
    3b58:	b580      	push	{r7, lr}
    3b5a:	b082      	sub	sp, #8
    3b5c:	af00      	add	r7, sp, #0
  /* {Default RTOS Adapter} ISR parameter is passed through the global variable */
  LatchCurrent_TDeviceDataPtr DeviceDataPrv = INT_PORTC_PORTD__DEFAULT_RTOS_ISRPARAM;
    3b5e:	4b0c      	ldr	r3, [pc, #48]	; (3b90 <LatchCurrent_Interrupt+0x38>)
    3b60:	681b      	ldr	r3, [r3, #0]
    3b62:	607b      	str	r3, [r7, #4]

  /* Check the pin interrupt flag of the shared interrupt */
  if (PORT_PDD_GetPinInterruptFlag(PORTC_BASE_PTR, LatchCurrent_PIN_INDEX)) {
    3b64:	4b0b      	ldr	r3, [pc, #44]	; (3b94 <LatchCurrent_Interrupt+0x3c>)
    3b66:	689a      	ldr	r2, [r3, #8]
    3b68:	2380      	movs	r3, #128	; 0x80
    3b6a:	045b      	lsls	r3, r3, #17
    3b6c:	4013      	ands	r3, r2
    3b6e:	d00b      	beq.n	3b88 <LatchCurrent_Interrupt+0x30>
    /* Clear the interrupt flag */
    PORT_PDD_ClearPinInterruptFlag(PORTC_BASE_PTR, LatchCurrent_PIN_INDEX);
    3b70:	4b08      	ldr	r3, [pc, #32]	; (3b94 <LatchCurrent_Interrupt+0x3c>)
    3b72:	4a08      	ldr	r2, [pc, #32]	; (3b94 <LatchCurrent_Interrupt+0x3c>)
    3b74:	6892      	ldr	r2, [r2, #8]
    3b76:	2180      	movs	r1, #128	; 0x80
    3b78:	0449      	lsls	r1, r1, #17
    3b7a:	430a      	orrs	r2, r1
    3b7c:	609a      	str	r2, [r3, #8]
    /* Call OnInterrupt event */
    LatchCurrent_OnInterrupt(DeviceDataPrv->UserData);
    3b7e:	687b      	ldr	r3, [r7, #4]
    3b80:	681b      	ldr	r3, [r3, #0]
    3b82:	1c18      	adds	r0, r3, #0
    3b84:	f002 f922 	bl	5dcc <LatchCurrent_OnInterrupt>
  }
}
    3b88:	46bd      	mov	sp, r7
    3b8a:	b002      	add	sp, #8
    3b8c:	bd80      	pop	{r7, pc}
    3b8e:	46c0      	nop			; (mov r8, r8)
    3b90:	2000007c 	.word	0x2000007c
    3b94:	4004b000 	.word	0x4004b000

00003b98 <LPTMR0_Init>:
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/
void LPTMR0_Init(void)
{
    3b98:	b580      	push	{r7, lr}
    3b9a:	af00      	add	r7, sp, #0
  /* SIM_SCGC5: LPTMR=1 */
  SIM_SCGC5 |= SIM_SCGC5_LPTMR_MASK;
    3b9c:	4a0f      	ldr	r2, [pc, #60]	; (3bdc <LPTMR0_Init+0x44>)
    3b9e:	490f      	ldr	r1, [pc, #60]	; (3bdc <LPTMR0_Init+0x44>)
    3ba0:	4b0f      	ldr	r3, [pc, #60]	; (3be0 <LPTMR0_Init+0x48>)
    3ba2:	58cb      	ldr	r3, [r1, r3]
    3ba4:	2101      	movs	r1, #1
    3ba6:	4319      	orrs	r1, r3
    3ba8:	4b0d      	ldr	r3, [pc, #52]	; (3be0 <LPTMR0_Init+0x48>)
    3baa:	50d1      	str	r1, [r2, r3]
  /* LPTMR0_CSR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,TCF=0,TIE=0,TPS=0,TPP=0,TFC=0,TMS=0,TEN=0 */
  LPTMR0_CSR = LPTMR_CSR_TPS(0x00);
    3bac:	4b0d      	ldr	r3, [pc, #52]	; (3be4 <LPTMR0_Init+0x4c>)
    3bae:	2200      	movs	r2, #0
    3bb0:	601a      	str	r2, [r3, #0]
  /* LPTMR0_CMR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,COMPARE=0x03E8 */
  LPTMR0_CMR = LPTMR_CMR_COMPARE(0x03E8);
    3bb2:	4b0c      	ldr	r3, [pc, #48]	; (3be4 <LPTMR0_Init+0x4c>)
    3bb4:	22fa      	movs	r2, #250	; 0xfa
    3bb6:	0092      	lsls	r2, r2, #2
    3bb8:	609a      	str	r2, [r3, #8]
  /* LPTMR0_CSR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,TCF=1,TIE=1,TPS=0,TPP=0,TFC=0,TMS=0,TEN=0 */
  LPTMR0_CSR = (LPTMR_CSR_TCF_MASK | LPTMR_CSR_TIE_MASK | LPTMR_CSR_TPS(0x00));
    3bba:	4b0a      	ldr	r3, [pc, #40]	; (3be4 <LPTMR0_Init+0x4c>)
    3bbc:	22c0      	movs	r2, #192	; 0xc0
    3bbe:	601a      	str	r2, [r3, #0]
  /* LPTMR0_PSR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,PRESCALE=0,PBYP=1,PCS=1 */
  LPTMR0_PSR = LPTMR_PSR_PRESCALE(0x00) |
    3bc0:	4b08      	ldr	r3, [pc, #32]	; (3be4 <LPTMR0_Init+0x4c>)
    3bc2:	2205      	movs	r2, #5
    3bc4:	605a      	str	r2, [r3, #4]
               LPTMR_PSR_PBYP_MASK |
               LPTMR_PSR_PCS(0x01);
  /* LPTMR0_CSR: TCF=0,TEN=1 */
  LPTMR0_CSR = (uint32_t)((LPTMR0_CSR & (uint32_t)~(uint32_t)(
    3bc6:	4b07      	ldr	r3, [pc, #28]	; (3be4 <LPTMR0_Init+0x4c>)
    3bc8:	4a06      	ldr	r2, [pc, #24]	; (3be4 <LPTMR0_Init+0x4c>)
    3bca:	6812      	ldr	r2, [r2, #0]
    3bcc:	2181      	movs	r1, #129	; 0x81
    3bce:	438a      	bics	r2, r1
    3bd0:	2101      	movs	r1, #1
    3bd2:	430a      	orrs	r2, r1
    3bd4:	601a      	str	r2, [r3, #0]
                LPTMR_CSR_TCF_MASK
               )) | (uint32_t)(
                LPTMR_CSR_TEN_MASK
               ));
}
    3bd6:	46bd      	mov	sp, r7
    3bd8:	bd80      	pop	{r7, pc}
    3bda:	46c0      	nop			; (mov r8, r8)
    3bdc:	40047000 	.word	0x40047000
    3be0:	00001038 	.word	0x00001038
    3be4:	40040000 	.word	0x40040000

00003be8 <IntFlashLdd1_Init>:
**     @return
**                         - Device data structure pointer.
*/
/* ===================================================================*/
LDD_TDeviceData* IntFlashLdd1_Init(LDD_TUserData *UserDataPtr)
{
    3be8:	b580      	push	{r7, lr}
    3bea:	b084      	sub	sp, #16
    3bec:	af00      	add	r7, sp, #0
    3bee:	6078      	str	r0, [r7, #4]
  IntFlashLdd1_TDeviceDataPtr DeviceDataPrv;

  /* Allocate LDD device structure */
  /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
    3bf0:	4b10      	ldr	r3, [pc, #64]	; (3c34 <IntFlashLdd1_Init+0x4c>)
    3bf2:	60fb      	str	r3, [r7, #12]
  DeviceDataPrv->CurrentOperationStatus = LDD_FLASH_IDLE; /* Initialization of the Current operation status item */
    3bf4:	68fb      	ldr	r3, [r7, #12]
    3bf6:	2202      	movs	r2, #2
    3bf8:	705a      	strb	r2, [r3, #1]
  DeviceDataPrv->CurrentOperation = LDD_FLASH_NO_OPERATION; /* Initialization of the Current operation type item */
    3bfa:	68fb      	ldr	r3, [r7, #12]
    3bfc:	2200      	movs	r2, #0
    3bfe:	701a      	strb	r2, [r3, #0]
  DeviceDataPrv->CurrentErrorFlags = 0U; /* Initialization of the Current error flags item */
    3c00:	68fb      	ldr	r3, [r7, #12]
    3c02:	2200      	movs	r2, #0
    3c04:	70da      	strb	r2, [r3, #3]
  DeviceDataPrv->CurrentDataPtr = NULL; /* Initialization of the Current data pointer item */
    3c06:	68fb      	ldr	r3, [r7, #12]
    3c08:	2200      	movs	r2, #0
    3c0a:	60da      	str	r2, [r3, #12]
  /* Copy of the safe routine to a buffer for execution */
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store a pointer to the User data structure */
    3c0c:	68fb      	ldr	r3, [r7, #12]
    3c0e:	687a      	ldr	r2, [r7, #4]
    3c10:	615a      	str	r2, [r3, #20]
  /* SIM_SCGC6: FTF=1 */
  SIM_SCGC6 |= SIM_SCGC6_FTF_MASK;
    3c12:	4a09      	ldr	r2, [pc, #36]	; (3c38 <IntFlashLdd1_Init+0x50>)
    3c14:	4908      	ldr	r1, [pc, #32]	; (3c38 <IntFlashLdd1_Init+0x50>)
    3c16:	4b09      	ldr	r3, [pc, #36]	; (3c3c <IntFlashLdd1_Init+0x54>)
    3c18:	58cb      	ldr	r3, [r1, r3]
    3c1a:	2101      	movs	r1, #1
    3c1c:	4319      	orrs	r1, r3
    3c1e:	4b07      	ldr	r3, [pc, #28]	; (3c3c <IntFlashLdd1_Init+0x54>)
    3c20:	50d1      	str	r1, [r2, r3]
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_IntFlashLdd1_ID,DeviceDataPrv);
    3c22:	4b07      	ldr	r3, [pc, #28]	; (3c40 <IntFlashLdd1_Init+0x58>)
    3c24:	68fa      	ldr	r2, [r7, #12]
    3c26:	609a      	str	r2, [r3, #8]
  return DeviceDataPrv;
    3c28:	68fb      	ldr	r3, [r7, #12]
}
    3c2a:	1c18      	adds	r0, r3, #0
    3c2c:	46bd      	mov	sp, r7
    3c2e:	b004      	add	sp, #16
    3c30:	bd80      	pop	{r7, pc}
    3c32:	46c0      	nop			; (mov r8, r8)
    3c34:	20000080 	.word	0x20000080
    3c38:	40047000 	.word	0x40047000
    3c3c:	0000103c 	.word	0x0000103c
    3c40:	20000024 	.word	0x20000024

00003c44 <IRDRV_Init>:
**     @return
**                         - Device data structure pointer.
*/
/* ===================================================================*/
LDD_TDeviceData* IRDRV_Init(LDD_TUserData *UserDataPtr)
{
    3c44:	b580      	push	{r7, lr}
    3c46:	b084      	sub	sp, #16
    3c48:	af00      	add	r7, sp, #0
    3c4a:	6078      	str	r0, [r7, #4]
  IRDRV_TDeviceData *DeviceDataPtr;    /* LDD device structure */

  /* Allocate HAL device structure */
  /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPtr = &DeviceDataPtr__DEFAULT_RTOS_ALLOC;
    3c4c:	4b20      	ldr	r3, [pc, #128]	; (3cd0 <IRDRV_Init+0x8c>)
    3c4e:	60fb      	str	r3, [r7, #12]
  DeviceDataPtr->DmaTransferDeviceDataPtr = NULL; /* DMA is not used */
    3c50:	68fb      	ldr	r3, [r7, #12]
    3c52:	2200      	movs	r2, #0
    3c54:	605a      	str	r2, [r3, #4]
  DeviceDataPtr->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
    3c56:	68fb      	ldr	r3, [r7, #12]
    3c58:	687a      	ldr	r2, [r7, #4]
    3c5a:	609a      	str	r2, [r3, #8]
  /* SIM_SCGC6: DAC0=1 */
  SIM_SCGC6 |= SIM_SCGC6_DAC0_MASK;
    3c5c:	4a1d      	ldr	r2, [pc, #116]	; (3cd4 <IRDRV_Init+0x90>)
    3c5e:	491d      	ldr	r1, [pc, #116]	; (3cd4 <IRDRV_Init+0x90>)
    3c60:	4b1d      	ldr	r3, [pc, #116]	; (3cd8 <IRDRV_Init+0x94>)
    3c62:	58cb      	ldr	r3, [r1, r3]
    3c64:	2180      	movs	r1, #128	; 0x80
    3c66:	0609      	lsls	r1, r1, #24
    3c68:	4319      	orrs	r1, r3
    3c6a:	4b1b      	ldr	r3, [pc, #108]	; (3cd8 <IRDRV_Init+0x94>)
    3c6c:	50d1      	str	r1, [r2, r3]
  DAC_PDD_EnableDevice(DAC0_BASE_PTR,PDD_DISABLE); /* Disable device */
    3c6e:	4a1b      	ldr	r2, [pc, #108]	; (3cdc <IRDRV_Init+0x98>)
    3c70:	491a      	ldr	r1, [pc, #104]	; (3cdc <IRDRV_Init+0x98>)
    3c72:	2321      	movs	r3, #33	; 0x21
    3c74:	5ccb      	ldrb	r3, [r1, r3]
    3c76:	b2d9      	uxtb	r1, r3
    3c78:	237f      	movs	r3, #127	; 0x7f
    3c7a:	400b      	ands	r3, r1
    3c7c:	b2d9      	uxtb	r1, r3
    3c7e:	2321      	movs	r3, #33	; 0x21
    3c80:	54d1      	strb	r1, [r2, r3]
  /* Initialization of pin routing */
  /* PORTE_PCR30: ISF=0,MUX=0 */
  PORTE_PCR30 &= (uint32_t)~(uint32_t)((PORT_PCR_ISF_MASK | PORT_PCR_MUX(0x07)));
    3c82:	4b17      	ldr	r3, [pc, #92]	; (3ce0 <IRDRV_Init+0x9c>)
    3c84:	4a16      	ldr	r2, [pc, #88]	; (3ce0 <IRDRV_Init+0x9c>)
    3c86:	6f91      	ldr	r1, [r2, #120]	; 0x78
    3c88:	4a16      	ldr	r2, [pc, #88]	; (3ce4 <IRDRV_Init+0xa0>)
    3c8a:	400a      	ands	r2, r1
    3c8c:	679a      	str	r2, [r3, #120]	; 0x78
  /* DAC0_DAT0H: ??=0,??=0,??=0,??=0,DATA1=0 */
  DAC0_DAT0H = DAC_DATH_DATA1(0x00);
    3c8e:	4b13      	ldr	r3, [pc, #76]	; (3cdc <IRDRV_Init+0x98>)
    3c90:	2200      	movs	r2, #0
    3c92:	705a      	strb	r2, [r3, #1]
  /* DAC0_DAT0L: DATA0=0 */
  DAC0_DAT0L = DAC_DATL_DATA0(0x00);
    3c94:	4b11      	ldr	r3, [pc, #68]	; (3cdc <IRDRV_Init+0x98>)
    3c96:	2200      	movs	r2, #0
    3c98:	701a      	strb	r2, [r3, #0]
  /* DAC0_C2: ??=0,??=0,??=0,DACBFRP=0,??=1,??=1,??=1,DACBFUP=1 */
  DAC0_C2 = (DAC_C2_DACBFUP_MASK | 0x0EU);
    3c9a:	4a10      	ldr	r2, [pc, #64]	; (3cdc <IRDRV_Init+0x98>)
    3c9c:	2323      	movs	r3, #35	; 0x23
    3c9e:	210f      	movs	r1, #15
    3ca0:	54d1      	strb	r1, [r2, r3]
  /* DAC0_C1: DMAEN=0,??=0,??=0,??=0,??=0,DACBFMD=0,??=0,DACBFEN=0 */
  DAC0_C1 = 0x00U;
    3ca2:	4a0e      	ldr	r2, [pc, #56]	; (3cdc <IRDRV_Init+0x98>)
    3ca4:	2322      	movs	r3, #34	; 0x22
    3ca6:	2100      	movs	r1, #0
    3ca8:	54d1      	strb	r1, [r2, r3]
  /* DAC0_SR: ??=0,??=0,??=0,??=0,??=0,??=0,DACBFRPTF=0,DACBFRPBF=0 */
  DAC0_SR = 0x00U;
    3caa:	4a0c      	ldr	r2, [pc, #48]	; (3cdc <IRDRV_Init+0x98>)
    3cac:	2320      	movs	r3, #32
    3cae:	2100      	movs	r1, #0
    3cb0:	54d1      	strb	r1, [r2, r3]
  /* DAC0_C0: DACEN=1,DACRFS=0,DACTRGSEL=0,DACSWTRG=0,LPEN=0,??=0,DACBTIEN=0,DACBBIEN=0 */
  DAC0_C0 = DAC_C0_DACEN_MASK;
    3cb2:	4a0a      	ldr	r2, [pc, #40]	; (3cdc <IRDRV_Init+0x98>)
    3cb4:	2321      	movs	r3, #33	; 0x21
    3cb6:	2180      	movs	r1, #128	; 0x80
    3cb8:	54d1      	strb	r1, [r2, r3]
  DeviceDataPtr->EnUser = TRUE;        /* Set the flag "device enabled by user" */
    3cba:	68fb      	ldr	r3, [r7, #12]
    3cbc:	2201      	movs	r2, #1
    3cbe:	701a      	strb	r2, [r3, #0]
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_IRDRV_ID,DeviceDataPtr);
    3cc0:	4b09      	ldr	r3, [pc, #36]	; (3ce8 <IRDRV_Init+0xa4>)
    3cc2:	68fa      	ldr	r2, [r7, #12]
    3cc4:	611a      	str	r2, [r3, #16]
  return ((LDD_TDeviceData*)DeviceDataPtr); /* Return pointer to the data data structure */
    3cc6:	68fb      	ldr	r3, [r7, #12]
}
    3cc8:	1c18      	adds	r0, r3, #0
    3cca:	46bd      	mov	sp, r7
    3ccc:	b004      	add	sp, #16
    3cce:	bd80      	pop	{r7, pc}
    3cd0:	20000098 	.word	0x20000098
    3cd4:	40047000 	.word	0x40047000
    3cd8:	0000103c 	.word	0x0000103c
    3cdc:	4003f000 	.word	0x4003f000
    3ce0:	4004d000 	.word	0x4004d000
    3ce4:	fefff8ff 	.word	0xfefff8ff
    3ce8:	20000024 	.word	0x20000024

00003cec <IFsh1_Init>:
**     Description :
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void IFsh1_Init(void)
{
    3cec:	b580      	push	{r7, lr}
    3cee:	af00      	add	r7, sp, #0
  IntFlashLdd1_DevDataPtr = IntFlashLdd1_Init(NULL);
    3cf0:	2000      	movs	r0, #0
    3cf2:	f7ff ff79 	bl	3be8 <IntFlashLdd1_Init>
    3cf6:	1c02      	adds	r2, r0, #0
    3cf8:	4b04      	ldr	r3, [pc, #16]	; (3d0c <IFsh1_Init+0x20>)
    3cfa:	601a      	str	r2, [r3, #0]
  IFsh1_CmdPending = FALSE;
    3cfc:	4b04      	ldr	r3, [pc, #16]	; (3d10 <IFsh1_Init+0x24>)
    3cfe:	2200      	movs	r2, #0
    3d00:	701a      	strb	r2, [r3, #0]
  IFsh1_EnEvent = TRUE;                /* Remember events state */
    3d02:	4b04      	ldr	r3, [pc, #16]	; (3d14 <IFsh1_Init+0x28>)
    3d04:	2201      	movs	r2, #1
    3d06:	701a      	strb	r2, [r3, #0]
}
    3d08:	46bd      	mov	sp, r7
    3d0a:	bd80      	pop	{r7, pc}
    3d0c:	200000a8 	.word	0x200000a8
    3d10:	200000a4 	.word	0x200000a4
    3d14:	200000a5 	.word	0x200000a5

00003d18 <ExtIntLdd1_Init>:
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* ExtIntLdd1_Init(LDD_TUserData *UserDataPtr)
{
    3d18:	b580      	push	{r7, lr}
    3d1a:	b084      	sub	sp, #16
    3d1c:	af00      	add	r7, sp, #0
    3d1e:	6078      	str	r0, [r7, #4]
  /* Allocate LDD device structure */
  ExtIntLdd1_TDeviceData *DeviceDataPrv;

  /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
    3d20:	4b1a      	ldr	r3, [pc, #104]	; (3d8c <ExtIntLdd1_Init+0x74>)
    3d22:	60fb      	str	r3, [r7, #12]
  /* Store the UserData pointer */
  DeviceDataPrv->UserData = UserDataPtr;
    3d24:	68fb      	ldr	r3, [r7, #12]
    3d26:	687a      	ldr	r2, [r7, #4]
    3d28:	601a      	str	r2, [r3, #0]
  /* Interrupt vector(s) allocation */
  /* {Default RTOS Adapter} Set interrupt vector: IVT is static, ISR parameter is passed by the global variable */
  INT_PORTC_PORTD__DEFAULT_RTOS_ISRPARAM = DeviceDataPrv;
    3d2a:	4b19      	ldr	r3, [pc, #100]	; (3d90 <ExtIntLdd1_Init+0x78>)
    3d2c:	68fa      	ldr	r2, [r7, #12]
    3d2e:	601a      	str	r2, [r3, #0]
  /* Initialization of Port Control registers */
  /* PORTC_PCR6: ISF=0,MUX=1 */
  PORTC_PCR6 = (uint32_t)((PORTC_PCR6 & (uint32_t)~(uint32_t)(
    3d30:	4b18      	ldr	r3, [pc, #96]	; (3d94 <ExtIntLdd1_Init+0x7c>)
    3d32:	4a18      	ldr	r2, [pc, #96]	; (3d94 <ExtIntLdd1_Init+0x7c>)
    3d34:	6991      	ldr	r1, [r2, #24]
    3d36:	4a18      	ldr	r2, [pc, #96]	; (3d98 <ExtIntLdd1_Init+0x80>)
    3d38:	400a      	ands	r2, r1
    3d3a:	2180      	movs	r1, #128	; 0x80
    3d3c:	0049      	lsls	r1, r1, #1
    3d3e:	430a      	orrs	r2, r1
    3d40:	619a      	str	r2, [r3, #24]
                PORT_PCR_MUX(0x06)
               )) | (uint32_t)(
                PORT_PCR_MUX(0x01)
               ));
  /* PORTC_PCR6: ISF=1,IRQC=0x0A */
  PORTC_PCR6 = (uint32_t)((PORTC_PCR6 & (uint32_t)~(uint32_t)(
    3d42:	4b14      	ldr	r3, [pc, #80]	; (3d94 <ExtIntLdd1_Init+0x7c>)
    3d44:	4a13      	ldr	r2, [pc, #76]	; (3d94 <ExtIntLdd1_Init+0x7c>)
    3d46:	6991      	ldr	r1, [r2, #24]
    3d48:	4a14      	ldr	r2, [pc, #80]	; (3d9c <ExtIntLdd1_Init+0x84>)
    3d4a:	400a      	ands	r2, r1
    3d4c:	2185      	movs	r1, #133	; 0x85
    3d4e:	0449      	lsls	r1, r1, #17
    3d50:	430a      	orrs	r2, r1
    3d52:	619a      	str	r2, [r3, #24]
               )) | (uint32_t)(
                PORT_PCR_ISF_MASK |
                PORT_PCR_IRQC(0x0A)
               ));
  /* NVIC_IPR7: PRI_31=0x80 */
  NVIC_IPR7 = (uint32_t)((NVIC_IPR7 & (uint32_t)~(uint32_t)(
    3d54:	4a12      	ldr	r2, [pc, #72]	; (3da0 <ExtIntLdd1_Init+0x88>)
    3d56:	4912      	ldr	r1, [pc, #72]	; (3da0 <ExtIntLdd1_Init+0x88>)
    3d58:	23c7      	movs	r3, #199	; 0xc7
    3d5a:	009b      	lsls	r3, r3, #2
    3d5c:	58cb      	ldr	r3, [r1, r3]
    3d5e:	021b      	lsls	r3, r3, #8
    3d60:	0a1b      	lsrs	r3, r3, #8
    3d62:	2180      	movs	r1, #128	; 0x80
    3d64:	0609      	lsls	r1, r1, #24
    3d66:	4319      	orrs	r1, r3
    3d68:	23c7      	movs	r3, #199	; 0xc7
    3d6a:	009b      	lsls	r3, r3, #2
    3d6c:	50d1      	str	r1, [r2, r3]
               NVIC_IP_PRI_31(0x7F)
              )) | (uint32_t)(
               NVIC_IP_PRI_31(0x80)
              ));
  /* NVIC_ISER: SETENA|=0x80000000 */
  NVIC_ISER |= NVIC_ISER_SETENA(0x80000000);
    3d6e:	4b0c      	ldr	r3, [pc, #48]	; (3da0 <ExtIntLdd1_Init+0x88>)
    3d70:	4a0b      	ldr	r2, [pc, #44]	; (3da0 <ExtIntLdd1_Init+0x88>)
    3d72:	6812      	ldr	r2, [r2, #0]
    3d74:	2180      	movs	r1, #128	; 0x80
    3d76:	0609      	lsls	r1, r1, #24
    3d78:	430a      	orrs	r2, r1
    3d7a:	601a      	str	r2, [r3, #0]
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_ExtIntLdd1_ID,DeviceDataPrv);
    3d7c:	4b09      	ldr	r3, [pc, #36]	; (3da4 <ExtIntLdd1_Init+0x8c>)
    3d7e:	68fa      	ldr	r2, [r7, #12]
    3d80:	64da      	str	r2, [r3, #76]	; 0x4c
  return ((LDD_TDeviceData *)DeviceDataPrv);
    3d82:	68fb      	ldr	r3, [r7, #12]
}
    3d84:	1c18      	adds	r0, r3, #0
    3d86:	46bd      	mov	sp, r7
    3d88:	b004      	add	sp, #16
    3d8a:	bd80      	pop	{r7, pc}
    3d8c:	200000ac 	.word	0x200000ac
    3d90:	200000b0 	.word	0x200000b0
    3d94:	4004b000 	.word	0x4004b000
    3d98:	fefff8ff 	.word	0xfefff8ff
    3d9c:	fef0ffff 	.word	0xfef0ffff
    3da0:	e000e100 	.word	0xe000e100
    3da4:	20000024 	.word	0x20000024

00003da8 <ExtIntLdd1_Interrupt>:
**         and eventually invokes event(s) of the component.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void ExtIntLdd1_Interrupt(void)
{
    3da8:	b580      	push	{r7, lr}
    3daa:	b082      	sub	sp, #8
    3dac:	af00      	add	r7, sp, #0
  /* {Default RTOS Adapter} ISR parameter is passed through the global variable */
  ExtIntLdd1_TDeviceDataPtr DeviceDataPrv = INT_PORTC_PORTD__DEFAULT_RTOS_ISRPARAM;
    3dae:	4b0c      	ldr	r3, [pc, #48]	; (3de0 <ExtIntLdd1_Interrupt+0x38>)
    3db0:	681b      	ldr	r3, [r3, #0]
    3db2:	607b      	str	r3, [r7, #4]

  /* Check the pin interrupt flag of the shared interrupt */
  if (PORT_PDD_GetPinInterruptFlag(PORTC_BASE_PTR, ExtIntLdd1_PIN_INDEX)) {
    3db4:	4b0b      	ldr	r3, [pc, #44]	; (3de4 <ExtIntLdd1_Interrupt+0x3c>)
    3db6:	699a      	ldr	r2, [r3, #24]
    3db8:	2380      	movs	r3, #128	; 0x80
    3dba:	045b      	lsls	r3, r3, #17
    3dbc:	4013      	ands	r3, r2
    3dbe:	d00b      	beq.n	3dd8 <ExtIntLdd1_Interrupt+0x30>
    /* Clear the interrupt flag */
    PORT_PDD_ClearPinInterruptFlag(PORTC_BASE_PTR, ExtIntLdd1_PIN_INDEX);
    3dc0:	4b08      	ldr	r3, [pc, #32]	; (3de4 <ExtIntLdd1_Interrupt+0x3c>)
    3dc2:	4a08      	ldr	r2, [pc, #32]	; (3de4 <ExtIntLdd1_Interrupt+0x3c>)
    3dc4:	6992      	ldr	r2, [r2, #24]
    3dc6:	2180      	movs	r1, #128	; 0x80
    3dc8:	0449      	lsls	r1, r1, #17
    3dca:	430a      	orrs	r2, r1
    3dcc:	619a      	str	r2, [r3, #24]
    /* Call OnInterrupt event */
    ExtIntLdd1_OnInterrupt(DeviceDataPrv->UserData);
    3dce:	687b      	ldr	r3, [r7, #4]
    3dd0:	681b      	ldr	r3, [r3, #0]
    3dd2:	1c18      	adds	r0, r3, #0
    3dd4:	f7ff fd56 	bl	3884 <ExtIntLdd1_OnInterrupt>
  }
}
    3dd8:	46bd      	mov	sp, r7
    3dda:	b002      	add	sp, #8
    3ddc:	bd80      	pop	{r7, pc}
    3dde:	46c0      	nop			; (mov r8, r8)
    3de0:	200000b0 	.word	0x200000b0
    3de4:	4004b000 	.word	0x4004b000

00003de8 <Cpu_GetLLSWakeUpFlags>:
**                           source caused the MCU to exit LLS or VLLSx
**                           low power mode.
*/
/* ===================================================================*/
uint32_t Cpu_GetLLSWakeUpFlags(void)
{
    3de8:	b580      	push	{r7, lr}
    3dea:	b082      	sub	sp, #8
    3dec:	af00      	add	r7, sp, #0
  uint32_t Flags;

  Flags = LLWU_F1;
    3dee:	4b17      	ldr	r3, [pc, #92]	; (3e4c <Cpu_GetLLSWakeUpFlags+0x64>)
    3df0:	795b      	ldrb	r3, [r3, #5]
    3df2:	b2db      	uxtb	r3, r3
    3df4:	607b      	str	r3, [r7, #4]
  Flags |= (uint32_t)((uint32_t)LLWU_F2 << 8U);
    3df6:	4b15      	ldr	r3, [pc, #84]	; (3e4c <Cpu_GetLLSWakeUpFlags+0x64>)
    3df8:	799b      	ldrb	r3, [r3, #6]
    3dfa:	b2db      	uxtb	r3, r3
    3dfc:	021b      	lsls	r3, r3, #8
    3dfe:	687a      	ldr	r2, [r7, #4]
    3e00:	4313      	orrs	r3, r2
    3e02:	607b      	str	r3, [r7, #4]
  Flags |= (uint32_t)((uint32_t)LLWU_F3 << 16U);
    3e04:	4b11      	ldr	r3, [pc, #68]	; (3e4c <Cpu_GetLLSWakeUpFlags+0x64>)
    3e06:	79db      	ldrb	r3, [r3, #7]
    3e08:	b2db      	uxtb	r3, r3
    3e0a:	041b      	lsls	r3, r3, #16
    3e0c:	687a      	ldr	r2, [r7, #4]
    3e0e:	4313      	orrs	r3, r2
    3e10:	607b      	str	r3, [r7, #4]
  if ((LLWU_FILT1 & 0x80U) != 0x00U ) {
    3e12:	4b0e      	ldr	r3, [pc, #56]	; (3e4c <Cpu_GetLLSWakeUpFlags+0x64>)
    3e14:	7a1b      	ldrb	r3, [r3, #8]
    3e16:	b2db      	uxtb	r3, r3
    3e18:	b2db      	uxtb	r3, r3
    3e1a:	b25b      	sxtb	r3, r3
    3e1c:	2b00      	cmp	r3, #0
    3e1e:	da04      	bge.n	3e2a <Cpu_GetLLSWakeUpFlags+0x42>
    Flags |= LLWU_FILTER1;
    3e20:	687b      	ldr	r3, [r7, #4]
    3e22:	2280      	movs	r2, #128	; 0x80
    3e24:	0452      	lsls	r2, r2, #17
    3e26:	4313      	orrs	r3, r2
    3e28:	607b      	str	r3, [r7, #4]
  }
  if ((LLWU_FILT2 & 0x80U) != 0x00U ) {
    3e2a:	4b08      	ldr	r3, [pc, #32]	; (3e4c <Cpu_GetLLSWakeUpFlags+0x64>)
    3e2c:	7a5b      	ldrb	r3, [r3, #9]
    3e2e:	b2db      	uxtb	r3, r3
    3e30:	b2db      	uxtb	r3, r3
    3e32:	b25b      	sxtb	r3, r3
    3e34:	2b00      	cmp	r3, #0
    3e36:	da04      	bge.n	3e42 <Cpu_GetLLSWakeUpFlags+0x5a>
    Flags |= LLWU_FILTER2;
    3e38:	687b      	ldr	r3, [r7, #4]
    3e3a:	2280      	movs	r2, #128	; 0x80
    3e3c:	0492      	lsls	r2, r2, #18
    3e3e:	4313      	orrs	r3, r2
    3e40:	607b      	str	r3, [r7, #4]
  }
  return Flags;
    3e42:	687b      	ldr	r3, [r7, #4]
}
    3e44:	1c18      	adds	r0, r3, #0
    3e46:	46bd      	mov	sp, r7
    3e48:	b002      	add	sp, #8
    3e4a:	bd80      	pop	{r7, pc}
    3e4c:	4007c000 	.word	0x4007c000

00003e50 <Cpu_ivINT_PORTC_PORTD>:
**         several components.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Cpu_ivINT_PORTC_PORTD)
{
    3e50:	b580      	push	{r7, lr}
    3e52:	af00      	add	r7, sp, #0
  LatchCurrent_Interrupt();            /* Call the service routine */
    3e54:	f7ff fe80 	bl	3b58 <LatchCurrent_Interrupt>
  ExtIntLdd1_Interrupt();              /* Call the service routine */
    3e58:	f7ff ffa6 	bl	3da8 <ExtIntLdd1_Interrupt>
}
    3e5c:	46bd      	mov	sp, r7
    3e5e:	bd80      	pop	{r7, pc}

00003e60 <Cpu_INT_LLWInterrupt>:
**         This ISR services the 'LLWU' interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Cpu_INT_LLWInterrupt)
{
    3e60:	b580      	push	{r7, lr}
    3e62:	af00      	add	r7, sp, #0
  Cpu_OnLLSWakeUpINT();
    3e64:	f001 ff54 	bl	5d10 <Cpu_OnLLSWakeUpINT>
  /* LLWU_F1: WUF7=1,WUF6=1,WUF5=1,WUF4=1,WUF3=1,WUF2=1,WUF1=1,WUF0=1 */
  LLWU_F1 = LLWU_F1_WUF7_MASK |
    3e68:	4b0e      	ldr	r3, [pc, #56]	; (3ea4 <Cpu_INT_LLWInterrupt+0x44>)
    3e6a:	22ff      	movs	r2, #255	; 0xff
    3e6c:	715a      	strb	r2, [r3, #5]
            LLWU_F1_WUF3_MASK |
            LLWU_F1_WUF2_MASK |
            LLWU_F1_WUF1_MASK |
            LLWU_F1_WUF0_MASK;         /* Clear external pin flags */
  /* LLWU_F2: WUF15=1,WUF14=1,WUF13=1,WUF12=1,WUF11=1,WUF10=1,WUF9=1,WUF8=1 */
  LLWU_F2 = LLWU_F2_WUF15_MASK |
    3e6e:	4b0d      	ldr	r3, [pc, #52]	; (3ea4 <Cpu_INT_LLWInterrupt+0x44>)
    3e70:	22ff      	movs	r2, #255	; 0xff
    3e72:	719a      	strb	r2, [r3, #6]
            LLWU_F2_WUF11_MASK |
            LLWU_F2_WUF10_MASK |
            LLWU_F2_WUF9_MASK |
            LLWU_F2_WUF8_MASK;         /* Clear external pin flags */
  /* LLWU_F3: MWUF7=1,MWUF6=1,MWUF5=1,MWUF4=1,MWUF3=1,MWUF2=1,MWUF1=1,MWUF0=1 */
  LLWU_F3 = LLWU_F3_MWUF7_MASK |
    3e74:	4b0b      	ldr	r3, [pc, #44]	; (3ea4 <Cpu_INT_LLWInterrupt+0x44>)
    3e76:	22ff      	movs	r2, #255	; 0xff
    3e78:	71da      	strb	r2, [r3, #7]
            LLWU_F3_MWUF3_MASK |
            LLWU_F3_MWUF2_MASK |
            LLWU_F3_MWUF1_MASK |
            LLWU_F3_MWUF0_MASK;        /* Clear Error detect flag */
  /* LLWU_FILT1: FILTF=1 */
  LLWU_FILT1 |= LLWU_FILT1_FILTF_MASK; /* Clear filter flag */
    3e7a:	4b0a      	ldr	r3, [pc, #40]	; (3ea4 <Cpu_INT_LLWInterrupt+0x44>)
    3e7c:	4a09      	ldr	r2, [pc, #36]	; (3ea4 <Cpu_INT_LLWInterrupt+0x44>)
    3e7e:	7a12      	ldrb	r2, [r2, #8]
    3e80:	b2d2      	uxtb	r2, r2
    3e82:	2180      	movs	r1, #128	; 0x80
    3e84:	4249      	negs	r1, r1
    3e86:	430a      	orrs	r2, r1
    3e88:	b2d2      	uxtb	r2, r2
    3e8a:	721a      	strb	r2, [r3, #8]
  /* LLWU_FILT2: FILTF=1 */
  LLWU_FILT2 |= LLWU_FILT2_FILTF_MASK; /* Clear filter flag */
    3e8c:	4b05      	ldr	r3, [pc, #20]	; (3ea4 <Cpu_INT_LLWInterrupt+0x44>)
    3e8e:	4a05      	ldr	r2, [pc, #20]	; (3ea4 <Cpu_INT_LLWInterrupt+0x44>)
    3e90:	7a52      	ldrb	r2, [r2, #9]
    3e92:	b2d2      	uxtb	r2, r2
    3e94:	2180      	movs	r1, #128	; 0x80
    3e96:	4249      	negs	r1, r1
    3e98:	430a      	orrs	r2, r1
    3e9a:	b2d2      	uxtb	r2, r2
    3e9c:	725a      	strb	r2, [r3, #9]

}
    3e9e:	46bd      	mov	sp, r7
    3ea0:	bd80      	pop	{r7, pc}
    3ea2:	46c0      	nop			; (mov r8, r8)
    3ea4:	4007c000 	.word	0x4007c000

00003ea8 <Cpu_Interrupt>:
**         This ISR services an unused interrupt/exception vector.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Cpu_Interrupt)
{
    3ea8:	b580      	push	{r7, lr}
    3eaa:	af00      	add	r7, sp, #0
  /* This code can be changed using the CPU component property "Build Options / Unhandled int code" */
  UnUseINT();
    3eac:	f001 ff68 	bl	5d80 <UnUseINT>
}
    3eb0:	46bd      	mov	sp, r7
    3eb2:	bd80      	pop	{r7, pc}

00003eb4 <__init_hardware>:
/*** !!! Here you can place your own code using property "User data declarations" on the build options tab. !!! ***/

/*lint -esym(765,__init_hardware) Disable MISRA rule (8.10) checking for symbols (__init_hardware). The function is linked to the EWL library */
/*lint -esym(765,Cpu_Interrupt) Disable MISRA rule (8.10) checking for symbols (Cpu_Interrupt). */
void __init_hardware(void)
{
    3eb4:	b580      	push	{r7, lr}
    3eb6:	af00      	add	r7, sp, #0

  /*** !!! Here you can place your own code before PE initialization using property "User code before PE initialization" on the build options tab. !!! ***/

  /*** ### MKL16Z128VFM4 "Cpu" init code ... ***/
  /*** PE initialization code after reset ***/
  SCB_VTOR = (uint32_t)(&__vect_table); /* Set the interrupt vector table position */
    3eb8:	4a41      	ldr	r2, [pc, #260]	; (3fc0 <__init_hardware+0x10c>)
    3eba:	4942      	ldr	r1, [pc, #264]	; (3fc4 <__init_hardware+0x110>)
    3ebc:	4b42      	ldr	r3, [pc, #264]	; (3fc8 <__init_hardware+0x114>)
    3ebe:	50d1      	str	r1, [r2, r3]
  /* System clock initialization */
  /* SIM_CLKDIV1: OUTDIV1=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,OUTDIV4=3,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0 */
  SIM_CLKDIV1 = (SIM_CLKDIV1_OUTDIV1(0x00) | SIM_CLKDIV1_OUTDIV4(0x03)); /* Set the system prescalers to safe value */
    3ec0:	4a42      	ldr	r2, [pc, #264]	; (3fcc <__init_hardware+0x118>)
    3ec2:	4b43      	ldr	r3, [pc, #268]	; (3fd0 <__init_hardware+0x11c>)
    3ec4:	21c0      	movs	r1, #192	; 0xc0
    3ec6:	0289      	lsls	r1, r1, #10
    3ec8:	50d1      	str	r1, [r2, r3]
  /* SIM_SCGC5: PORTE=1,PORTD=1,PORTC=1,PORTB=1,PORTA=1 */
  SIM_SCGC5 |= SIM_SCGC5_PORTE_MASK |
    3eca:	4a40      	ldr	r2, [pc, #256]	; (3fcc <__init_hardware+0x118>)
    3ecc:	493f      	ldr	r1, [pc, #252]	; (3fcc <__init_hardware+0x118>)
    3ece:	4b41      	ldr	r3, [pc, #260]	; (3fd4 <__init_hardware+0x120>)
    3ed0:	58cb      	ldr	r3, [r1, r3]
    3ed2:	21f8      	movs	r1, #248	; 0xf8
    3ed4:	0189      	lsls	r1, r1, #6
    3ed6:	4319      	orrs	r1, r3
    3ed8:	4b3e      	ldr	r3, [pc, #248]	; (3fd4 <__init_hardware+0x120>)
    3eda:	50d1      	str	r1, [r2, r3]
               SIM_SCGC5_PORTD_MASK |
               SIM_SCGC5_PORTC_MASK |
               SIM_SCGC5_PORTB_MASK |
               SIM_SCGC5_PORTA_MASK;   /* Enable clock gate for ports to enable pin routing */
  /* SIM_SCGC5: LPTMR=1 */
  SIM_SCGC5 |= SIM_SCGC5_LPTMR_MASK;
    3edc:	4a3b      	ldr	r2, [pc, #236]	; (3fcc <__init_hardware+0x118>)
    3ede:	493b      	ldr	r1, [pc, #236]	; (3fcc <__init_hardware+0x118>)
    3ee0:	4b3c      	ldr	r3, [pc, #240]	; (3fd4 <__init_hardware+0x120>)
    3ee2:	58cb      	ldr	r3, [r1, r3]
    3ee4:	2101      	movs	r1, #1
    3ee6:	4319      	orrs	r1, r3
    3ee8:	4b3a      	ldr	r3, [pc, #232]	; (3fd4 <__init_hardware+0x120>)
    3eea:	50d1      	str	r1, [r2, r3]
  if ((PMC_REGSC & PMC_REGSC_ACKISO_MASK) != 0x0U) {
    3eec:	4b3a      	ldr	r3, [pc, #232]	; (3fd8 <__init_hardware+0x124>)
    3eee:	789b      	ldrb	r3, [r3, #2]
    3ef0:	b2db      	uxtb	r3, r3
    3ef2:	1c1a      	adds	r2, r3, #0
    3ef4:	2308      	movs	r3, #8
    3ef6:	4013      	ands	r3, r2
    3ef8:	d007      	beq.n	3f0a <__init_hardware+0x56>
    /* PMC_REGSC: ACKISO=1 */
    PMC_REGSC |= PMC_REGSC_ACKISO_MASK; /* Release IO pads after wakeup from VLLS mode. */
    3efa:	4b37      	ldr	r3, [pc, #220]	; (3fd8 <__init_hardware+0x124>)
    3efc:	4a36      	ldr	r2, [pc, #216]	; (3fd8 <__init_hardware+0x124>)
    3efe:	7892      	ldrb	r2, [r2, #2]
    3f00:	b2d2      	uxtb	r2, r2
    3f02:	2108      	movs	r1, #8
    3f04:	430a      	orrs	r2, r1
    3f06:	b2d2      	uxtb	r2, r2
    3f08:	709a      	strb	r2, [r3, #2]
  }
  /* SIM_CLKDIV1: OUTDIV1=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,OUTDIV4=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0 */
  SIM_CLKDIV1 = (SIM_CLKDIV1_OUTDIV1(0x00) | SIM_CLKDIV1_OUTDIV4(0x00)); /* Update system prescalers */
    3f0a:	4a30      	ldr	r2, [pc, #192]	; (3fcc <__init_hardware+0x118>)
    3f0c:	4b30      	ldr	r3, [pc, #192]	; (3fd0 <__init_hardware+0x11c>)
    3f0e:	2100      	movs	r1, #0
    3f10:	50d1      	str	r1, [r2, r3]
  /* SIM_SOPT2: PLLFLLSEL=0 */
  SIM_SOPT2 &= (uint32_t)~(uint32_t)(SIM_SOPT2_PLLFLLSEL_MASK); /* Select FLL as a clock source for various peripherals */
    3f12:	4a2e      	ldr	r2, [pc, #184]	; (3fcc <__init_hardware+0x118>)
    3f14:	492d      	ldr	r1, [pc, #180]	; (3fcc <__init_hardware+0x118>)
    3f16:	4b31      	ldr	r3, [pc, #196]	; (3fdc <__init_hardware+0x128>)
    3f18:	58c9      	ldr	r1, [r1, r3]
    3f1a:	4b31      	ldr	r3, [pc, #196]	; (3fe0 <__init_hardware+0x12c>)
    3f1c:	4019      	ands	r1, r3
    3f1e:	4b2f      	ldr	r3, [pc, #188]	; (3fdc <__init_hardware+0x128>)
    3f20:	50d1      	str	r1, [r2, r3]
  /* SIM_SOPT1: OSC32KSEL=3 */
  SIM_SOPT1 |= SIM_SOPT1_OSC32KSEL(0x03); /* LPO 1kHz oscillator drives 32 kHz clock for various peripherals */
    3f22:	4b2a      	ldr	r3, [pc, #168]	; (3fcc <__init_hardware+0x118>)
    3f24:	4a29      	ldr	r2, [pc, #164]	; (3fcc <__init_hardware+0x118>)
    3f26:	6812      	ldr	r2, [r2, #0]
    3f28:	21c0      	movs	r1, #192	; 0xc0
    3f2a:	0309      	lsls	r1, r1, #12
    3f2c:	430a      	orrs	r2, r1
    3f2e:	601a      	str	r2, [r3, #0]
  /* SIM_SOPT2: TPMSRC=1 */
  SIM_SOPT2 = (uint32_t)((SIM_SOPT2 & (uint32_t)~(uint32_t)(
    3f30:	4a26      	ldr	r2, [pc, #152]	; (3fcc <__init_hardware+0x118>)
    3f32:	4926      	ldr	r1, [pc, #152]	; (3fcc <__init_hardware+0x118>)
    3f34:	4b29      	ldr	r3, [pc, #164]	; (3fdc <__init_hardware+0x128>)
    3f36:	58c9      	ldr	r1, [r1, r3]
    3f38:	4b2a      	ldr	r3, [pc, #168]	; (3fe4 <__init_hardware+0x130>)
    3f3a:	400b      	ands	r3, r1
    3f3c:	2180      	movs	r1, #128	; 0x80
    3f3e:	0449      	lsls	r1, r1, #17
    3f40:	4319      	orrs	r1, r3
    3f42:	4b26      	ldr	r3, [pc, #152]	; (3fdc <__init_hardware+0x128>)
    3f44:	50d1      	str	r1, [r2, r3]
               SIM_SOPT2_TPMSRC(0x02)
              )) | (uint32_t)(
               SIM_SOPT2_TPMSRC(0x01)
              ));                      /* Set the TPM clock */
  /* MCG_SC: FCRDIV=0 */
  MCG_SC &= (uint8_t)~(uint8_t)(MCG_SC_FCRDIV(0x07));
    3f46:	4b28      	ldr	r3, [pc, #160]	; (3fe8 <__init_hardware+0x134>)
    3f48:	4a27      	ldr	r2, [pc, #156]	; (3fe8 <__init_hardware+0x134>)
    3f4a:	7a12      	ldrb	r2, [r2, #8]
    3f4c:	b2d2      	uxtb	r2, r2
    3f4e:	210e      	movs	r1, #14
    3f50:	438a      	bics	r2, r1
    3f52:	b2d2      	uxtb	r2, r2
    3f54:	721a      	strb	r2, [r3, #8]
  /* Switch to FEI Mode */
  /* MCG_C1: CLKS=0,FRDIV=0,IREFS=1,IRCLKEN=1,IREFSTEN=1 */
  MCG_C1 = MCG_C1_CLKS(0x00) |
    3f56:	4b24      	ldr	r3, [pc, #144]	; (3fe8 <__init_hardware+0x134>)
    3f58:	2207      	movs	r2, #7
    3f5a:	701a      	strb	r2, [r3, #0]
           MCG_C1_FRDIV(0x00) |
           MCG_C1_IREFS_MASK |
           MCG_C1_IRCLKEN_MASK |
           MCG_C1_IREFSTEN_MASK;
  /* MCG_C2: LOCRE0=0,RANGE0=0,HGO0=0,EREFS0=0,LP=0,IRCS=1 */
  MCG_C2 = (uint8_t)((MCG_C2 & (uint8_t)~(uint8_t)(
    3f5c:	4b22      	ldr	r3, [pc, #136]	; (3fe8 <__init_hardware+0x134>)
    3f5e:	4a22      	ldr	r2, [pc, #136]	; (3fe8 <__init_hardware+0x134>)
    3f60:	7852      	ldrb	r2, [r2, #1]
    3f62:	b2d2      	uxtb	r2, r2
    3f64:	b2d2      	uxtb	r2, r2
    3f66:	1c11      	adds	r1, r2, #0
    3f68:	2240      	movs	r2, #64	; 0x40
    3f6a:	400a      	ands	r2, r1
    3f6c:	b2d2      	uxtb	r2, r2
    3f6e:	2101      	movs	r1, #1
    3f70:	430a      	orrs	r2, r1
    3f72:	b2d2      	uxtb	r2, r2
    3f74:	b2d2      	uxtb	r2, r2
    3f76:	705a      	strb	r2, [r3, #1]
            MCG_C2_LP_MASK
           )) | (uint8_t)(
            MCG_C2_IRCS_MASK
           ));
  /* MCG_C4: DMX32=0,DRST_DRS=0 */
  MCG_C4 &= (uint8_t)~(uint8_t)((MCG_C4_DMX32_MASK | MCG_C4_DRST_DRS(0x03)));
    3f78:	4b1b      	ldr	r3, [pc, #108]	; (3fe8 <__init_hardware+0x134>)
    3f7a:	4a1b      	ldr	r2, [pc, #108]	; (3fe8 <__init_hardware+0x134>)
    3f7c:	78d2      	ldrb	r2, [r2, #3]
    3f7e:	b2d1      	uxtb	r1, r2
    3f80:	221f      	movs	r2, #31
    3f82:	400a      	ands	r2, r1
    3f84:	b2d2      	uxtb	r2, r2
    3f86:	70da      	strb	r2, [r3, #3]
  /* OSC0_CR: ERCLKEN=0,??=0,EREFSTEN=0,??=0,SC2P=0,SC4P=0,SC8P=0,SC16P=0 */
  OSC0_CR = 0x00U;
    3f88:	4b18      	ldr	r3, [pc, #96]	; (3fec <__init_hardware+0x138>)
    3f8a:	2200      	movs	r2, #0
    3f8c:	701a      	strb	r2, [r3, #0]
  /* MCG_C5: ??=0,PLLCLKEN0=0,PLLSTEN0=0,PRDIV0=0 */
  MCG_C5 = MCG_C5_PRDIV0(0x00);
    3f8e:	4b16      	ldr	r3, [pc, #88]	; (3fe8 <__init_hardware+0x134>)
    3f90:	2200      	movs	r2, #0
    3f92:	711a      	strb	r2, [r3, #4]
  /* MCG_C6: LOLIE0=0,PLLS=0,CME0=0,VDIV0=0 */
  MCG_C6 = MCG_C6_VDIV0(0x00);
    3f94:	4b14      	ldr	r3, [pc, #80]	; (3fe8 <__init_hardware+0x134>)
    3f96:	2200      	movs	r2, #0
    3f98:	715a      	strb	r2, [r3, #5]
  while((MCG_S & MCG_S_IREFST_MASK) == 0x00U) { /* Check that the source of the FLL reference clock is the internal reference clock. */
    3f9a:	46c0      	nop			; (mov r8, r8)
    3f9c:	4b12      	ldr	r3, [pc, #72]	; (3fe8 <__init_hardware+0x134>)
    3f9e:	799b      	ldrb	r3, [r3, #6]
    3fa0:	b2db      	uxtb	r3, r3
    3fa2:	1c1a      	adds	r2, r3, #0
    3fa4:	2310      	movs	r3, #16
    3fa6:	4013      	ands	r3, r2
    3fa8:	d0f8      	beq.n	3f9c <__init_hardware+0xe8>
  }
  while((MCG_S & 0x0CU) != 0x00U) {    /* Wait until output of the FLL is selected */
    3faa:	46c0      	nop			; (mov r8, r8)
    3fac:	4b0e      	ldr	r3, [pc, #56]	; (3fe8 <__init_hardware+0x134>)
    3fae:	799b      	ldrb	r3, [r3, #6]
    3fb0:	b2db      	uxtb	r3, r3
    3fb2:	1c1a      	adds	r2, r3, #0
    3fb4:	230c      	movs	r3, #12
    3fb6:	4013      	ands	r3, r2
    3fb8:	d1f8      	bne.n	3fac <__init_hardware+0xf8>
  }
  /*** End of PE initialization code after reset ***/

  /*** !!! Here you can place your own code after PE initialization using property "User code after PE initialization" on the build options tab. !!! ***/

}
    3fba:	46bd      	mov	sp, r7
    3fbc:	bd80      	pop	{r7, pc}
    3fbe:	46c0      	nop			; (mov r8, r8)
    3fc0:	e000e000 	.word	0xe000e000
    3fc4:	00002000 	.word	0x00002000
    3fc8:	00000d08 	.word	0x00000d08
    3fcc:	40047000 	.word	0x40047000
    3fd0:	00001044 	.word	0x00001044
    3fd4:	00001038 	.word	0x00001038
    3fd8:	4007d000 	.word	0x4007d000
    3fdc:	00001004 	.word	0x00001004
    3fe0:	fffeffff 	.word	0xfffeffff
    3fe4:	fcffffff 	.word	0xfcffffff
    3fe8:	40064000 	.word	0x40064000
    3fec:	40065000 	.word	0x40065000

00003ff0 <PE_low_level_init>:
**         application initialization code.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void PE_low_level_init(void)
{
    3ff0:	b580      	push	{r7, lr}
    3ff2:	b082      	sub	sp, #8
    3ff4:	af00      	add	r7, sp, #0
  #ifdef PEX_RTOS_INIT
    PEX_RTOS_INIT();                   /* Initialization of the selected RTOS. Macro is defined by the RTOS component. */
  #endif
      /* Initialization of the SIM module */
  /* SIM_SCGC7: DMA=0 */
  SIM_SCGC7 &= (uint32_t)~(uint32_t)(SIM_SCGC7_DMA_MASK);
    3ff6:	4a93      	ldr	r2, [pc, #588]	; (4244 <PE_low_level_init+0x254>)
    3ff8:	4992      	ldr	r1, [pc, #584]	; (4244 <PE_low_level_init+0x254>)
    3ffa:	2382      	movs	r3, #130	; 0x82
    3ffc:	015b      	lsls	r3, r3, #5
    3ffe:	58c9      	ldr	r1, [r1, r3]
    4000:	4b91      	ldr	r3, [pc, #580]	; (4248 <PE_low_level_init+0x258>)
    4002:	4019      	ands	r1, r3
    4004:	2382      	movs	r3, #130	; 0x82
    4006:	015b      	lsls	r3, r3, #5
    4008:	50d1      	str	r1, [r2, r3]
  /* SIM_SCGC4: SPI1=0,SPI0=0,CMP=0,UART2=0,UART1=0,UART0=1,I2C1=0,I2C0=0 */
  SIM_SCGC4 = (uint32_t)((SIM_SCGC4 & (uint32_t)~(uint32_t)(
    400a:	4a8e      	ldr	r2, [pc, #568]	; (4244 <PE_low_level_init+0x254>)
    400c:	498d      	ldr	r1, [pc, #564]	; (4244 <PE_low_level_init+0x254>)
    400e:	4b8f      	ldr	r3, [pc, #572]	; (424c <PE_low_level_init+0x25c>)
    4010:	58c9      	ldr	r1, [r1, r3]
    4012:	4b8f      	ldr	r3, [pc, #572]	; (4250 <PE_low_level_init+0x260>)
    4014:	400b      	ands	r3, r1
    4016:	2180      	movs	r1, #128	; 0x80
    4018:	00c9      	lsls	r1, r1, #3
    401a:	4319      	orrs	r1, r3
    401c:	4b8b      	ldr	r3, [pc, #556]	; (424c <PE_low_level_init+0x25c>)
    401e:	50d1      	str	r1, [r2, r3]
               SIM_SCGC4_I2C0_MASK
              )) | (uint32_t)(
               SIM_SCGC4_UART0_MASK
              ));
  /* SIM_SCGC5: PORTE=1,PORTD=1,PORTC=1,PORTB=1,PORTA=1,TSI=0,LPTMR=1 */
  SIM_SCGC5 = (uint32_t)((SIM_SCGC5 & (uint32_t)~(uint32_t)(
    4020:	4a88      	ldr	r2, [pc, #544]	; (4244 <PE_low_level_init+0x254>)
    4022:	4988      	ldr	r1, [pc, #544]	; (4244 <PE_low_level_init+0x254>)
    4024:	4b8b      	ldr	r3, [pc, #556]	; (4254 <PE_low_level_init+0x264>)
    4026:	58c9      	ldr	r1, [r1, r3]
    4028:	4b8b      	ldr	r3, [pc, #556]	; (4258 <PE_low_level_init+0x268>)
    402a:	400b      	ands	r3, r1
    402c:	498b      	ldr	r1, [pc, #556]	; (425c <PE_low_level_init+0x26c>)
    402e:	4319      	orrs	r1, r3
    4030:	4b88      	ldr	r3, [pc, #544]	; (4254 <PE_low_level_init+0x264>)
    4032:	50d1      	str	r1, [r2, r3]
               SIM_SCGC5_PORTB_MASK |
               SIM_SCGC5_PORTA_MASK |
               SIM_SCGC5_LPTMR_MASK
              ));
  /* SIM_SCGC6: DAC0=0,RTC=0,ADC0=0,TPM2=0,TPM1=0,TPM0=0,PIT=0,I2S=0,DMAMUX=0,FTF=1 */
  SIM_SCGC6 = (uint32_t)((SIM_SCGC6 & (uint32_t)~(uint32_t)(
    4034:	4a83      	ldr	r2, [pc, #524]	; (4244 <PE_low_level_init+0x254>)
    4036:	4983      	ldr	r1, [pc, #524]	; (4244 <PE_low_level_init+0x254>)
    4038:	4b89      	ldr	r3, [pc, #548]	; (4260 <PE_low_level_init+0x270>)
    403a:	58c9      	ldr	r1, [r1, r3]
    403c:	4b89      	ldr	r3, [pc, #548]	; (4264 <PE_low_level_init+0x274>)
    403e:	400b      	ands	r3, r1
    4040:	2101      	movs	r1, #1
    4042:	4319      	orrs	r1, r3
    4044:	4b86      	ldr	r3, [pc, #536]	; (4260 <PE_low_level_init+0x270>)
    4046:	50d1      	str	r1, [r2, r3]
              )) | (uint32_t)(
               SIM_SCGC6_FTF_MASK
              ));
        /* Initialization of the RCM module */
  /* RCM_RPFW: RSTFLTSEL=0 */
  RCM_RPFW &= (uint8_t)~(uint8_t)(RCM_RPFW_RSTFLTSEL(0x1F));
    4048:	4b87      	ldr	r3, [pc, #540]	; (4268 <PE_low_level_init+0x278>)
    404a:	4a87      	ldr	r2, [pc, #540]	; (4268 <PE_low_level_init+0x278>)
    404c:	7952      	ldrb	r2, [r2, #5]
    404e:	b2d2      	uxtb	r2, r2
    4050:	211f      	movs	r1, #31
    4052:	438a      	bics	r2, r1
    4054:	b2d2      	uxtb	r2, r2
    4056:	715a      	strb	r2, [r3, #5]
  /* RCM_RPFC: RSTFLTSS=0,RSTFLTSRW=0 */
  RCM_RPFC &= (uint8_t)~(uint8_t)(
    4058:	4b83      	ldr	r3, [pc, #524]	; (4268 <PE_low_level_init+0x278>)
    405a:	4a83      	ldr	r2, [pc, #524]	; (4268 <PE_low_level_init+0x278>)
    405c:	7912      	ldrb	r2, [r2, #4]
    405e:	b2d2      	uxtb	r2, r2
    4060:	2107      	movs	r1, #7
    4062:	438a      	bics	r2, r1
    4064:	b2d2      	uxtb	r2, r2
    4066:	711a      	strb	r2, [r3, #4]
               RCM_RPFC_RSTFLTSS_MASK |
               RCM_RPFC_RSTFLTSRW(0x03)
              );
      /* Initialization of the PMC module */
  /* PMC_LVDSC1: LVDACK=1,LVDIE=0,LVDRE=1,LVDV=1 */
  PMC_LVDSC1 = (uint8_t)((PMC_LVDSC1 & (uint8_t)~(uint8_t)(
    4068:	4b80      	ldr	r3, [pc, #512]	; (426c <PE_low_level_init+0x27c>)
    406a:	4a80      	ldr	r2, [pc, #512]	; (426c <PE_low_level_init+0x27c>)
    406c:	7812      	ldrb	r2, [r2, #0]
    406e:	b2d2      	uxtb	r2, r2
    4070:	b2d2      	uxtb	r2, r2
    4072:	2173      	movs	r1, #115	; 0x73
    4074:	438a      	bics	r2, r1
    4076:	b2d2      	uxtb	r2, r2
    4078:	2151      	movs	r1, #81	; 0x51
    407a:	430a      	orrs	r2, r1
    407c:	b2d2      	uxtb	r2, r2
    407e:	b2d2      	uxtb	r2, r2
    4080:	701a      	strb	r2, [r3, #0]
                PMC_LVDSC1_LVDACK_MASK |
                PMC_LVDSC1_LVDRE_MASK |
                PMC_LVDSC1_LVDV(0x01)
               ));
  /* PMC_LVDSC2: LVWACK=1,LVWIE=0,LVWV=3 */
  PMC_LVDSC2 = (uint8_t)((PMC_LVDSC2 & (uint8_t)~(uint8_t)(
    4082:	4b7a      	ldr	r3, [pc, #488]	; (426c <PE_low_level_init+0x27c>)
    4084:	4a79      	ldr	r2, [pc, #484]	; (426c <PE_low_level_init+0x27c>)
    4086:	7852      	ldrb	r2, [r2, #1]
    4088:	b2d2      	uxtb	r2, r2
    408a:	b2d2      	uxtb	r2, r2
    408c:	2163      	movs	r1, #99	; 0x63
    408e:	438a      	bics	r2, r1
    4090:	b2d2      	uxtb	r2, r2
    4092:	2143      	movs	r1, #67	; 0x43
    4094:	430a      	orrs	r2, r1
    4096:	b2d2      	uxtb	r2, r2
    4098:	b2d2      	uxtb	r2, r2
    409a:	705a      	strb	r2, [r3, #1]
               )) | (uint8_t)(
                PMC_LVDSC2_LVWACK_MASK |
                PMC_LVDSC2_LVWV(0x03)
               ));
  /* PMC_REGSC: BGEN=0,ACKISO=0,BGBE=0 */
  PMC_REGSC &= (uint8_t)~(uint8_t)(
    409c:	4b73      	ldr	r3, [pc, #460]	; (426c <PE_low_level_init+0x27c>)
    409e:	4a73      	ldr	r2, [pc, #460]	; (426c <PE_low_level_init+0x27c>)
    40a0:	7892      	ldrb	r2, [r2, #2]
    40a2:	b2d2      	uxtb	r2, r2
    40a4:	2119      	movs	r1, #25
    40a6:	438a      	bics	r2, r1
    40a8:	b2d2      	uxtb	r2, r2
    40aa:	709a      	strb	r2, [r3, #2]
                PMC_REGSC_ACKISO_MASK |
                PMC_REGSC_BGBE_MASK
               );
        /* Initialization of the LLWU module */
  /* LLWU_PE2: WUPE7=0,WUPE6=0,WUPE5=0 */
  LLWU_PE2 &= (uint8_t)~(uint8_t)(
    40ac:	4b70      	ldr	r3, [pc, #448]	; (4270 <PE_low_level_init+0x280>)
    40ae:	4a70      	ldr	r2, [pc, #448]	; (4270 <PE_low_level_init+0x280>)
    40b0:	7852      	ldrb	r2, [r2, #1]
    40b2:	b2d1      	uxtb	r1, r2
    40b4:	2203      	movs	r2, #3
    40b6:	400a      	ands	r2, r1
    40b8:	b2d2      	uxtb	r2, r2
    40ba:	705a      	strb	r2, [r3, #1]
               LLWU_PE2_WUPE7(0x03) |
               LLWU_PE2_WUPE6(0x03) |
               LLWU_PE2_WUPE5(0x03)
              );
  /* LLWU_PE3: WUPE10=2,WUPE9=0,WUPE8=0 */
  LLWU_PE3 = (uint8_t)((LLWU_PE3 & (uint8_t)~(uint8_t)(
    40bc:	4b6c      	ldr	r3, [pc, #432]	; (4270 <PE_low_level_init+0x280>)
    40be:	4a6c      	ldr	r2, [pc, #432]	; (4270 <PE_low_level_init+0x280>)
    40c0:	7892      	ldrb	r2, [r2, #2]
    40c2:	b2d2      	uxtb	r2, r2
    40c4:	b2d2      	uxtb	r2, r2
    40c6:	213f      	movs	r1, #63	; 0x3f
    40c8:	438a      	bics	r2, r1
    40ca:	b2d2      	uxtb	r2, r2
    40cc:	2120      	movs	r1, #32
    40ce:	430a      	orrs	r2, r1
    40d0:	b2d2      	uxtb	r2, r2
    40d2:	b2d2      	uxtb	r2, r2
    40d4:	709a      	strb	r2, [r3, #2]
              LLWU_PE3_WUPE8(0x03)
             )) | (uint8_t)(
              LLWU_PE3_WUPE10(0x02)
             ));
  /* LLWU_PE4: WUPE15=0,WUPE14=0 */
  LLWU_PE4 &= (uint8_t)~(uint8_t)(
    40d6:	4b66      	ldr	r3, [pc, #408]	; (4270 <PE_low_level_init+0x280>)
    40d8:	4a65      	ldr	r2, [pc, #404]	; (4270 <PE_low_level_init+0x280>)
    40da:	78d2      	ldrb	r2, [r2, #3]
    40dc:	b2d1      	uxtb	r1, r2
    40de:	220f      	movs	r2, #15
    40e0:	400a      	ands	r2, r1
    40e2:	b2d2      	uxtb	r2, r2
    40e4:	70da      	strb	r2, [r3, #3]
               LLWU_PE4_WUPE15(0x03) |
               LLWU_PE4_WUPE14(0x03)
              );
  /* LLWU_ME: WUME7=0,WUME5=0,WUME4=0,WUME1=0,WUME0=1 */
  LLWU_ME = (uint8_t)((LLWU_ME & (uint8_t)~(uint8_t)(
    40e6:	4b62      	ldr	r3, [pc, #392]	; (4270 <PE_low_level_init+0x280>)
    40e8:	4a61      	ldr	r2, [pc, #388]	; (4270 <PE_low_level_init+0x280>)
    40ea:	7912      	ldrb	r2, [r2, #4]
    40ec:	b2d2      	uxtb	r2, r2
    40ee:	b2d2      	uxtb	r2, r2
    40f0:	1c11      	adds	r1, r2, #0
    40f2:	224c      	movs	r2, #76	; 0x4c
    40f4:	400a      	ands	r2, r1
    40f6:	b2d2      	uxtb	r2, r2
    40f8:	2101      	movs	r1, #1
    40fa:	430a      	orrs	r2, r1
    40fc:	b2d2      	uxtb	r2, r2
    40fe:	b2d2      	uxtb	r2, r2
    4100:	711a      	strb	r2, [r3, #4]
             LLWU_ME_WUME1_MASK
            )) | (uint8_t)(
             LLWU_ME_WUME0_MASK
            ));
  /* LLWU_FILT1: FILTF=1,FILTE=0,??=0,FILTSEL=0 */
  LLWU_FILT1 = LLWU_FILT1_FILTF_MASK |
    4102:	4b5b      	ldr	r3, [pc, #364]	; (4270 <PE_low_level_init+0x280>)
    4104:	2280      	movs	r2, #128	; 0x80
    4106:	721a      	strb	r2, [r3, #8]
               LLWU_FILT1_FILTE(0x00) |
               LLWU_FILT1_FILTSEL(0x00);
  /* LLWU_FILT2: FILTF=1,FILTE=0,??=0,FILTSEL=0 */
  LLWU_FILT2 = LLWU_FILT2_FILTF_MASK |
    4108:	4b59      	ldr	r3, [pc, #356]	; (4270 <PE_low_level_init+0x280>)
    410a:	2280      	movs	r2, #128	; 0x80
    410c:	725a      	strb	r2, [r3, #9]
               LLWU_FILT2_FILTE(0x00) |
               LLWU_FILT2_FILTSEL(0x00);
  /* SMC_PMPROT: ??=0,??=0,AVLP=0,??=0,ALLS=1,??=0,AVLLS=0,??=0 */
  SMC_PMPROT = SMC_PMPROT_ALLS_MASK;   /* Setup Power mode protection register */
    410e:	4b59      	ldr	r3, [pc, #356]	; (4274 <PE_low_level_init+0x284>)
    4110:	2208      	movs	r2, #8
    4112:	701a      	strb	r2, [r3, #0]
  /* Common initialization of the CPU registers */
  /* NVIC_ISER: SETENA|=0x10000080 */
  NVIC_ISER |= NVIC_ISER_SETENA(0x10000080);
    4114:	4b58      	ldr	r3, [pc, #352]	; (4278 <PE_low_level_init+0x288>)
    4116:	4a58      	ldr	r2, [pc, #352]	; (4278 <PE_low_level_init+0x288>)
    4118:	6812      	ldr	r2, [r2, #0]
    411a:	4958      	ldr	r1, [pc, #352]	; (427c <PE_low_level_init+0x28c>)
    411c:	430a      	orrs	r2, r1
    411e:	601a      	str	r2, [r3, #0]
  /* NVIC_IPR7: PRI_28=0 */
  NVIC_IPR7 &= (uint32_t)~(uint32_t)(NVIC_IP_PRI_28(0xFF));
    4120:	4a55      	ldr	r2, [pc, #340]	; (4278 <PE_low_level_init+0x288>)
    4122:	4955      	ldr	r1, [pc, #340]	; (4278 <PE_low_level_init+0x288>)
    4124:	23c7      	movs	r3, #199	; 0xc7
    4126:	009b      	lsls	r3, r3, #2
    4128:	58cb      	ldr	r3, [r1, r3]
    412a:	21ff      	movs	r1, #255	; 0xff
    412c:	1c18      	adds	r0, r3, #0
    412e:	4388      	bics	r0, r1
    4130:	1c01      	adds	r1, r0, #0
    4132:	23c7      	movs	r3, #199	; 0xc7
    4134:	009b      	lsls	r3, r3, #2
    4136:	50d1      	str	r1, [r2, r3]
  /* PORTB_PCR0: ISF=0,MUX=0 */
  PORTB_PCR0 &= (uint32_t)~(uint32_t)((PORT_PCR_ISF_MASK | PORT_PCR_MUX(0x07)));
    4138:	4b51      	ldr	r3, [pc, #324]	; (4280 <PE_low_level_init+0x290>)
    413a:	4a51      	ldr	r2, [pc, #324]	; (4280 <PE_low_level_init+0x290>)
    413c:	6811      	ldr	r1, [r2, #0]
    413e:	4a51      	ldr	r2, [pc, #324]	; (4284 <PE_low_level_init+0x294>)
    4140:	400a      	ands	r2, r1
    4142:	601a      	str	r2, [r3, #0]
  /* PORTC_PCR1: ISF=0,MUX=0 */
  PORTC_PCR1 &= (uint32_t)~(uint32_t)((PORT_PCR_ISF_MASK | PORT_PCR_MUX(0x07)));
    4144:	4b50      	ldr	r3, [pc, #320]	; (4288 <PE_low_level_init+0x298>)
    4146:	4a50      	ldr	r2, [pc, #320]	; (4288 <PE_low_level_init+0x298>)
    4148:	6851      	ldr	r1, [r2, #4]
    414a:	4a4e      	ldr	r2, [pc, #312]	; (4284 <PE_low_level_init+0x294>)
    414c:	400a      	ands	r2, r1
    414e:	605a      	str	r2, [r3, #4]
  /* NVIC_IPR6: PRI_26=0 */
  NVIC_IPR6 &= (uint32_t)~(uint32_t)(NVIC_IP_PRI_26(0xFF));
    4150:	4a49      	ldr	r2, [pc, #292]	; (4278 <PE_low_level_init+0x288>)
    4152:	4949      	ldr	r1, [pc, #292]	; (4278 <PE_low_level_init+0x288>)
    4154:	23c6      	movs	r3, #198	; 0xc6
    4156:	009b      	lsls	r3, r3, #2
    4158:	58c9      	ldr	r1, [r1, r3]
    415a:	4b4c      	ldr	r3, [pc, #304]	; (428c <PE_low_level_init+0x29c>)
    415c:	4019      	ands	r1, r3
    415e:	23c6      	movs	r3, #198	; 0xc6
    4160:	009b      	lsls	r3, r3, #2
    4162:	50d1      	str	r1, [r2, r3]
  /* GPIOC_PDDR: PDD&=~0x44 */
  GPIOC_PDDR &= (uint32_t)~(uint32_t)(GPIO_PDDR_PDD(0x44));
    4164:	4b4a      	ldr	r3, [pc, #296]	; (4290 <PE_low_level_init+0x2a0>)
    4166:	4a4a      	ldr	r2, [pc, #296]	; (4290 <PE_low_level_init+0x2a0>)
    4168:	6952      	ldr	r2, [r2, #20]
    416a:	2144      	movs	r1, #68	; 0x44
    416c:	438a      	bics	r2, r1
    416e:	615a      	str	r2, [r3, #20]
  /* PORTA_PCR20: ISF=0,MUX=7 */
  PORTA_PCR20 = (uint32_t)((PORTA_PCR20 & (uint32_t)~(uint32_t)(
    4170:	4b48      	ldr	r3, [pc, #288]	; (4294 <PE_low_level_init+0x2a4>)
    4172:	4a48      	ldr	r2, [pc, #288]	; (4294 <PE_low_level_init+0x2a4>)
    4174:	6d11      	ldr	r1, [r2, #80]	; 0x50
    4176:	4a43      	ldr	r2, [pc, #268]	; (4284 <PE_low_level_init+0x294>)
    4178:	400a      	ands	r2, r1
    417a:	21e0      	movs	r1, #224	; 0xe0
    417c:	00c9      	lsls	r1, r1, #3
    417e:	430a      	orrs	r2, r1
    4180:	651a      	str	r2, [r3, #80]	; 0x50
                 PORT_PCR_ISF_MASK
                )) | (uint32_t)(
                 PORT_PCR_MUX(0x07)
                ));
  /* NVIC_IPR1: PRI_7=0,PRI_6=0 */
  NVIC_IPR1 &= (uint32_t)~(uint32_t)(
    4182:	4a3d      	ldr	r2, [pc, #244]	; (4278 <PE_low_level_init+0x288>)
    4184:	493c      	ldr	r1, [pc, #240]	; (4278 <PE_low_level_init+0x288>)
    4186:	23c1      	movs	r3, #193	; 0xc1
    4188:	009b      	lsls	r3, r3, #2
    418a:	58cb      	ldr	r3, [r1, r3]
    418c:	041b      	lsls	r3, r3, #16
    418e:	0c19      	lsrs	r1, r3, #16
    4190:	23c1      	movs	r3, #193	; 0xc1
    4192:	009b      	lsls	r3, r3, #2
    4194:	50d1      	str	r1, [r2, r3]
                NVIC_IP_PRI_7(0xFF) |
                NVIC_IP_PRI_6(0xFF)
               );
  ResetSource = (uint16_t)(((uint16_t)RCM_SRS1) << 8U);
    4196:	4b34      	ldr	r3, [pc, #208]	; (4268 <PE_low_level_init+0x278>)
    4198:	785b      	ldrb	r3, [r3, #1]
    419a:	b2db      	uxtb	r3, r3
    419c:	1c1a      	adds	r2, r3, #0
    419e:	1dbb      	adds	r3, r7, #6
    41a0:	0212      	lsls	r2, r2, #8
    41a2:	801a      	strh	r2, [r3, #0]
  ResetSource |= RCM_SRS0;
    41a4:	4b30      	ldr	r3, [pc, #192]	; (4268 <PE_low_level_init+0x278>)
    41a6:	781b      	ldrb	r3, [r3, #0]
    41a8:	b2db      	uxtb	r3, r3
    41aa:	1c19      	adds	r1, r3, #0
    41ac:	1dbb      	adds	r3, r7, #6
    41ae:	1dba      	adds	r2, r7, #6
    41b0:	8812      	ldrh	r2, [r2, #0]
    41b2:	430a      	orrs	r2, r1
    41b4:	801a      	strh	r2, [r3, #0]
  Cpu_OnReset(ResetSource);            /* Invoke an user event */
    41b6:	1dbb      	adds	r3, r7, #6
    41b8:	881b      	ldrh	r3, [r3, #0]
    41ba:	1c18      	adds	r0, r3, #0
    41bc:	f001 fd98 	bl	5cf0 <Cpu_OnReset>
  /* ### WatchDog_LDD "WDog1" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)WDog1_Init(NULL);
    41c0:	2000      	movs	r0, #0
    41c2:	f7ff faf3 	bl	37ac <WDog1_Init>
  /* ### Init_LPTMR "LPTMR0" init code ... */
  LPTMR0_Init();
    41c6:	f7ff fce7 	bl	3b98 <LPTMR0_Init>
  /* ### BitIO_LDD "BitIoLdd1" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)BitIoLdd1_Init(NULL);
    41ca:	2000      	movs	r0, #0
    41cc:	f000 fa6c 	bl	46a8 <BitIoLdd1_Init>
  /* ### IntFLASH "IFsh1" init code ... */
  IFsh1_Init();
    41d0:	f7ff fd8c 	bl	3cec <IFsh1_Init>
  /* ### BitIO_LDD "BitIoLdd2" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)BitIoLdd2_Init(NULL);
    41d4:	2000      	movs	r0, #0
    41d6:	f000 f9b1 	bl	453c <BitIoLdd2_Init>
  /* ### DAC_LDD "IRDRV" component auto initialization. Auto initialization feature can be disabled by component's property "Auto initialization". */
  (void)IRDRV_Init(NULL);
    41da:	2000      	movs	r0, #0
    41dc:	f7ff fd32 	bl	3c44 <IRDRV_Init>
  /* ### Asynchro serial "AS1" init code ... */
  AS1_Init();
    41e0:	f000 ffbe 	bl	5160 <AS1_Init>
  /* ### BitIO_LDD "BitIoLdd3" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)BitIoLdd3_Init(NULL);
    41e4:	2000      	movs	r0, #0
    41e6:	f000 f977 	bl	44d8 <BitIoLdd3_Init>
  /* ### BitIO_LDD "BitIoLdd5" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)BitIoLdd5_Init(NULL);
    41ea:	2000      	movs	r0, #0
    41ec:	f000 f914 	bl	4418 <BitIoLdd5_Init>
  /* ### BitIO_LDD "BitIoLdd6" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)BitIoLdd6_Init(NULL);
    41f0:	2000      	movs	r0, #0
    41f2:	f000 f8df 	bl	43b4 <BitIoLdd6_Init>
  /* ### TimerInt_LDD "TimerIntLdd1" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)TimerIntLdd1_Init(NULL);
    41f6:	2000      	movs	r0, #0
    41f8:	f7ff fb4e 	bl	3898 <TimerIntLdd1_Init>
  /* ### TimerInt "TI1" init code ... */
  /* ### ADC "AD1" init code ... */
  AD1_Init();
    41fc:	f001 f8e4 	bl	53c8 <AD1_Init>
  /* ### BitIO_LDD "BitIoLdd7" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)BitIoLdd7_Init(NULL);
    4200:	2000      	movs	r0, #0
    4202:	f000 f8ad 	bl	4360 <BitIoLdd7_Init>
  /* ### Init_TSI "TButton" init code ... */
  TButton_Init();
    4206:	f7ff fc2b 	bl	3a60 <TButton_Init>
  /* ### McuLibConfig "MCUC1" init code ... */
  /* ### BitIO_LDD "BitIoLdd4" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)BitIoLdd4_Init(NULL);
    420a:	2000      	movs	r0, #0
    420c:	f000 f934 	bl	4478 <BitIoLdd4_Init>
  /* ### BitIO_LDD "BitIoLdd8" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)BitIoLdd8_Init(NULL);
    4210:	2000      	movs	r0, #0
    4212:	f000 f871 	bl	42f8 <BitIoLdd8_Init>
  /* ### ExtInt_LDD "LatchCurrent" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)LatchCurrent_Init(NULL);
    4216:	2000      	movs	r0, #0
    4218:	f7ff fc56 	bl	3ac8 <LatchCurrent_Init>
  /* ### BitIO_LDD "BitIoLdd9" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)BitIoLdd9_Init(NULL);
    421c:	2000      	movs	r0, #0
    421e:	f000 f83b 	bl	4298 <BitIoLdd9_Init>
  /* ### BitIO_LDD "BitIoLdd11" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)BitIoLdd11_Init(NULL);
    4222:	2000      	movs	r0, #0
    4224:	f000 f9de 	bl	45e4 <BitIoLdd11_Init>
  /* ### BitIO_LDD "BitIoLdd12" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)BitIoLdd12_Init(NULL);
    4228:	2000      	movs	r0, #0
    422a:	f000 f9b7 	bl	459c <BitIoLdd12_Init>
  /* ### ExtInt_LDD "ExtIntLdd1" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)ExtIntLdd1_Init(NULL);
    422e:	2000      	movs	r0, #0
    4230:	f7ff fd72 	bl	3d18 <ExtIntLdd1_Init>
  /* ### BitIO_LDD "BitIoLdd10" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)BitIoLdd10_Init(NULL);
    4234:	2000      	movs	r0, #0
    4236:	f000 fa07 	bl	4648 <BitIoLdd10_Init>
  __EI();
    423a:	b662      	cpsie	i
}
    423c:	46bd      	mov	sp, r7
    423e:	b002      	add	sp, #8
    4240:	bd80      	pop	{r7, pc}
    4242:	46c0      	nop			; (mov r8, r8)
    4244:	40047000 	.word	0x40047000
    4248:	fffffeff 	.word	0xfffffeff
    424c:	00001034 	.word	0x00001034
    4250:	ff37e33f 	.word	0xff37e33f
    4254:	00001038 	.word	0x00001038
    4258:	ffffc1de 	.word	0xffffc1de
    425c:	00003e01 	.word	0x00003e01
    4260:	0000103c 	.word	0x0000103c
    4264:	507f7ffc 	.word	0x507f7ffc
    4268:	4007f000 	.word	0x4007f000
    426c:	4007d000 	.word	0x4007d000
    4270:	4007c000 	.word	0x4007c000
    4274:	4007e000 	.word	0x4007e000
    4278:	e000e100 	.word	0xe000e100
    427c:	10000080 	.word	0x10000080
    4280:	4004a000 	.word	0x4004a000
    4284:	fefff8ff 	.word	0xfefff8ff
    4288:	4004b000 	.word	0x4004b000
    428c:	ff00ffff 	.word	0xff00ffff
    4290:	400ff080 	.word	0x400ff080
    4294:	40049000 	.word	0x40049000

00004298 <BitIoLdd9_Init>:
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* BitIoLdd9_Init(LDD_TUserData *UserDataPtr)
{
    4298:	b580      	push	{r7, lr}
    429a:	b084      	sub	sp, #16
    429c:	af00      	add	r7, sp, #0
    429e:	6078      	str	r0, [r7, #4]
  /* Allocate device structure */
  BitIoLdd9_TDeviceDataPtr DeviceDataPrv;

  /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
    42a0:	4b10      	ldr	r3, [pc, #64]	; (42e4 <BitIoLdd9_Init+0x4c>)
    42a2:	60fb      	str	r3, [r7, #12]
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
    42a4:	68fb      	ldr	r3, [r7, #12]
    42a6:	687a      	ldr	r2, [r7, #4]
    42a8:	601a      	str	r2, [r3, #0]
  /* Configure pin as output */
  /* GPIOC_PDDR: PDD|=0x20 */
  GPIOC_PDDR |= GPIO_PDDR_PDD(0x20);
    42aa:	4b0f      	ldr	r3, [pc, #60]	; (42e8 <BitIoLdd9_Init+0x50>)
    42ac:	4a0e      	ldr	r2, [pc, #56]	; (42e8 <BitIoLdd9_Init+0x50>)
    42ae:	6952      	ldr	r2, [r2, #20]
    42b0:	2120      	movs	r1, #32
    42b2:	430a      	orrs	r2, r1
    42b4:	615a      	str	r2, [r3, #20]
  /* Set initialization value */
  /* GPIOC_PDOR: PDO&=~0x20 */
  GPIOC_PDOR &= (uint32_t)~(uint32_t)(GPIO_PDOR_PDO(0x20));
    42b6:	4b0c      	ldr	r3, [pc, #48]	; (42e8 <BitIoLdd9_Init+0x50>)
    42b8:	4a0b      	ldr	r2, [pc, #44]	; (42e8 <BitIoLdd9_Init+0x50>)
    42ba:	6812      	ldr	r2, [r2, #0]
    42bc:	2120      	movs	r1, #32
    42be:	438a      	bics	r2, r1
    42c0:	601a      	str	r2, [r3, #0]
  /* Initialization of Port Control register */
  /* PORTC_PCR5: ISF=0,MUX=1 */
  PORTC_PCR5 = (uint32_t)((PORTC_PCR5 & (uint32_t)~(uint32_t)(
    42c2:	4b0a      	ldr	r3, [pc, #40]	; (42ec <BitIoLdd9_Init+0x54>)
    42c4:	4a09      	ldr	r2, [pc, #36]	; (42ec <BitIoLdd9_Init+0x54>)
    42c6:	6951      	ldr	r1, [r2, #20]
    42c8:	4a09      	ldr	r2, [pc, #36]	; (42f0 <BitIoLdd9_Init+0x58>)
    42ca:	400a      	ands	r2, r1
    42cc:	2180      	movs	r1, #128	; 0x80
    42ce:	0049      	lsls	r1, r1, #1
    42d0:	430a      	orrs	r2, r1
    42d2:	615a      	str	r2, [r3, #20]
                PORT_PCR_MUX(0x06)
               )) | (uint32_t)(
                PORT_PCR_MUX(0x01)
               ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_BitIoLdd9_ID,DeviceDataPrv);
    42d4:	4b07      	ldr	r3, [pc, #28]	; (42f4 <BitIoLdd9_Init+0x5c>)
    42d6:	68fa      	ldr	r2, [r7, #12]
    42d8:	641a      	str	r2, [r3, #64]	; 0x40
  return ((LDD_TDeviceData *)DeviceDataPrv);
    42da:	68fb      	ldr	r3, [r7, #12]
}
    42dc:	1c18      	adds	r0, r3, #0
    42de:	46bd      	mov	sp, r7
    42e0:	b004      	add	sp, #16
    42e2:	bd80      	pop	{r7, pc}
    42e4:	200000b8 	.word	0x200000b8
    42e8:	400ff080 	.word	0x400ff080
    42ec:	4004b000 	.word	0x4004b000
    42f0:	fefff8ff 	.word	0xfefff8ff
    42f4:	20000024 	.word	0x20000024

000042f8 <BitIoLdd8_Init>:
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* BitIoLdd8_Init(LDD_TUserData *UserDataPtr)
{
    42f8:	b580      	push	{r7, lr}
    42fa:	b084      	sub	sp, #16
    42fc:	af00      	add	r7, sp, #0
    42fe:	6078      	str	r0, [r7, #4]
  /* Allocate device structure */
  BitIoLdd8_TDeviceDataPtr DeviceDataPrv;

  /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
    4300:	4b11      	ldr	r3, [pc, #68]	; (4348 <BitIoLdd8_Init+0x50>)
    4302:	60fb      	str	r3, [r7, #12]
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
    4304:	68fb      	ldr	r3, [r7, #12]
    4306:	687a      	ldr	r2, [r7, #4]
    4308:	601a      	str	r2, [r3, #0]
  /* Configure pin as output */
  /* GPIOA_PDDR: PDD|=0x00040000 */
  GPIOA_PDDR |= GPIO_PDDR_PDD(0x00040000);
    430a:	4b10      	ldr	r3, [pc, #64]	; (434c <BitIoLdd8_Init+0x54>)
    430c:	4a0f      	ldr	r2, [pc, #60]	; (434c <BitIoLdd8_Init+0x54>)
    430e:	6952      	ldr	r2, [r2, #20]
    4310:	2180      	movs	r1, #128	; 0x80
    4312:	02c9      	lsls	r1, r1, #11
    4314:	430a      	orrs	r2, r1
    4316:	615a      	str	r2, [r3, #20]
  /* Set initialization value */
  /* GPIOA_PDOR: PDO&=~0x00040000 */
  GPIOA_PDOR &= (uint32_t)~(uint32_t)(GPIO_PDOR_PDO(0x00040000));
    4318:	4b0c      	ldr	r3, [pc, #48]	; (434c <BitIoLdd8_Init+0x54>)
    431a:	4a0c      	ldr	r2, [pc, #48]	; (434c <BitIoLdd8_Init+0x54>)
    431c:	6811      	ldr	r1, [r2, #0]
    431e:	4a0c      	ldr	r2, [pc, #48]	; (4350 <BitIoLdd8_Init+0x58>)
    4320:	400a      	ands	r2, r1
    4322:	601a      	str	r2, [r3, #0]
  /* Initialization of Port Control register */
  /* PORTA_PCR18: ISF=0,MUX=1 */
  PORTA_PCR18 = (uint32_t)((PORTA_PCR18 & (uint32_t)~(uint32_t)(
    4324:	4b0b      	ldr	r3, [pc, #44]	; (4354 <BitIoLdd8_Init+0x5c>)
    4326:	4a0b      	ldr	r2, [pc, #44]	; (4354 <BitIoLdd8_Init+0x5c>)
    4328:	6c91      	ldr	r1, [r2, #72]	; 0x48
    432a:	4a0b      	ldr	r2, [pc, #44]	; (4358 <BitIoLdd8_Init+0x60>)
    432c:	400a      	ands	r2, r1
    432e:	2180      	movs	r1, #128	; 0x80
    4330:	0049      	lsls	r1, r1, #1
    4332:	430a      	orrs	r2, r1
    4334:	649a      	str	r2, [r3, #72]	; 0x48
                 PORT_PCR_MUX(0x06)
                )) | (uint32_t)(
                 PORT_PCR_MUX(0x01)
                ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_BitIoLdd8_ID,DeviceDataPrv);
    4336:	4b09      	ldr	r3, [pc, #36]	; (435c <BitIoLdd8_Init+0x64>)
    4338:	68fa      	ldr	r2, [r7, #12]
    433a:	639a      	str	r2, [r3, #56]	; 0x38
  return ((LDD_TDeviceData *)DeviceDataPrv);
    433c:	68fb      	ldr	r3, [r7, #12]
}
    433e:	1c18      	adds	r0, r3, #0
    4340:	46bd      	mov	sp, r7
    4342:	b004      	add	sp, #16
    4344:	bd80      	pop	{r7, pc}
    4346:	46c0      	nop			; (mov r8, r8)
    4348:	200000bc 	.word	0x200000bc
    434c:	400ff000 	.word	0x400ff000
    4350:	fffbffff 	.word	0xfffbffff
    4354:	40049000 	.word	0x40049000
    4358:	fefff8ff 	.word	0xfefff8ff
    435c:	20000024 	.word	0x20000024

00004360 <BitIoLdd7_Init>:
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* BitIoLdd7_Init(LDD_TUserData *UserDataPtr)
{
    4360:	b580      	push	{r7, lr}
    4362:	b084      	sub	sp, #16
    4364:	af00      	add	r7, sp, #0
    4366:	6078      	str	r0, [r7, #4]
  /* Allocate device structure */
  BitIoLdd7_TDeviceDataPtr DeviceDataPrv;

  /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
    4368:	4b0d      	ldr	r3, [pc, #52]	; (43a0 <BitIoLdd7_Init+0x40>)
    436a:	60fb      	str	r3, [r7, #12]
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
    436c:	68fb      	ldr	r3, [r7, #12]
    436e:	687a      	ldr	r2, [r7, #4]
    4370:	601a      	str	r2, [r3, #0]
  /* Configure pin as input */
  /* GPIOC_PDDR: PDD&=~0x80 */
  GPIOC_PDDR &= (uint32_t)~(uint32_t)(GPIO_PDDR_PDD(0x80));
    4372:	4b0c      	ldr	r3, [pc, #48]	; (43a4 <BitIoLdd7_Init+0x44>)
    4374:	4a0b      	ldr	r2, [pc, #44]	; (43a4 <BitIoLdd7_Init+0x44>)
    4376:	6952      	ldr	r2, [r2, #20]
    4378:	2180      	movs	r1, #128	; 0x80
    437a:	438a      	bics	r2, r1
    437c:	615a      	str	r2, [r3, #20]
  /* Initialization of Port Control register */
  /* PORTC_PCR7: ISF=0,MUX=1 */
  PORTC_PCR7 = (uint32_t)((PORTC_PCR7 & (uint32_t)~(uint32_t)(
    437e:	4b0a      	ldr	r3, [pc, #40]	; (43a8 <BitIoLdd7_Init+0x48>)
    4380:	4a09      	ldr	r2, [pc, #36]	; (43a8 <BitIoLdd7_Init+0x48>)
    4382:	69d1      	ldr	r1, [r2, #28]
    4384:	4a09      	ldr	r2, [pc, #36]	; (43ac <BitIoLdd7_Init+0x4c>)
    4386:	400a      	ands	r2, r1
    4388:	2180      	movs	r1, #128	; 0x80
    438a:	0049      	lsls	r1, r1, #1
    438c:	430a      	orrs	r2, r1
    438e:	61da      	str	r2, [r3, #28]
                PORT_PCR_MUX(0x06)
               )) | (uint32_t)(
                PORT_PCR_MUX(0x01)
               ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_BitIoLdd7_ID,DeviceDataPrv);
    4390:	4b07      	ldr	r3, [pc, #28]	; (43b0 <BitIoLdd7_Init+0x50>)
    4392:	68fa      	ldr	r2, [r7, #12]
    4394:	631a      	str	r2, [r3, #48]	; 0x30
  return ((LDD_TDeviceData *)DeviceDataPrv);
    4396:	68fb      	ldr	r3, [r7, #12]
}
    4398:	1c18      	adds	r0, r3, #0
    439a:	46bd      	mov	sp, r7
    439c:	b004      	add	sp, #16
    439e:	bd80      	pop	{r7, pc}
    43a0:	200000c0 	.word	0x200000c0
    43a4:	400ff080 	.word	0x400ff080
    43a8:	4004b000 	.word	0x4004b000
    43ac:	fefff8ff 	.word	0xfefff8ff
    43b0:	20000024 	.word	0x20000024

000043b4 <BitIoLdd6_Init>:
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* BitIoLdd6_Init(LDD_TUserData *UserDataPtr)
{
    43b4:	b580      	push	{r7, lr}
    43b6:	b084      	sub	sp, #16
    43b8:	af00      	add	r7, sp, #0
    43ba:	6078      	str	r0, [r7, #4]
  /* Allocate device structure */
  BitIoLdd6_TDeviceDataPtr DeviceDataPrv;

  /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
    43bc:	4b11      	ldr	r3, [pc, #68]	; (4404 <BitIoLdd6_Init+0x50>)
    43be:	60fb      	str	r3, [r7, #12]
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
    43c0:	68fb      	ldr	r3, [r7, #12]
    43c2:	687a      	ldr	r2, [r7, #4]
    43c4:	601a      	str	r2, [r3, #0]
  /* Configure pin as output */
  /* GPIOE_PDDR: PDD|=0x00080000 */
  GPIOE_PDDR |= GPIO_PDDR_PDD(0x00080000);
    43c6:	4b10      	ldr	r3, [pc, #64]	; (4408 <BitIoLdd6_Init+0x54>)
    43c8:	4a0f      	ldr	r2, [pc, #60]	; (4408 <BitIoLdd6_Init+0x54>)
    43ca:	6952      	ldr	r2, [r2, #20]
    43cc:	2180      	movs	r1, #128	; 0x80
    43ce:	0309      	lsls	r1, r1, #12
    43d0:	430a      	orrs	r2, r1
    43d2:	615a      	str	r2, [r3, #20]
  /* Set initialization value */
  /* GPIOE_PDOR: PDO|=0x00080000 */
  GPIOE_PDOR |= GPIO_PDOR_PDO(0x00080000);
    43d4:	4b0c      	ldr	r3, [pc, #48]	; (4408 <BitIoLdd6_Init+0x54>)
    43d6:	4a0c      	ldr	r2, [pc, #48]	; (4408 <BitIoLdd6_Init+0x54>)
    43d8:	6812      	ldr	r2, [r2, #0]
    43da:	2180      	movs	r1, #128	; 0x80
    43dc:	0309      	lsls	r1, r1, #12
    43de:	430a      	orrs	r2, r1
    43e0:	601a      	str	r2, [r3, #0]
  /* Initialization of Port Control register */
  /* PORTE_PCR19: ISF=0,MUX=1 */
  PORTE_PCR19 = (uint32_t)((PORTE_PCR19 & (uint32_t)~(uint32_t)(
    43e2:	4b0a      	ldr	r3, [pc, #40]	; (440c <BitIoLdd6_Init+0x58>)
    43e4:	4a09      	ldr	r2, [pc, #36]	; (440c <BitIoLdd6_Init+0x58>)
    43e6:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
    43e8:	4a09      	ldr	r2, [pc, #36]	; (4410 <BitIoLdd6_Init+0x5c>)
    43ea:	400a      	ands	r2, r1
    43ec:	2180      	movs	r1, #128	; 0x80
    43ee:	0049      	lsls	r1, r1, #1
    43f0:	430a      	orrs	r2, r1
    43f2:	64da      	str	r2, [r3, #76]	; 0x4c
                 PORT_PCR_MUX(0x06)
                )) | (uint32_t)(
                 PORT_PCR_MUX(0x01)
                ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_BitIoLdd6_ID,DeviceDataPrv);
    43f4:	4b07      	ldr	r3, [pc, #28]	; (4414 <BitIoLdd6_Init+0x60>)
    43f6:	68fa      	ldr	r2, [r7, #12]
    43f8:	621a      	str	r2, [r3, #32]
  return ((LDD_TDeviceData *)DeviceDataPrv);
    43fa:	68fb      	ldr	r3, [r7, #12]
}
    43fc:	1c18      	adds	r0, r3, #0
    43fe:	46bd      	mov	sp, r7
    4400:	b004      	add	sp, #16
    4402:	bd80      	pop	{r7, pc}
    4404:	200000c4 	.word	0x200000c4
    4408:	400ff100 	.word	0x400ff100
    440c:	4004d000 	.word	0x4004d000
    4410:	fefff8ff 	.word	0xfefff8ff
    4414:	20000024 	.word	0x20000024

00004418 <BitIoLdd5_Init>:
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* BitIoLdd5_Init(LDD_TUserData *UserDataPtr)
{
    4418:	b580      	push	{r7, lr}
    441a:	b084      	sub	sp, #16
    441c:	af00      	add	r7, sp, #0
    441e:	6078      	str	r0, [r7, #4]
  /* Allocate device structure */
  BitIoLdd5_TDeviceDataPtr DeviceDataPrv;

  /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
    4420:	4b10      	ldr	r3, [pc, #64]	; (4464 <BitIoLdd5_Init+0x4c>)
    4422:	60fb      	str	r3, [r7, #12]
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
    4424:	68fb      	ldr	r3, [r7, #12]
    4426:	687a      	ldr	r2, [r7, #4]
    4428:	601a      	str	r2, [r3, #0]
  /* Configure pin as output */
  /* GPIOC_PDDR: PDD|=8 */
  GPIOC_PDDR |= GPIO_PDDR_PDD(0x08);
    442a:	4b0f      	ldr	r3, [pc, #60]	; (4468 <BitIoLdd5_Init+0x50>)
    442c:	4a0e      	ldr	r2, [pc, #56]	; (4468 <BitIoLdd5_Init+0x50>)
    442e:	6952      	ldr	r2, [r2, #20]
    4430:	2108      	movs	r1, #8
    4432:	430a      	orrs	r2, r1
    4434:	615a      	str	r2, [r3, #20]
  /* Set initialization value */
  /* GPIOC_PDOR: PDO&=~8 */
  GPIOC_PDOR &= (uint32_t)~(uint32_t)(GPIO_PDOR_PDO(0x08));
    4436:	4b0c      	ldr	r3, [pc, #48]	; (4468 <BitIoLdd5_Init+0x50>)
    4438:	4a0b      	ldr	r2, [pc, #44]	; (4468 <BitIoLdd5_Init+0x50>)
    443a:	6812      	ldr	r2, [r2, #0]
    443c:	2108      	movs	r1, #8
    443e:	438a      	bics	r2, r1
    4440:	601a      	str	r2, [r3, #0]
  /* Initialization of Port Control register */
  /* PORTC_PCR3: ISF=0,MUX=1 */
  PORTC_PCR3 = (uint32_t)((PORTC_PCR3 & (uint32_t)~(uint32_t)(
    4442:	4b0a      	ldr	r3, [pc, #40]	; (446c <BitIoLdd5_Init+0x54>)
    4444:	4a09      	ldr	r2, [pc, #36]	; (446c <BitIoLdd5_Init+0x54>)
    4446:	68d1      	ldr	r1, [r2, #12]
    4448:	4a09      	ldr	r2, [pc, #36]	; (4470 <BitIoLdd5_Init+0x58>)
    444a:	400a      	ands	r2, r1
    444c:	2180      	movs	r1, #128	; 0x80
    444e:	0049      	lsls	r1, r1, #1
    4450:	430a      	orrs	r2, r1
    4452:	60da      	str	r2, [r3, #12]
                PORT_PCR_MUX(0x06)
               )) | (uint32_t)(
                PORT_PCR_MUX(0x01)
               ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_BitIoLdd5_ID,DeviceDataPrv);
    4454:	4b07      	ldr	r3, [pc, #28]	; (4474 <BitIoLdd5_Init+0x5c>)
    4456:	68fa      	ldr	r2, [r7, #12]
    4458:	61da      	str	r2, [r3, #28]
  return ((LDD_TDeviceData *)DeviceDataPrv);
    445a:	68fb      	ldr	r3, [r7, #12]
}
    445c:	1c18      	adds	r0, r3, #0
    445e:	46bd      	mov	sp, r7
    4460:	b004      	add	sp, #16
    4462:	bd80      	pop	{r7, pc}
    4464:	200000c8 	.word	0x200000c8
    4468:	400ff080 	.word	0x400ff080
    446c:	4004b000 	.word	0x4004b000
    4470:	fefff8ff 	.word	0xfefff8ff
    4474:	20000024 	.word	0x20000024

00004478 <BitIoLdd4_Init>:
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* BitIoLdd4_Init(LDD_TUserData *UserDataPtr)
{
    4478:	b580      	push	{r7, lr}
    447a:	b084      	sub	sp, #16
    447c:	af00      	add	r7, sp, #0
    447e:	6078      	str	r0, [r7, #4]
  /* Allocate device structure */
  BitIoLdd4_TDeviceDataPtr DeviceDataPrv;

  /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
    4480:	4b10      	ldr	r3, [pc, #64]	; (44c4 <BitIoLdd4_Init+0x4c>)
    4482:	60fb      	str	r3, [r7, #12]
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
    4484:	68fb      	ldr	r3, [r7, #12]
    4486:	687a      	ldr	r2, [r7, #4]
    4488:	601a      	str	r2, [r3, #0]
  /* Configure pin as output */
  /* GPIOE_PDDR: PDD|=2 */
  GPIOE_PDDR |= GPIO_PDDR_PDD(0x02);
    448a:	4b0f      	ldr	r3, [pc, #60]	; (44c8 <BitIoLdd4_Init+0x50>)
    448c:	4a0e      	ldr	r2, [pc, #56]	; (44c8 <BitIoLdd4_Init+0x50>)
    448e:	6952      	ldr	r2, [r2, #20]
    4490:	2102      	movs	r1, #2
    4492:	430a      	orrs	r2, r1
    4494:	615a      	str	r2, [r3, #20]
  /* Set initialization value */
  /* GPIOE_PDOR: PDO&=~2 */
  GPIOE_PDOR &= (uint32_t)~(uint32_t)(GPIO_PDOR_PDO(0x02));
    4496:	4b0c      	ldr	r3, [pc, #48]	; (44c8 <BitIoLdd4_Init+0x50>)
    4498:	4a0b      	ldr	r2, [pc, #44]	; (44c8 <BitIoLdd4_Init+0x50>)
    449a:	6812      	ldr	r2, [r2, #0]
    449c:	2102      	movs	r1, #2
    449e:	438a      	bics	r2, r1
    44a0:	601a      	str	r2, [r3, #0]
  /* Initialization of Port Control register */
  /* PORTE_PCR1: ISF=0,MUX=1 */
  PORTE_PCR1 = (uint32_t)((PORTE_PCR1 & (uint32_t)~(uint32_t)(
    44a2:	4b0a      	ldr	r3, [pc, #40]	; (44cc <BitIoLdd4_Init+0x54>)
    44a4:	4a09      	ldr	r2, [pc, #36]	; (44cc <BitIoLdd4_Init+0x54>)
    44a6:	6851      	ldr	r1, [r2, #4]
    44a8:	4a09      	ldr	r2, [pc, #36]	; (44d0 <BitIoLdd4_Init+0x58>)
    44aa:	400a      	ands	r2, r1
    44ac:	2180      	movs	r1, #128	; 0x80
    44ae:	0049      	lsls	r1, r1, #1
    44b0:	430a      	orrs	r2, r1
    44b2:	605a      	str	r2, [r3, #4]
                PORT_PCR_MUX(0x06)
               )) | (uint32_t)(
                PORT_PCR_MUX(0x01)
               ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_BitIoLdd4_ID,DeviceDataPrv);
    44b4:	4b07      	ldr	r3, [pc, #28]	; (44d4 <BitIoLdd4_Init+0x5c>)
    44b6:	68fa      	ldr	r2, [r7, #12]
    44b8:	635a      	str	r2, [r3, #52]	; 0x34
  return ((LDD_TDeviceData *)DeviceDataPrv);
    44ba:	68fb      	ldr	r3, [r7, #12]
}
    44bc:	1c18      	adds	r0, r3, #0
    44be:	46bd      	mov	sp, r7
    44c0:	b004      	add	sp, #16
    44c2:	bd80      	pop	{r7, pc}
    44c4:	200000cc 	.word	0x200000cc
    44c8:	400ff100 	.word	0x400ff100
    44cc:	4004d000 	.word	0x4004d000
    44d0:	fefff8ff 	.word	0xfefff8ff
    44d4:	20000024 	.word	0x20000024

000044d8 <BitIoLdd3_Init>:
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* BitIoLdd3_Init(LDD_TUserData *UserDataPtr)
{
    44d8:	b580      	push	{r7, lr}
    44da:	b084      	sub	sp, #16
    44dc:	af00      	add	r7, sp, #0
    44de:	6078      	str	r0, [r7, #4]
  /* Allocate device structure */
  BitIoLdd3_TDeviceDataPtr DeviceDataPrv;

  /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
    44e0:	4b11      	ldr	r3, [pc, #68]	; (4528 <BitIoLdd3_Init+0x50>)
    44e2:	60fb      	str	r3, [r7, #12]
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
    44e4:	68fb      	ldr	r3, [r7, #12]
    44e6:	687a      	ldr	r2, [r7, #4]
    44e8:	601a      	str	r2, [r3, #0]
  /* Configure pin as output */
  /* GPIOE_PDDR: PDD|=0x00020000 */
  GPIOE_PDDR |= GPIO_PDDR_PDD(0x00020000);
    44ea:	4b10      	ldr	r3, [pc, #64]	; (452c <BitIoLdd3_Init+0x54>)
    44ec:	4a0f      	ldr	r2, [pc, #60]	; (452c <BitIoLdd3_Init+0x54>)
    44ee:	6952      	ldr	r2, [r2, #20]
    44f0:	2180      	movs	r1, #128	; 0x80
    44f2:	0289      	lsls	r1, r1, #10
    44f4:	430a      	orrs	r2, r1
    44f6:	615a      	str	r2, [r3, #20]
  /* Set initialization value */
  /* GPIOE_PDOR: PDO|=0x00020000 */
  GPIOE_PDOR |= GPIO_PDOR_PDO(0x00020000);
    44f8:	4b0c      	ldr	r3, [pc, #48]	; (452c <BitIoLdd3_Init+0x54>)
    44fa:	4a0c      	ldr	r2, [pc, #48]	; (452c <BitIoLdd3_Init+0x54>)
    44fc:	6812      	ldr	r2, [r2, #0]
    44fe:	2180      	movs	r1, #128	; 0x80
    4500:	0289      	lsls	r1, r1, #10
    4502:	430a      	orrs	r2, r1
    4504:	601a      	str	r2, [r3, #0]
  /* Initialization of Port Control register */
  /* PORTE_PCR17: ISF=0,MUX=1 */
  PORTE_PCR17 = (uint32_t)((PORTE_PCR17 & (uint32_t)~(uint32_t)(
    4506:	4b0a      	ldr	r3, [pc, #40]	; (4530 <BitIoLdd3_Init+0x58>)
    4508:	4a09      	ldr	r2, [pc, #36]	; (4530 <BitIoLdd3_Init+0x58>)
    450a:	6c51      	ldr	r1, [r2, #68]	; 0x44
    450c:	4a09      	ldr	r2, [pc, #36]	; (4534 <BitIoLdd3_Init+0x5c>)
    450e:	400a      	ands	r2, r1
    4510:	2180      	movs	r1, #128	; 0x80
    4512:	0049      	lsls	r1, r1, #1
    4514:	430a      	orrs	r2, r1
    4516:	645a      	str	r2, [r3, #68]	; 0x44
                 PORT_PCR_MUX(0x06)
                )) | (uint32_t)(
                 PORT_PCR_MUX(0x01)
                ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_BitIoLdd3_ID,DeviceDataPrv);
    4518:	4b07      	ldr	r3, [pc, #28]	; (4538 <BitIoLdd3_Init+0x60>)
    451a:	68fa      	ldr	r2, [r7, #12]
    451c:	619a      	str	r2, [r3, #24]
  return ((LDD_TDeviceData *)DeviceDataPrv);
    451e:	68fb      	ldr	r3, [r7, #12]
}
    4520:	1c18      	adds	r0, r3, #0
    4522:	46bd      	mov	sp, r7
    4524:	b004      	add	sp, #16
    4526:	bd80      	pop	{r7, pc}
    4528:	200000d0 	.word	0x200000d0
    452c:	400ff100 	.word	0x400ff100
    4530:	4004d000 	.word	0x4004d000
    4534:	fefff8ff 	.word	0xfefff8ff
    4538:	20000024 	.word	0x20000024

0000453c <BitIoLdd2_Init>:
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* BitIoLdd2_Init(LDD_TUserData *UserDataPtr)
{
    453c:	b580      	push	{r7, lr}
    453e:	b084      	sub	sp, #16
    4540:	af00      	add	r7, sp, #0
    4542:	6078      	str	r0, [r7, #4]
  /* Allocate device structure */
  BitIoLdd2_TDeviceDataPtr DeviceDataPrv;

  /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
    4544:	4b10      	ldr	r3, [pc, #64]	; (4588 <BitIoLdd2_Init+0x4c>)
    4546:	60fb      	str	r3, [r7, #12]
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
    4548:	68fb      	ldr	r3, [r7, #12]
    454a:	687a      	ldr	r2, [r7, #4]
    454c:	601a      	str	r2, [r3, #0]
  /* Configure pin as output */
  /* GPIOE_PDDR: PDD|=1 */
  GPIOE_PDDR |= GPIO_PDDR_PDD(0x01);
    454e:	4b0f      	ldr	r3, [pc, #60]	; (458c <BitIoLdd2_Init+0x50>)
    4550:	4a0e      	ldr	r2, [pc, #56]	; (458c <BitIoLdd2_Init+0x50>)
    4552:	6952      	ldr	r2, [r2, #20]
    4554:	2101      	movs	r1, #1
    4556:	430a      	orrs	r2, r1
    4558:	615a      	str	r2, [r3, #20]
  /* Set initialization value */
  /* GPIOE_PDOR: PDO&=~1 */
  GPIOE_PDOR &= (uint32_t)~(uint32_t)(GPIO_PDOR_PDO(0x01));
    455a:	4b0c      	ldr	r3, [pc, #48]	; (458c <BitIoLdd2_Init+0x50>)
    455c:	4a0b      	ldr	r2, [pc, #44]	; (458c <BitIoLdd2_Init+0x50>)
    455e:	6812      	ldr	r2, [r2, #0]
    4560:	2101      	movs	r1, #1
    4562:	438a      	bics	r2, r1
    4564:	601a      	str	r2, [r3, #0]
  /* Initialization of Port Control register */
  /* PORTE_PCR0: ISF=0,MUX=1 */
  PORTE_PCR0 = (uint32_t)((PORTE_PCR0 & (uint32_t)~(uint32_t)(
    4566:	4b0a      	ldr	r3, [pc, #40]	; (4590 <BitIoLdd2_Init+0x54>)
    4568:	4a09      	ldr	r2, [pc, #36]	; (4590 <BitIoLdd2_Init+0x54>)
    456a:	6811      	ldr	r1, [r2, #0]
    456c:	4a09      	ldr	r2, [pc, #36]	; (4594 <BitIoLdd2_Init+0x58>)
    456e:	400a      	ands	r2, r1
    4570:	2180      	movs	r1, #128	; 0x80
    4572:	0049      	lsls	r1, r1, #1
    4574:	430a      	orrs	r2, r1
    4576:	601a      	str	r2, [r3, #0]
                PORT_PCR_MUX(0x06)
               )) | (uint32_t)(
                PORT_PCR_MUX(0x01)
               ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_BitIoLdd2_ID,DeviceDataPrv);
    4578:	4b07      	ldr	r3, [pc, #28]	; (4598 <BitIoLdd2_Init+0x5c>)
    457a:	68fa      	ldr	r2, [r7, #12]
    457c:	60da      	str	r2, [r3, #12]
  return ((LDD_TDeviceData *)DeviceDataPrv);
    457e:	68fb      	ldr	r3, [r7, #12]
}
    4580:	1c18      	adds	r0, r3, #0
    4582:	46bd      	mov	sp, r7
    4584:	b004      	add	sp, #16
    4586:	bd80      	pop	{r7, pc}
    4588:	200000d4 	.word	0x200000d4
    458c:	400ff100 	.word	0x400ff100
    4590:	4004d000 	.word	0x4004d000
    4594:	fefff8ff 	.word	0xfefff8ff
    4598:	20000024 	.word	0x20000024

0000459c <BitIoLdd12_Init>:
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* BitIoLdd12_Init(LDD_TUserData *UserDataPtr)
{
    459c:	b580      	push	{r7, lr}
    459e:	b084      	sub	sp, #16
    45a0:	af00      	add	r7, sp, #0
    45a2:	6078      	str	r0, [r7, #4]
  /* Allocate device structure */
  BitIoLdd12_TDeviceDataPtr DeviceDataPrv;

  /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
    45a4:	4b0c      	ldr	r3, [pc, #48]	; (45d8 <BitIoLdd12_Init+0x3c>)
    45a6:	60fb      	str	r3, [r7, #12]
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
    45a8:	68fb      	ldr	r3, [r7, #12]
    45aa:	687a      	ldr	r2, [r7, #4]
    45ac:	601a      	str	r2, [r3, #0]
  /* Configure pin as input */
  /* GPIOC_PDDR: PDD&=~0x40 */
  GPIOC_PDDR &= (uint32_t)~(uint32_t)(GPIO_PDDR_PDD(0x40));
    45ae:	4b0b      	ldr	r3, [pc, #44]	; (45dc <BitIoLdd12_Init+0x40>)
    45b0:	4a0a      	ldr	r2, [pc, #40]	; (45dc <BitIoLdd12_Init+0x40>)
    45b2:	6952      	ldr	r2, [r2, #20]
    45b4:	2140      	movs	r1, #64	; 0x40
    45b6:	438a      	bics	r2, r1
    45b8:	615a      	str	r2, [r3, #20]
  /* Set initialization value */
  /* GPIOC_PDOR: PDO|=0x40 */
  GPIOC_PDOR |= GPIO_PDOR_PDO(0x40);
    45ba:	4b08      	ldr	r3, [pc, #32]	; (45dc <BitIoLdd12_Init+0x40>)
    45bc:	4a07      	ldr	r2, [pc, #28]	; (45dc <BitIoLdd12_Init+0x40>)
    45be:	6812      	ldr	r2, [r2, #0]
    45c0:	2140      	movs	r1, #64	; 0x40
    45c2:	430a      	orrs	r2, r1
    45c4:	601a      	str	r2, [r3, #0]
  /* pin is shared so Port Control register is not set */
  /* Initialization of Port Control register */
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_BitIoLdd12_ID,DeviceDataPrv);
    45c6:	4b06      	ldr	r3, [pc, #24]	; (45e0 <BitIoLdd12_Init+0x44>)
    45c8:	68fa      	ldr	r2, [r7, #12]
    45ca:	649a      	str	r2, [r3, #72]	; 0x48
  return ((LDD_TDeviceData *)DeviceDataPrv);
    45cc:	68fb      	ldr	r3, [r7, #12]
}
    45ce:	1c18      	adds	r0, r3, #0
    45d0:	46bd      	mov	sp, r7
    45d2:	b004      	add	sp, #16
    45d4:	bd80      	pop	{r7, pc}
    45d6:	46c0      	nop			; (mov r8, r8)
    45d8:	200000d8 	.word	0x200000d8
    45dc:	400ff080 	.word	0x400ff080
    45e0:	20000024 	.word	0x20000024

000045e4 <BitIoLdd11_Init>:
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* BitIoLdd11_Init(LDD_TUserData *UserDataPtr)
{
    45e4:	b580      	push	{r7, lr}
    45e6:	b084      	sub	sp, #16
    45e8:	af00      	add	r7, sp, #0
    45ea:	6078      	str	r0, [r7, #4]
  /* Allocate device structure */
  BitIoLdd11_TDeviceDataPtr DeviceDataPrv;

  /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
    45ec:	4b11      	ldr	r3, [pc, #68]	; (4634 <BitIoLdd11_Init+0x50>)
    45ee:	60fb      	str	r3, [r7, #12]
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
    45f0:	68fb      	ldr	r3, [r7, #12]
    45f2:	687a      	ldr	r2, [r7, #4]
    45f4:	601a      	str	r2, [r3, #0]
  /* Configure pin as output */
  /* GPIOA_PDDR: PDD|=0x00080000 */
  GPIOA_PDDR |= GPIO_PDDR_PDD(0x00080000);
    45f6:	4b10      	ldr	r3, [pc, #64]	; (4638 <BitIoLdd11_Init+0x54>)
    45f8:	4a0f      	ldr	r2, [pc, #60]	; (4638 <BitIoLdd11_Init+0x54>)
    45fa:	6952      	ldr	r2, [r2, #20]
    45fc:	2180      	movs	r1, #128	; 0x80
    45fe:	0309      	lsls	r1, r1, #12
    4600:	430a      	orrs	r2, r1
    4602:	615a      	str	r2, [r3, #20]
  /* Set initialization value */
  /* GPIOA_PDOR: PDO|=0x00080000 */
  GPIOA_PDOR |= GPIO_PDOR_PDO(0x00080000);
    4604:	4b0c      	ldr	r3, [pc, #48]	; (4638 <BitIoLdd11_Init+0x54>)
    4606:	4a0c      	ldr	r2, [pc, #48]	; (4638 <BitIoLdd11_Init+0x54>)
    4608:	6812      	ldr	r2, [r2, #0]
    460a:	2180      	movs	r1, #128	; 0x80
    460c:	0309      	lsls	r1, r1, #12
    460e:	430a      	orrs	r2, r1
    4610:	601a      	str	r2, [r3, #0]
  /* Initialization of Port Control register */
  /* PORTA_PCR19: ISF=0,MUX=1 */
  PORTA_PCR19 = (uint32_t)((PORTA_PCR19 & (uint32_t)~(uint32_t)(
    4612:	4b0a      	ldr	r3, [pc, #40]	; (463c <BitIoLdd11_Init+0x58>)
    4614:	4a09      	ldr	r2, [pc, #36]	; (463c <BitIoLdd11_Init+0x58>)
    4616:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
    4618:	4a09      	ldr	r2, [pc, #36]	; (4640 <BitIoLdd11_Init+0x5c>)
    461a:	400a      	ands	r2, r1
    461c:	2180      	movs	r1, #128	; 0x80
    461e:	0049      	lsls	r1, r1, #1
    4620:	430a      	orrs	r2, r1
    4622:	64da      	str	r2, [r3, #76]	; 0x4c
                 PORT_PCR_MUX(0x06)
                )) | (uint32_t)(
                 PORT_PCR_MUX(0x01)
                ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_BitIoLdd11_ID,DeviceDataPrv);
    4624:	4b07      	ldr	r3, [pc, #28]	; (4644 <BitIoLdd11_Init+0x60>)
    4626:	68fa      	ldr	r2, [r7, #12]
    4628:	645a      	str	r2, [r3, #68]	; 0x44
  return ((LDD_TDeviceData *)DeviceDataPrv);
    462a:	68fb      	ldr	r3, [r7, #12]
}
    462c:	1c18      	adds	r0, r3, #0
    462e:	46bd      	mov	sp, r7
    4630:	b004      	add	sp, #16
    4632:	bd80      	pop	{r7, pc}
    4634:	200000dc 	.word	0x200000dc
    4638:	400ff000 	.word	0x400ff000
    463c:	40049000 	.word	0x40049000
    4640:	fefff8ff 	.word	0xfefff8ff
    4644:	20000024 	.word	0x20000024

00004648 <BitIoLdd10_Init>:
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* BitIoLdd10_Init(LDD_TUserData *UserDataPtr)
{
    4648:	b580      	push	{r7, lr}
    464a:	b084      	sub	sp, #16
    464c:	af00      	add	r7, sp, #0
    464e:	6078      	str	r0, [r7, #4]
  /* Allocate device structure */
  BitIoLdd10_TDeviceDataPtr DeviceDataPrv;

  /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
    4650:	4b10      	ldr	r3, [pc, #64]	; (4694 <BitIoLdd10_Init+0x4c>)
    4652:	60fb      	str	r3, [r7, #12]
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
    4654:	68fb      	ldr	r3, [r7, #12]
    4656:	687a      	ldr	r2, [r7, #4]
    4658:	601a      	str	r2, [r3, #0]
  /* Configure pin as output */
  /* GPIOD_PDDR: PDD|=0x80 */
  GPIOD_PDDR |= GPIO_PDDR_PDD(0x80);
    465a:	4b0f      	ldr	r3, [pc, #60]	; (4698 <BitIoLdd10_Init+0x50>)
    465c:	4a0e      	ldr	r2, [pc, #56]	; (4698 <BitIoLdd10_Init+0x50>)
    465e:	6952      	ldr	r2, [r2, #20]
    4660:	2180      	movs	r1, #128	; 0x80
    4662:	430a      	orrs	r2, r1
    4664:	615a      	str	r2, [r3, #20]
  /* Set initialization value */
  /* GPIOD_PDOR: PDO&=~0x80 */
  GPIOD_PDOR &= (uint32_t)~(uint32_t)(GPIO_PDOR_PDO(0x80));
    4666:	4b0c      	ldr	r3, [pc, #48]	; (4698 <BitIoLdd10_Init+0x50>)
    4668:	4a0b      	ldr	r2, [pc, #44]	; (4698 <BitIoLdd10_Init+0x50>)
    466a:	6812      	ldr	r2, [r2, #0]
    466c:	2180      	movs	r1, #128	; 0x80
    466e:	438a      	bics	r2, r1
    4670:	601a      	str	r2, [r3, #0]
  /* Initialization of Port Control register */
  /* PORTD_PCR7: ISF=0,MUX=1 */
  PORTD_PCR7 = (uint32_t)((PORTD_PCR7 & (uint32_t)~(uint32_t)(
    4672:	4b0a      	ldr	r3, [pc, #40]	; (469c <BitIoLdd10_Init+0x54>)
    4674:	4a09      	ldr	r2, [pc, #36]	; (469c <BitIoLdd10_Init+0x54>)
    4676:	69d1      	ldr	r1, [r2, #28]
    4678:	4a09      	ldr	r2, [pc, #36]	; (46a0 <BitIoLdd10_Init+0x58>)
    467a:	400a      	ands	r2, r1
    467c:	2180      	movs	r1, #128	; 0x80
    467e:	0049      	lsls	r1, r1, #1
    4680:	430a      	orrs	r2, r1
    4682:	61da      	str	r2, [r3, #28]
                PORT_PCR_MUX(0x06)
               )) | (uint32_t)(
                PORT_PCR_MUX(0x01)
               ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_BitIoLdd10_ID,DeviceDataPrv);
    4684:	4b07      	ldr	r3, [pc, #28]	; (46a4 <BitIoLdd10_Init+0x5c>)
    4686:	68fa      	ldr	r2, [r7, #12]
    4688:	651a      	str	r2, [r3, #80]	; 0x50
  return ((LDD_TDeviceData *)DeviceDataPrv);
    468a:	68fb      	ldr	r3, [r7, #12]
}
    468c:	1c18      	adds	r0, r3, #0
    468e:	46bd      	mov	sp, r7
    4690:	b004      	add	sp, #16
    4692:	bd80      	pop	{r7, pc}
    4694:	200000e0 	.word	0x200000e0
    4698:	400ff0c0 	.word	0x400ff0c0
    469c:	4004c000 	.word	0x4004c000
    46a0:	fefff8ff 	.word	0xfefff8ff
    46a4:	20000024 	.word	0x20000024

000046a8 <BitIoLdd1_Init>:
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* BitIoLdd1_Init(LDD_TUserData *UserDataPtr)
{
    46a8:	b580      	push	{r7, lr}
    46aa:	b084      	sub	sp, #16
    46ac:	af00      	add	r7, sp, #0
    46ae:	6078      	str	r0, [r7, #4]
  /* Allocate device structure */
  BitIoLdd1_TDeviceDataPtr DeviceDataPrv;

  /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
    46b0:	4b10      	ldr	r3, [pc, #64]	; (46f4 <BitIoLdd1_Init+0x4c>)
    46b2:	60fb      	str	r3, [r7, #12]
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
    46b4:	68fb      	ldr	r3, [r7, #12]
    46b6:	687a      	ldr	r2, [r7, #4]
    46b8:	601a      	str	r2, [r3, #0]
  /* Configure pin as output */
  /* GPIOD_PDDR: PDD|=0x10 */
  GPIOD_PDDR |= GPIO_PDDR_PDD(0x10);
    46ba:	4b0f      	ldr	r3, [pc, #60]	; (46f8 <BitIoLdd1_Init+0x50>)
    46bc:	4a0e      	ldr	r2, [pc, #56]	; (46f8 <BitIoLdd1_Init+0x50>)
    46be:	6952      	ldr	r2, [r2, #20]
    46c0:	2110      	movs	r1, #16
    46c2:	430a      	orrs	r2, r1
    46c4:	615a      	str	r2, [r3, #20]
  /* Set initialization value */
  /* GPIOD_PDOR: PDO&=~0x10 */
  GPIOD_PDOR &= (uint32_t)~(uint32_t)(GPIO_PDOR_PDO(0x10));
    46c6:	4b0c      	ldr	r3, [pc, #48]	; (46f8 <BitIoLdd1_Init+0x50>)
    46c8:	4a0b      	ldr	r2, [pc, #44]	; (46f8 <BitIoLdd1_Init+0x50>)
    46ca:	6812      	ldr	r2, [r2, #0]
    46cc:	2110      	movs	r1, #16
    46ce:	438a      	bics	r2, r1
    46d0:	601a      	str	r2, [r3, #0]
  /* Initialization of Port Control register */
  /* PORTD_PCR4: ISF=0,MUX=1 */
  PORTD_PCR4 = (uint32_t)((PORTD_PCR4 & (uint32_t)~(uint32_t)(
    46d2:	4b0a      	ldr	r3, [pc, #40]	; (46fc <BitIoLdd1_Init+0x54>)
    46d4:	4a09      	ldr	r2, [pc, #36]	; (46fc <BitIoLdd1_Init+0x54>)
    46d6:	6911      	ldr	r1, [r2, #16]
    46d8:	4a09      	ldr	r2, [pc, #36]	; (4700 <BitIoLdd1_Init+0x58>)
    46da:	400a      	ands	r2, r1
    46dc:	2180      	movs	r1, #128	; 0x80
    46de:	0049      	lsls	r1, r1, #1
    46e0:	430a      	orrs	r2, r1
    46e2:	611a      	str	r2, [r3, #16]
                PORT_PCR_MUX(0x06)
               )) | (uint32_t)(
                PORT_PCR_MUX(0x01)
               ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_BitIoLdd1_ID,DeviceDataPrv);
    46e4:	4b07      	ldr	r3, [pc, #28]	; (4704 <BitIoLdd1_Init+0x5c>)
    46e6:	68fa      	ldr	r2, [r7, #12]
    46e8:	605a      	str	r2, [r3, #4]
  return ((LDD_TDeviceData *)DeviceDataPrv);
    46ea:	68fb      	ldr	r3, [r7, #12]
}
    46ec:	1c18      	adds	r0, r3, #0
    46ee:	46bd      	mov	sp, r7
    46f0:	b004      	add	sp, #16
    46f2:	bd80      	pop	{r7, pc}
    46f4:	200000e4 	.word	0x200000e4
    46f8:	400ff0c0 	.word	0x400ff0c0
    46fc:	4004c000 	.word	0x4004c000
    4700:	fefff8ff 	.word	0xfefff8ff
    4704:	20000024 	.word	0x20000024

00004708 <AdcLdd1_Init>:
**     @return
**                         - Device data structure pointer.
*/
/* ===================================================================*/
LDD_TDeviceData* AdcLdd1_Init(LDD_TUserData *UserDataPtr)
{
    4708:	b580      	push	{r7, lr}
    470a:	b084      	sub	sp, #16
    470c:	af00      	add	r7, sp, #0
    470e:	6078      	str	r0, [r7, #4]
  /* Allocate LDD device structure */
  AdcLdd1_TDeviceDataPtr DeviceDataPrv;

  /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
    4710:	4b2b      	ldr	r3, [pc, #172]	; (47c0 <AdcLdd1_Init+0xb8>)
    4712:	60fb      	str	r3, [r7, #12]
  DeviceDataPrv->UserData = UserDataPtr; /* Store the RTOS device structure */
    4714:	68fb      	ldr	r3, [r7, #12]
    4716:	687a      	ldr	r2, [r7, #4]
    4718:	605a      	str	r2, [r3, #4]
  DeviceDataPrv->SampleCount = 0U;     /* Initializing SampleCount for right access of some methods to SC1n registers before first conversion is done */
    471a:	68fb      	ldr	r3, [r7, #12]
    471c:	2200      	movs	r2, #0
    471e:	701a      	strb	r2, [r3, #0]
  DeviceDataPrv->EnUser = FALSE;       /* Disable device */
    4720:	68fb      	ldr	r3, [r7, #12]
    4722:	2200      	movs	r2, #0
    4724:	705a      	strb	r2, [r3, #1]
  /* SIM_SCGC6: ADC0=1 */
  SIM_SCGC6 |= SIM_SCGC6_ADC0_MASK;
    4726:	4a27      	ldr	r2, [pc, #156]	; (47c4 <AdcLdd1_Init+0xbc>)
    4728:	4926      	ldr	r1, [pc, #152]	; (47c4 <AdcLdd1_Init+0xbc>)
    472a:	4b27      	ldr	r3, [pc, #156]	; (47c8 <AdcLdd1_Init+0xc0>)
    472c:	58cb      	ldr	r3, [r1, r3]
    472e:	2180      	movs	r1, #128	; 0x80
    4730:	0509      	lsls	r1, r1, #20
    4732:	4319      	orrs	r1, r3
    4734:	4b24      	ldr	r3, [pc, #144]	; (47c8 <AdcLdd1_Init+0xc0>)
    4736:	50d1      	str	r1, [r2, r3]
  /* PORTD_PCR6: ISF=0,MUX=0 */
  PORTD_PCR6 &= (uint32_t)~(uint32_t)((PORT_PCR_ISF_MASK | PORT_PCR_MUX(0x07)));
    4738:	4b24      	ldr	r3, [pc, #144]	; (47cc <AdcLdd1_Init+0xc4>)
    473a:	4a24      	ldr	r2, [pc, #144]	; (47cc <AdcLdd1_Init+0xc4>)
    473c:	6991      	ldr	r1, [r2, #24]
    473e:	4a24      	ldr	r2, [pc, #144]	; (47d0 <AdcLdd1_Init+0xc8>)
    4740:	400a      	ands	r2, r1
    4742:	619a      	str	r2, [r3, #24]
  /* ADC0_CFG2: MUXSEL=1 */
  ADC0_CFG2 |= ADC_CFG2_MUXSEL_MASK;
    4744:	4b23      	ldr	r3, [pc, #140]	; (47d4 <AdcLdd1_Init+0xcc>)
    4746:	4a23      	ldr	r2, [pc, #140]	; (47d4 <AdcLdd1_Init+0xcc>)
    4748:	68d2      	ldr	r2, [r2, #12]
    474a:	2110      	movs	r1, #16
    474c:	430a      	orrs	r2, r1
    474e:	60da      	str	r2, [r3, #12]
  /* PORTD_PCR5: ISF=0,MUX=0 */
  PORTD_PCR5 &= (uint32_t)~(uint32_t)((PORT_PCR_ISF_MASK | PORT_PCR_MUX(0x07)));
    4750:	4b1e      	ldr	r3, [pc, #120]	; (47cc <AdcLdd1_Init+0xc4>)
    4752:	4a1e      	ldr	r2, [pc, #120]	; (47cc <AdcLdd1_Init+0xc4>)
    4754:	6951      	ldr	r1, [r2, #20]
    4756:	4a1e      	ldr	r2, [pc, #120]	; (47d0 <AdcLdd1_Init+0xc8>)
    4758:	400a      	ands	r2, r1
    475a:	615a      	str	r2, [r3, #20]
  /* ADC0_CFG2: MUXSEL=1 */
  ADC0_CFG2 |= ADC_CFG2_MUXSEL_MASK;
    475c:	4b1d      	ldr	r3, [pc, #116]	; (47d4 <AdcLdd1_Init+0xcc>)
    475e:	4a1d      	ldr	r2, [pc, #116]	; (47d4 <AdcLdd1_Init+0xcc>)
    4760:	68d2      	ldr	r2, [r2, #12]
    4762:	2110      	movs	r1, #16
    4764:	430a      	orrs	r2, r1
    4766:	60da      	str	r2, [r3, #12]
  /* PORTE_PCR18: ISF=0,MUX=0 */
  PORTE_PCR18 &= (uint32_t)~(uint32_t)((PORT_PCR_ISF_MASK | PORT_PCR_MUX(0x07)));
    4768:	4b1b      	ldr	r3, [pc, #108]	; (47d8 <AdcLdd1_Init+0xd0>)
    476a:	4a1b      	ldr	r2, [pc, #108]	; (47d8 <AdcLdd1_Init+0xd0>)
    476c:	6c91      	ldr	r1, [r2, #72]	; 0x48
    476e:	4a18      	ldr	r2, [pc, #96]	; (47d0 <AdcLdd1_Init+0xc8>)
    4770:	400a      	ands	r2, r1
    4772:	649a      	str	r2, [r3, #72]	; 0x48
  /* PORTB_PCR1: ISF=0,MUX=0 */
  PORTB_PCR1 &= (uint32_t)~(uint32_t)((PORT_PCR_ISF_MASK | PORT_PCR_MUX(0x07)));
    4774:	4b19      	ldr	r3, [pc, #100]	; (47dc <AdcLdd1_Init+0xd4>)
    4776:	4a19      	ldr	r2, [pc, #100]	; (47dc <AdcLdd1_Init+0xd4>)
    4778:	6851      	ldr	r1, [r2, #4]
    477a:	4a15      	ldr	r2, [pc, #84]	; (47d0 <AdcLdd1_Init+0xc8>)
    477c:	400a      	ands	r2, r1
    477e:	605a      	str	r2, [r3, #4]
  /* PORTE_PCR16: ISF=0,MUX=0 */
  PORTE_PCR16 &= (uint32_t)~(uint32_t)((PORT_PCR_ISF_MASK | PORT_PCR_MUX(0x07)));
    4780:	4b15      	ldr	r3, [pc, #84]	; (47d8 <AdcLdd1_Init+0xd0>)
    4782:	4a15      	ldr	r2, [pc, #84]	; (47d8 <AdcLdd1_Init+0xd0>)
    4784:	6c11      	ldr	r1, [r2, #64]	; 0x40
    4786:	4a12      	ldr	r2, [pc, #72]	; (47d0 <AdcLdd1_Init+0xc8>)
    4788:	400a      	ands	r2, r1
    478a:	641a      	str	r2, [r3, #64]	; 0x40
  /* ADC0_CFG1: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,ADLPC=0,ADIV=2,ADLSMP=1,MODE=1,ADICLK=0 */
  ADC0_CFG1 = ADC_CFG1_ADIV(0x02) |
    478c:	4b11      	ldr	r3, [pc, #68]	; (47d4 <AdcLdd1_Init+0xcc>)
    478e:	2254      	movs	r2, #84	; 0x54
    4790:	609a      	str	r2, [r3, #8]
              ADC_CFG1_ADLSMP_MASK |
              ADC_CFG1_MODE(0x01) |
              ADC_CFG1_ADICLK(0x00);
  /* ADC0_CFG2: ADACKEN=0,ADHSC=0,ADLSTS=2 */
  ADC0_CFG2 = (uint32_t)((ADC0_CFG2 & (uint32_t)~(uint32_t)(
    4792:	4b10      	ldr	r3, [pc, #64]	; (47d4 <AdcLdd1_Init+0xcc>)
    4794:	4a0f      	ldr	r2, [pc, #60]	; (47d4 <AdcLdd1_Init+0xcc>)
    4796:	68d2      	ldr	r2, [r2, #12]
    4798:	210f      	movs	r1, #15
    479a:	438a      	bics	r2, r1
    479c:	2102      	movs	r1, #2
    479e:	430a      	orrs	r2, r1
    47a0:	60da      	str	r2, [r3, #12]
               ADC_CFG2_ADLSTS(0x01)
              )) | (uint32_t)(
               ADC_CFG2_ADLSTS(0x02)
              ));
  /* ADC0_SC2: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,ADACT=0,ADTRG=0,ACFE=0,ACFGT=0,ACREN=0,DMAEN=0,REFSEL=1 */
  ADC0_SC2 = ADC_SC2_REFSEL(0x01);
    47a2:	4b0c      	ldr	r3, [pc, #48]	; (47d4 <AdcLdd1_Init+0xcc>)
    47a4:	2201      	movs	r2, #1
    47a6:	621a      	str	r2, [r3, #32]
  /* ADC0_SC3: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,CAL=0,CALF=1,??=0,??=0,ADCO=0,AVGE=0,AVGS=0 */
  ADC0_SC3 = (ADC_SC3_CALF_MASK | ADC_SC3_AVGS(0x00));
    47a8:	4b0a      	ldr	r3, [pc, #40]	; (47d4 <AdcLdd1_Init+0xcc>)
    47aa:	2240      	movs	r2, #64	; 0x40
    47ac:	625a      	str	r2, [r3, #36]	; 0x24
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_AdcLdd1_ID,DeviceDataPrv);
    47ae:	4b0c      	ldr	r3, [pc, #48]	; (47e0 <AdcLdd1_Init+0xd8>)
    47b0:	68fa      	ldr	r2, [r7, #12]
    47b2:	62da      	str	r2, [r3, #44]	; 0x2c
  return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the data data structure */
    47b4:	68fb      	ldr	r3, [r7, #12]
}
    47b6:	1c18      	adds	r0, r3, #0
    47b8:	46bd      	mov	sp, r7
    47ba:	b004      	add	sp, #16
    47bc:	bd80      	pop	{r7, pc}
    47be:	46c0      	nop			; (mov r8, r8)
    47c0:	200000e8 	.word	0x200000e8
    47c4:	40047000 	.word	0x40047000
    47c8:	0000103c 	.word	0x0000103c
    47cc:	4004c000 	.word	0x4004c000
    47d0:	fefff8ff 	.word	0xfefff8ff
    47d4:	4003b000 	.word	0x4003b000
    47d8:	4004d000 	.word	0x4004d000
    47dc:	4004a000 	.word	0x4004a000
    47e0:	20000024 	.word	0x20000024

000047e4 <ASerialLdd1_Init>:
**     @return
**                         - Device data structure pointer.
*/
/* ===================================================================*/
LDD_TDeviceData* ASerialLdd1_Init(LDD_TUserData *UserDataPtr)
{
    47e4:	b580      	push	{r7, lr}
    47e6:	b084      	sub	sp, #16
    47e8:	af00      	add	r7, sp, #0
    47ea:	6078      	str	r0, [r7, #4]
  /* Allocate device structure */
  ASerialLdd1_TDeviceDataPtr DeviceDataPrv;
  /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
    47ec:	4b61      	ldr	r3, [pc, #388]	; (4974 <ASerialLdd1_Init+0x190>)
    47ee:	60fb      	str	r3, [r7, #12]

  /* Clear the receive counters and pointer */
  DeviceDataPrv->InpRecvDataNum = 0x00U; /* Clear the counter of received characters */
    47f0:	68fb      	ldr	r3, [r7, #12]
    47f2:	2200      	movs	r2, #0
    47f4:	811a      	strh	r2, [r3, #8]
  DeviceDataPrv->InpDataNumReq = 0x00U; /* Clear the counter of characters to receive by ReceiveBlock() */
    47f6:	68fb      	ldr	r3, [r7, #12]
    47f8:	2200      	movs	r2, #0
    47fa:	821a      	strh	r2, [r3, #16]
  DeviceDataPrv->InpDataPtr = NULL;    /* Clear the buffer pointer for received characters */
    47fc:	68fb      	ldr	r3, [r7, #12]
    47fe:	2200      	movs	r2, #0
    4800:	60da      	str	r2, [r3, #12]
  /* Clear the transmit counters and pointer */
  DeviceDataPrv->OutSentDataNum = 0x00U; /* Clear the counter of sent characters */
    4802:	68fb      	ldr	r3, [r7, #12]
    4804:	2200      	movs	r2, #0
    4806:	825a      	strh	r2, [r3, #18]
  DeviceDataPrv->OutDataNumReq = 0x00U; /* Clear the counter of characters to be send by SendBlock() */
    4808:	68fb      	ldr	r3, [r7, #12]
    480a:	2200      	movs	r2, #0
    480c:	831a      	strh	r2, [r3, #24]
  DeviceDataPrv->OutDataPtr = NULL;    /* Clear the buffer pointer for data to be transmitted */
    480e:	68fb      	ldr	r3, [r7, #12]
    4810:	2200      	movs	r2, #0
    4812:	615a      	str	r2, [r3, #20]
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
    4814:	68fb      	ldr	r3, [r7, #12]
    4816:	687a      	ldr	r2, [r7, #4]
    4818:	61da      	str	r2, [r3, #28]
  /* Allocate interrupt vectors */
  /* {Default RTOS Adapter} Set interrupt vector: IVT is static, ISR parameter is passed by the global variable */
  INT_UART0__DEFAULT_RTOS_ISRPARAM = DeviceDataPrv;
    481a:	4b57      	ldr	r3, [pc, #348]	; (4978 <ASerialLdd1_Init+0x194>)
    481c:	68fa      	ldr	r2, [r7, #12]
    481e:	601a      	str	r2, [r3, #0]
  /* SIM_SCGC4: UART0=1 */
  SIM_SCGC4 |= SIM_SCGC4_UART0_MASK;
    4820:	4a56      	ldr	r2, [pc, #344]	; (497c <ASerialLdd1_Init+0x198>)
    4822:	4956      	ldr	r1, [pc, #344]	; (497c <ASerialLdd1_Init+0x198>)
    4824:	4b56      	ldr	r3, [pc, #344]	; (4980 <ASerialLdd1_Init+0x19c>)
    4826:	58cb      	ldr	r3, [r1, r3]
    4828:	2180      	movs	r1, #128	; 0x80
    482a:	00c9      	lsls	r1, r1, #3
    482c:	4319      	orrs	r1, r3
    482e:	4b54      	ldr	r3, [pc, #336]	; (4980 <ASerialLdd1_Init+0x19c>)
    4830:	50d1      	str	r1, [r2, r3]
  /* PORTA_PCR1: ISF=0,MUX=2 */
  PORTA_PCR1 = (uint32_t)((PORTA_PCR1 & (uint32_t)~(uint32_t)(
    4832:	4b54      	ldr	r3, [pc, #336]	; (4984 <ASerialLdd1_Init+0x1a0>)
    4834:	4a53      	ldr	r2, [pc, #332]	; (4984 <ASerialLdd1_Init+0x1a0>)
    4836:	6851      	ldr	r1, [r2, #4]
    4838:	4a53      	ldr	r2, [pc, #332]	; (4988 <ASerialLdd1_Init+0x1a4>)
    483a:	400a      	ands	r2, r1
    483c:	2180      	movs	r1, #128	; 0x80
    483e:	0089      	lsls	r1, r1, #2
    4840:	430a      	orrs	r2, r1
    4842:	605a      	str	r2, [r3, #4]
                PORT_PCR_MUX(0x05)
               )) | (uint32_t)(
                PORT_PCR_MUX(0x02)
               ));
  /* PORTA_PCR2: ISF=0,MUX=2 */
  PORTA_PCR2 = (uint32_t)((PORTA_PCR2 & (uint32_t)~(uint32_t)(
    4844:	4b4f      	ldr	r3, [pc, #316]	; (4984 <ASerialLdd1_Init+0x1a0>)
    4846:	4a4f      	ldr	r2, [pc, #316]	; (4984 <ASerialLdd1_Init+0x1a0>)
    4848:	6891      	ldr	r1, [r2, #8]
    484a:	4a4f      	ldr	r2, [pc, #316]	; (4988 <ASerialLdd1_Init+0x1a4>)
    484c:	400a      	ands	r2, r1
    484e:	2180      	movs	r1, #128	; 0x80
    4850:	0089      	lsls	r1, r1, #2
    4852:	430a      	orrs	r2, r1
    4854:	609a      	str	r2, [r3, #8]
                PORT_PCR_MUX(0x05)
               )) | (uint32_t)(
                PORT_PCR_MUX(0x02)
               ));
  /* NVIC_IPR3: PRI_12=0x80 */
  NVIC_IPR3 = (uint32_t)((NVIC_IPR3 & (uint32_t)~(uint32_t)(
    4856:	4a4d      	ldr	r2, [pc, #308]	; (498c <ASerialLdd1_Init+0x1a8>)
    4858:	494c      	ldr	r1, [pc, #304]	; (498c <ASerialLdd1_Init+0x1a8>)
    485a:	23c3      	movs	r3, #195	; 0xc3
    485c:	009b      	lsls	r3, r3, #2
    485e:	58cb      	ldr	r3, [r1, r3]
    4860:	21ff      	movs	r1, #255	; 0xff
    4862:	438b      	bics	r3, r1
    4864:	2180      	movs	r1, #128	; 0x80
    4866:	4319      	orrs	r1, r3
    4868:	23c3      	movs	r3, #195	; 0xc3
    486a:	009b      	lsls	r3, r3, #2
    486c:	50d1      	str	r1, [r2, r3]
               NVIC_IP_PRI_12(0x7F)
              )) | (uint32_t)(
               NVIC_IP_PRI_12(0x80)
              ));
  /* NVIC_ISER: SETENA|=0x1000 */
  NVIC_ISER |= NVIC_ISER_SETENA(0x1000);
    486e:	4b47      	ldr	r3, [pc, #284]	; (498c <ASerialLdd1_Init+0x1a8>)
    4870:	4a46      	ldr	r2, [pc, #280]	; (498c <ASerialLdd1_Init+0x1a8>)
    4872:	6812      	ldr	r2, [r2, #0]
    4874:	2180      	movs	r1, #128	; 0x80
    4876:	0149      	lsls	r1, r1, #5
    4878:	430a      	orrs	r2, r1
    487a:	601a      	str	r2, [r3, #0]
  UART0_PDD_EnableTransmitter(UART0_BASE_PTR, PDD_DISABLE); /* Disable transmitter. */
    487c:	4b44      	ldr	r3, [pc, #272]	; (4990 <ASerialLdd1_Init+0x1ac>)
    487e:	4a44      	ldr	r2, [pc, #272]	; (4990 <ASerialLdd1_Init+0x1ac>)
    4880:	78d2      	ldrb	r2, [r2, #3]
    4882:	b2d2      	uxtb	r2, r2
    4884:	2108      	movs	r1, #8
    4886:	438a      	bics	r2, r1
    4888:	b2d2      	uxtb	r2, r2
    488a:	70da      	strb	r2, [r3, #3]
  UART0_PDD_EnableReceiver(UART0_BASE_PTR, PDD_DISABLE); /* Disable receiver. */
    488c:	4b40      	ldr	r3, [pc, #256]	; (4990 <ASerialLdd1_Init+0x1ac>)
    488e:	4a40      	ldr	r2, [pc, #256]	; (4990 <ASerialLdd1_Init+0x1ac>)
    4890:	78d2      	ldrb	r2, [r2, #3]
    4892:	b2d2      	uxtb	r2, r2
    4894:	2104      	movs	r1, #4
    4896:	438a      	bics	r2, r1
    4898:	b2d2      	uxtb	r2, r2
    489a:	70da      	strb	r2, [r3, #3]
  DeviceDataPrv->SerFlag = 0x00U;      /* Reset flags */
    489c:	68fb      	ldr	r3, [r7, #12]
    489e:	2200      	movs	r2, #0
    48a0:	801a      	strh	r2, [r3, #0]
  DeviceDataPrv->ErrFlag = 0x00U;      /* Reset error flags */
    48a2:	68fb      	ldr	r3, [r7, #12]
    48a4:	2200      	movs	r2, #0
    48a6:	605a      	str	r2, [r3, #4]
  DeviceDataPrv->EnUser = TRUE;        /* Enable device */
    48a8:	68fb      	ldr	r3, [r7, #12]
    48aa:	2201      	movs	r2, #1
    48ac:	709a      	strb	r2, [r3, #2]
  /* UART0_C1: LOOPS=0,DOZEEN=0,RSRC=0,M=0,WAKE=0,ILT=1,PE=0,PT=0 */
  UART0_C1 = UART0_C1_ILT_MASK;        /*  Set the C1 register */
    48ae:	4b38      	ldr	r3, [pc, #224]	; (4990 <ASerialLdd1_Init+0x1ac>)
    48b0:	2204      	movs	r2, #4
    48b2:	709a      	strb	r2, [r3, #2]
  /* UART0_C3: R8T9=0,R9T8=0,TXDIR=0,TXINV=0,ORIE=0,NEIE=0,FEIE=0,PEIE=0 */
  UART0_C3 = 0x00U;                    /*  Set the C3 register */
    48b4:	4b36      	ldr	r3, [pc, #216]	; (4990 <ASerialLdd1_Init+0x1ac>)
    48b6:	2200      	movs	r2, #0
    48b8:	719a      	strb	r2, [r3, #6]
  /* UART0_C4: MAEN1=0,MAEN2=0,M10=0,OSR=0 */
  UART0_C4 = UART0_C4_OSR(0x00);       /*  Set the C4 register */
    48ba:	4b35      	ldr	r3, [pc, #212]	; (4990 <ASerialLdd1_Init+0x1ac>)
    48bc:	2200      	movs	r2, #0
    48be:	729a      	strb	r2, [r3, #10]
  /* UART0_S2: LBKDIF=0,RXEDGIF=0,MSBF=0,RXINV=0,RWUID=0,BRK13=0,LBKDE=0,RAF=0 */
  UART0_S2 = 0x00U;                    /*  Set the S2 register */
    48c0:	4b33      	ldr	r3, [pc, #204]	; (4990 <ASerialLdd1_Init+0x1ac>)
    48c2:	2200      	movs	r2, #0
    48c4:	715a      	strb	r2, [r3, #5]
  SIM_PDD_SetClockSourceUART0(SIM_BASE_PTR, SIM_PDD_UART0_INTERNAL_REF_CLOCK);
    48c6:	4a2d      	ldr	r2, [pc, #180]	; (497c <ASerialLdd1_Init+0x198>)
    48c8:	492c      	ldr	r1, [pc, #176]	; (497c <ASerialLdd1_Init+0x198>)
    48ca:	4b32      	ldr	r3, [pc, #200]	; (4994 <ASerialLdd1_Init+0x1b0>)
    48cc:	58cb      	ldr	r3, [r1, r3]
    48ce:	21c0      	movs	r1, #192	; 0xc0
    48d0:	0509      	lsls	r1, r1, #20
    48d2:	4319      	orrs	r1, r3
    48d4:	4b2f      	ldr	r3, [pc, #188]	; (4994 <ASerialLdd1_Init+0x1b0>)
    48d6:	50d1      	str	r1, [r2, r3]
  UART0_PDD_SetBaudRate(UART0_BASE_PTR, 26U); /* Set the baud rate register. */
    48d8:	4b2d      	ldr	r3, [pc, #180]	; (4990 <ASerialLdd1_Init+0x1ac>)
    48da:	4a2d      	ldr	r2, [pc, #180]	; (4990 <ASerialLdd1_Init+0x1ac>)
    48dc:	7812      	ldrb	r2, [r2, #0]
    48de:	b2d2      	uxtb	r2, r2
    48e0:	211f      	movs	r1, #31
    48e2:	438a      	bics	r2, r1
    48e4:	b2d2      	uxtb	r2, r2
    48e6:	701a      	strb	r2, [r3, #0]
    48e8:	4b29      	ldr	r3, [pc, #164]	; (4990 <ASerialLdd1_Init+0x1ac>)
    48ea:	221a      	movs	r2, #26
    48ec:	705a      	strb	r2, [r3, #1]
  UART0_PDD_SetOversamplingRatio(UART0_BASE_PTR, 3U);
    48ee:	4b28      	ldr	r3, [pc, #160]	; (4990 <ASerialLdd1_Init+0x1ac>)
    48f0:	4a27      	ldr	r2, [pc, #156]	; (4990 <ASerialLdd1_Init+0x1ac>)
    48f2:	7a92      	ldrb	r2, [r2, #10]
    48f4:	b2d2      	uxtb	r2, r2
    48f6:	b2d2      	uxtb	r2, r2
    48f8:	211f      	movs	r1, #31
    48fa:	438a      	bics	r2, r1
    48fc:	b2d2      	uxtb	r2, r2
    48fe:	2103      	movs	r1, #3
    4900:	430a      	orrs	r2, r1
    4902:	b2d2      	uxtb	r2, r2
    4904:	b2d2      	uxtb	r2, r2
    4906:	729a      	strb	r2, [r3, #10]
  UART0_PDD_EnableSamplingOnBothEdges(UART0_BASE_PTR, PDD_ENABLE);
    4908:	4b21      	ldr	r3, [pc, #132]	; (4990 <ASerialLdd1_Init+0x1ac>)
    490a:	4a21      	ldr	r2, [pc, #132]	; (4990 <ASerialLdd1_Init+0x1ac>)
    490c:	7ad2      	ldrb	r2, [r2, #11]
    490e:	b2d2      	uxtb	r2, r2
    4910:	b2d2      	uxtb	r2, r2
    4912:	2102      	movs	r1, #2
    4914:	430a      	orrs	r2, r1
    4916:	b2d2      	uxtb	r2, r2
    4918:	b2d2      	uxtb	r2, r2
    491a:	72da      	strb	r2, [r3, #11]
  UART0_PDD_EnableTransmitter(UART0_BASE_PTR, PDD_ENABLE); /* Enable transmitter */
    491c:	4b1c      	ldr	r3, [pc, #112]	; (4990 <ASerialLdd1_Init+0x1ac>)
    491e:	4a1c      	ldr	r2, [pc, #112]	; (4990 <ASerialLdd1_Init+0x1ac>)
    4920:	78d2      	ldrb	r2, [r2, #3]
    4922:	b2d2      	uxtb	r2, r2
    4924:	b2d2      	uxtb	r2, r2
    4926:	2108      	movs	r1, #8
    4928:	430a      	orrs	r2, r1
    492a:	b2d2      	uxtb	r2, r2
    492c:	b2d2      	uxtb	r2, r2
    492e:	70da      	strb	r2, [r3, #3]
  UART0_PDD_EnableReceiver(UART0_BASE_PTR, PDD_ENABLE); /* Enable receiver */
    4930:	4b17      	ldr	r3, [pc, #92]	; (4990 <ASerialLdd1_Init+0x1ac>)
    4932:	4a17      	ldr	r2, [pc, #92]	; (4990 <ASerialLdd1_Init+0x1ac>)
    4934:	78d2      	ldrb	r2, [r2, #3]
    4936:	b2d2      	uxtb	r2, r2
    4938:	b2d2      	uxtb	r2, r2
    493a:	2104      	movs	r1, #4
    493c:	430a      	orrs	r2, r1
    493e:	b2d2      	uxtb	r2, r2
    4940:	b2d2      	uxtb	r2, r2
    4942:	70da      	strb	r2, [r3, #3]
  UART0_PDD_EnableInterrupt(UART0_BASE_PTR, ( UART0_PDD_INTERRUPT_RECEIVER | UART0_PDD_INTERRUPT_PARITY_ERROR | UART0_PDD_INTERRUPT_FRAMING_ERROR | UART0_PDD_INTERRUPT_NOISE_ERROR | UART0_PDD_INTERRUPT_OVERRUN_ERROR )); /* Enable interrupts */
    4944:	4b12      	ldr	r3, [pc, #72]	; (4990 <ASerialLdd1_Init+0x1ac>)
    4946:	4a12      	ldr	r2, [pc, #72]	; (4990 <ASerialLdd1_Init+0x1ac>)
    4948:	78d2      	ldrb	r2, [r2, #3]
    494a:	b2d2      	uxtb	r2, r2
    494c:	2120      	movs	r1, #32
    494e:	430a      	orrs	r2, r1
    4950:	b2d2      	uxtb	r2, r2
    4952:	70da      	strb	r2, [r3, #3]
    4954:	4b0e      	ldr	r3, [pc, #56]	; (4990 <ASerialLdd1_Init+0x1ac>)
    4956:	4a0e      	ldr	r2, [pc, #56]	; (4990 <ASerialLdd1_Init+0x1ac>)
    4958:	7992      	ldrb	r2, [r2, #6]
    495a:	b2d2      	uxtb	r2, r2
    495c:	210f      	movs	r1, #15
    495e:	430a      	orrs	r2, r1
    4960:	b2d2      	uxtb	r2, r2
    4962:	719a      	strb	r2, [r3, #6]
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_ASerialLdd1_ID,DeviceDataPrv);
    4964:	4b0c      	ldr	r3, [pc, #48]	; (4998 <ASerialLdd1_Init+0x1b4>)
    4966:	68fa      	ldr	r2, [r7, #12]
    4968:	615a      	str	r2, [r3, #20]
  return ((LDD_TDeviceData *)DeviceDataPrv);
    496a:	68fb      	ldr	r3, [r7, #12]
}
    496c:	1c18      	adds	r0, r3, #0
    496e:	46bd      	mov	sp, r7
    4970:	b004      	add	sp, #16
    4972:	bd80      	pop	{r7, pc}
    4974:	200000f0 	.word	0x200000f0
    4978:	20000110 	.word	0x20000110
    497c:	40047000 	.word	0x40047000
    4980:	00001034 	.word	0x00001034
    4984:	40049000 	.word	0x40049000
    4988:	fefff8ff 	.word	0xfefff8ff
    498c:	e000e100 	.word	0xe000e100
    4990:	4006a000 	.word	0x4006a000
    4994:	00001004 	.word	0x00001004
    4998:	20000024 	.word	0x20000024

0000499c <ASerialLdd1_Enable>:
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration.
*/
/* ===================================================================*/
LDD_TError ASerialLdd1_Enable(LDD_TDeviceData *DeviceDataPtr)
{
    499c:	b580      	push	{r7, lr}
    499e:	b084      	sub	sp, #16
    49a0:	af00      	add	r7, sp, #0
    49a2:	6078      	str	r0, [r7, #4]
  ASerialLdd1_TDeviceDataPtr DeviceDataPrv = (ASerialLdd1_TDeviceDataPtr)DeviceDataPtr;
    49a4:	687b      	ldr	r3, [r7, #4]
    49a6:	60fb      	str	r3, [r7, #12]

  if (!DeviceDataPrv->EnUser) {        /* Is the device disabled by user? */
    49a8:	68fb      	ldr	r3, [r7, #12]
    49aa:	789b      	ldrb	r3, [r3, #2]
    49ac:	2b00      	cmp	r3, #0
    49ae:	d126      	bne.n	49fe <ASerialLdd1_Enable+0x62>
    DeviceDataPrv->EnUser = TRUE;      /* If yes then set the flag "device enabled" */
    49b0:	68fb      	ldr	r3, [r7, #12]
    49b2:	2201      	movs	r2, #1
    49b4:	709a      	strb	r2, [r3, #2]
    UART0_PDD_EnableTransmitter(UART0_BASE_PTR, PDD_ENABLE); /* Enable transmitter */
    49b6:	4b14      	ldr	r3, [pc, #80]	; (4a08 <ASerialLdd1_Enable+0x6c>)
    49b8:	4a13      	ldr	r2, [pc, #76]	; (4a08 <ASerialLdd1_Enable+0x6c>)
    49ba:	78d2      	ldrb	r2, [r2, #3]
    49bc:	b2d2      	uxtb	r2, r2
    49be:	b2d2      	uxtb	r2, r2
    49c0:	2108      	movs	r1, #8
    49c2:	430a      	orrs	r2, r1
    49c4:	b2d2      	uxtb	r2, r2
    49c6:	b2d2      	uxtb	r2, r2
    49c8:	70da      	strb	r2, [r3, #3]
    UART0_PDD_EnableReceiver(UART0_BASE_PTR, PDD_ENABLE); /* Enable receiver */
    49ca:	4b0f      	ldr	r3, [pc, #60]	; (4a08 <ASerialLdd1_Enable+0x6c>)
    49cc:	4a0e      	ldr	r2, [pc, #56]	; (4a08 <ASerialLdd1_Enable+0x6c>)
    49ce:	78d2      	ldrb	r2, [r2, #3]
    49d0:	b2d2      	uxtb	r2, r2
    49d2:	b2d2      	uxtb	r2, r2
    49d4:	2104      	movs	r1, #4
    49d6:	430a      	orrs	r2, r1
    49d8:	b2d2      	uxtb	r2, r2
    49da:	b2d2      	uxtb	r2, r2
    49dc:	70da      	strb	r2, [r3, #3]
    UART0_PDD_EnableInterrupt(UART0_BASE_PTR, ( UART0_PDD_INTERRUPT_RECEIVER | UART0_PDD_INTERRUPT_PARITY_ERROR | UART0_PDD_INTERRUPT_FRAMING_ERROR | UART0_PDD_INTERRUPT_NOISE_ERROR | UART0_PDD_INTERRUPT_OVERRUN_ERROR )); /* Enable interrupts */
    49de:	4b0a      	ldr	r3, [pc, #40]	; (4a08 <ASerialLdd1_Enable+0x6c>)
    49e0:	4a09      	ldr	r2, [pc, #36]	; (4a08 <ASerialLdd1_Enable+0x6c>)
    49e2:	78d2      	ldrb	r2, [r2, #3]
    49e4:	b2d2      	uxtb	r2, r2
    49e6:	2120      	movs	r1, #32
    49e8:	430a      	orrs	r2, r1
    49ea:	b2d2      	uxtb	r2, r2
    49ec:	70da      	strb	r2, [r3, #3]
    49ee:	4b06      	ldr	r3, [pc, #24]	; (4a08 <ASerialLdd1_Enable+0x6c>)
    49f0:	4a05      	ldr	r2, [pc, #20]	; (4a08 <ASerialLdd1_Enable+0x6c>)
    49f2:	7992      	ldrb	r2, [r2, #6]
    49f4:	b2d2      	uxtb	r2, r2
    49f6:	210f      	movs	r1, #15
    49f8:	430a      	orrs	r2, r1
    49fa:	b2d2      	uxtb	r2, r2
    49fc:	719a      	strb	r2, [r3, #6]
  }
  return ERR_OK;                       /* OK */
    49fe:	2300      	movs	r3, #0
}
    4a00:	1c18      	adds	r0, r3, #0
    4a02:	46bd      	mov	sp, r7
    4a04:	b004      	add	sp, #16
    4a06:	bd80      	pop	{r7, pc}
    4a08:	4006a000 	.word	0x4006a000

00004a0c <ASerialLdd1_Disable>:
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration.
*/
/* ===================================================================*/
LDD_TError ASerialLdd1_Disable(LDD_TDeviceData *DeviceDataPtr)
{
    4a0c:	b580      	push	{r7, lr}
    4a0e:	b084      	sub	sp, #16
    4a10:	af00      	add	r7, sp, #0
    4a12:	6078      	str	r0, [r7, #4]
  ASerialLdd1_TDeviceDataPtr DeviceDataPrv = (ASerialLdd1_TDeviceDataPtr)DeviceDataPtr;
    4a14:	687b      	ldr	r3, [r7, #4]
    4a16:	60fb      	str	r3, [r7, #12]

  if (DeviceDataPrv->EnUser) {         /* Is the device enabled by user? */
    4a18:	68fb      	ldr	r3, [r7, #12]
    4a1a:	789b      	ldrb	r3, [r3, #2]
    4a1c:	2b00      	cmp	r3, #0
    4a1e:	d022      	beq.n	4a66 <ASerialLdd1_Disable+0x5a>
    DeviceDataPrv->EnUser = FALSE;     /* If yes then set the flag "device disabled" */
    4a20:	68fb      	ldr	r3, [r7, #12]
    4a22:	2200      	movs	r2, #0
    4a24:	709a      	strb	r2, [r3, #2]
    UART0_PDD_DisableInterrupt(UART0_BASE_PTR, ( UART0_PDD_INTERRUPT_TRANSMITTER_COMPLETE | UART0_PDD_INTERRUPT_RECEIVER | UART0_PDD_INTERRUPT_TRANSMITTER | UART0_PDD_INTERRUPT_PARITY_ERROR | UART0_PDD_INTERRUPT_FRAMING_ERROR | UART0_PDD_INTERRUPT_NOISE_ERROR | UART0_PDD_INTERRUPT_OVERRUN_ERROR )); /* Disable interrupts */
    4a26:	4b12      	ldr	r3, [pc, #72]	; (4a70 <ASerialLdd1_Disable+0x64>)
    4a28:	4a11      	ldr	r2, [pc, #68]	; (4a70 <ASerialLdd1_Disable+0x64>)
    4a2a:	78d2      	ldrb	r2, [r2, #3]
    4a2c:	b2d1      	uxtb	r1, r2
    4a2e:	221f      	movs	r2, #31
    4a30:	400a      	ands	r2, r1
    4a32:	b2d2      	uxtb	r2, r2
    4a34:	70da      	strb	r2, [r3, #3]
    4a36:	4b0e      	ldr	r3, [pc, #56]	; (4a70 <ASerialLdd1_Disable+0x64>)
    4a38:	4a0d      	ldr	r2, [pc, #52]	; (4a70 <ASerialLdd1_Disable+0x64>)
    4a3a:	7992      	ldrb	r2, [r2, #6]
    4a3c:	b2d2      	uxtb	r2, r2
    4a3e:	210f      	movs	r1, #15
    4a40:	438a      	bics	r2, r1
    4a42:	b2d2      	uxtb	r2, r2
    4a44:	719a      	strb	r2, [r3, #6]
    UART0_PDD_EnableTransmitter(UART0_BASE_PTR, PDD_DISABLE); /* Disable transmitter. */
    4a46:	4b0a      	ldr	r3, [pc, #40]	; (4a70 <ASerialLdd1_Disable+0x64>)
    4a48:	4a09      	ldr	r2, [pc, #36]	; (4a70 <ASerialLdd1_Disable+0x64>)
    4a4a:	78d2      	ldrb	r2, [r2, #3]
    4a4c:	b2d2      	uxtb	r2, r2
    4a4e:	2108      	movs	r1, #8
    4a50:	438a      	bics	r2, r1
    4a52:	b2d2      	uxtb	r2, r2
    4a54:	70da      	strb	r2, [r3, #3]
    UART0_PDD_EnableReceiver(UART0_BASE_PTR, PDD_DISABLE); /* Disable receiver. */
    4a56:	4b06      	ldr	r3, [pc, #24]	; (4a70 <ASerialLdd1_Disable+0x64>)
    4a58:	4a05      	ldr	r2, [pc, #20]	; (4a70 <ASerialLdd1_Disable+0x64>)
    4a5a:	78d2      	ldrb	r2, [r2, #3]
    4a5c:	b2d2      	uxtb	r2, r2
    4a5e:	2104      	movs	r1, #4
    4a60:	438a      	bics	r2, r1
    4a62:	b2d2      	uxtb	r2, r2
    4a64:	70da      	strb	r2, [r3, #3]
  }
  return ERR_OK;                       /* OK */
    4a66:	2300      	movs	r3, #0
}
    4a68:	1c18      	adds	r0, r3, #0
    4a6a:	46bd      	mov	sp, r7
    4a6c:	b004      	add	sp, #16
    4a6e:	bd80      	pop	{r7, pc}
    4a70:	4006a000 	.word	0x4006a000

00004a74 <ASerialLdd1_ReceiveBlock>:
**                           ERR_BUSY - The previous receive request is
**                           pending.
*/
/* ===================================================================*/
LDD_TError ASerialLdd1_ReceiveBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, uint16_t Size)
{
    4a74:	b580      	push	{r7, lr}
    4a76:	b086      	sub	sp, #24
    4a78:	af00      	add	r7, sp, #0
    4a7a:	60f8      	str	r0, [r7, #12]
    4a7c:	60b9      	str	r1, [r7, #8]
    4a7e:	1dbb      	adds	r3, r7, #6
    4a80:	801a      	strh	r2, [r3, #0]
  ASerialLdd1_TDeviceDataPtr DeviceDataPrv = (ASerialLdd1_TDeviceDataPtr)DeviceDataPtr;
    4a82:	68fb      	ldr	r3, [r7, #12]
    4a84:	617b      	str	r3, [r7, #20]

  if (!DeviceDataPrv->EnUser) {        /* Is the device disabled by user? */
    4a86:	697b      	ldr	r3, [r7, #20]
    4a88:	789b      	ldrb	r3, [r3, #2]
    4a8a:	2b00      	cmp	r3, #0
    4a8c:	d101      	bne.n	4a92 <ASerialLdd1_ReceiveBlock+0x1e>
    return ERR_DISABLED;               /* If yes then error */
    4a8e:	2307      	movs	r3, #7
    4a90:	e039      	b.n	4b06 <ASerialLdd1_ReceiveBlock+0x92>
  }
  if (Size == 0U) {                    /* Is the parameter Size within an expected range? */
    4a92:	1dbb      	adds	r3, r7, #6
    4a94:	881b      	ldrh	r3, [r3, #0]
    4a96:	2b00      	cmp	r3, #0
    4a98:	d101      	bne.n	4a9e <ASerialLdd1_ReceiveBlock+0x2a>
    return ERR_PARAM_SIZE;             /* If no then error */
    4a9a:	2384      	movs	r3, #132	; 0x84
    4a9c:	e033      	b.n	4b06 <ASerialLdd1_ReceiveBlock+0x92>
  }
  if (DeviceDataPrv->InpDataNumReq != 0x00U) { /* Is the previous receive operation pending? */
    4a9e:	697b      	ldr	r3, [r7, #20]
    4aa0:	8a1b      	ldrh	r3, [r3, #16]
    4aa2:	2b00      	cmp	r3, #0
    4aa4:	d001      	beq.n	4aaa <ASerialLdd1_ReceiveBlock+0x36>
    return ERR_BUSY;                   /* If yes then error */
    4aa6:	2308      	movs	r3, #8
    4aa8:	e02d      	b.n	4b06 <ASerialLdd1_ReceiveBlock+0x92>
  }
  /* {Default RTOS Adapter} Critical section begin, general PE function is used */
  EnterCritical();
    4aaa:	1c3b      	adds	r3, r7, #0
    4aac:	3313      	adds	r3, #19
    4aae:	f3ef 8010 	mrs	r0, PRIMASK
    4ab2:	b672      	cpsid	i
    4ab4:	7018      	strb	r0, [r3, #0]
    4ab6:	4b16      	ldr	r3, [pc, #88]	; (4b10 <ASerialLdd1_ReceiveBlock+0x9c>)
    4ab8:	781b      	ldrb	r3, [r3, #0]
    4aba:	b2db      	uxtb	r3, r3
    4abc:	3301      	adds	r3, #1
    4abe:	b2db      	uxtb	r3, r3
    4ac0:	4a13      	ldr	r2, [pc, #76]	; (4b10 <ASerialLdd1_ReceiveBlock+0x9c>)
    4ac2:	1c19      	adds	r1, r3, #0
    4ac4:	7011      	strb	r1, [r2, #0]
    4ac6:	2b01      	cmp	r3, #1
    4ac8:	d104      	bne.n	4ad4 <ASerialLdd1_ReceiveBlock+0x60>
    4aca:	1c3b      	adds	r3, r7, #0
    4acc:	3313      	adds	r3, #19
    4ace:	781a      	ldrb	r2, [r3, #0]
    4ad0:	4b10      	ldr	r3, [pc, #64]	; (4b14 <ASerialLdd1_ReceiveBlock+0xa0>)
    4ad2:	701a      	strb	r2, [r3, #0]
  DeviceDataPrv->InpDataPtr = (uint8_t*)BufferPtr; /* Store a pointer to the input data. */
    4ad4:	697b      	ldr	r3, [r7, #20]
    4ad6:	68ba      	ldr	r2, [r7, #8]
    4ad8:	60da      	str	r2, [r3, #12]
  DeviceDataPrv->InpDataNumReq = Size; /* Store a number of characters to be received. */
    4ada:	697b      	ldr	r3, [r7, #20]
    4adc:	1dba      	adds	r2, r7, #6
    4ade:	8812      	ldrh	r2, [r2, #0]
    4ae0:	821a      	strh	r2, [r3, #16]
  DeviceDataPrv->InpRecvDataNum = 0x00U; /* Set number of received characters to zero. */
    4ae2:	697b      	ldr	r3, [r7, #20]
    4ae4:	2200      	movs	r2, #0
    4ae6:	811a      	strh	r2, [r3, #8]
  /* {Default RTOS Adapter} Critical section end, general PE function is used */
  ExitCritical();
    4ae8:	4b09      	ldr	r3, [pc, #36]	; (4b10 <ASerialLdd1_ReceiveBlock+0x9c>)
    4aea:	781b      	ldrb	r3, [r3, #0]
    4aec:	b2db      	uxtb	r3, r3
    4aee:	3b01      	subs	r3, #1
    4af0:	b2db      	uxtb	r3, r3
    4af2:	4a07      	ldr	r2, [pc, #28]	; (4b10 <ASerialLdd1_ReceiveBlock+0x9c>)
    4af4:	1c19      	adds	r1, r3, #0
    4af6:	7011      	strb	r1, [r2, #0]
    4af8:	2b00      	cmp	r3, #0
    4afa:	d103      	bne.n	4b04 <ASerialLdd1_ReceiveBlock+0x90>
    4afc:	4b05      	ldr	r3, [pc, #20]	; (4b14 <ASerialLdd1_ReceiveBlock+0xa0>)
    4afe:	7818      	ldrb	r0, [r3, #0]
    4b00:	f380 8810 	msr	PRIMASK, r0
  return ERR_OK;                       /* OK */
    4b04:	2300      	movs	r3, #0
}
    4b06:	1c18      	adds	r0, r3, #0
    4b08:	46bd      	mov	sp, r7
    4b0a:	b006      	add	sp, #24
    4b0c:	bd80      	pop	{r7, pc}
    4b0e:	46c0      	nop			; (mov r8, r8)
    4b10:	200000b4 	.word	0x200000b4
    4b14:	20000ad8 	.word	0x20000ad8

00004b18 <ASerialLdd1_SendBlock>:
**                           ERR_BUSY - The previous transmit request is
**                           pending.
*/
/* ===================================================================*/
LDD_TError ASerialLdd1_SendBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, uint16_t Size)
{
    4b18:	b580      	push	{r7, lr}
    4b1a:	b086      	sub	sp, #24
    4b1c:	af00      	add	r7, sp, #0
    4b1e:	60f8      	str	r0, [r7, #12]
    4b20:	60b9      	str	r1, [r7, #8]
    4b22:	1dbb      	adds	r3, r7, #6
    4b24:	801a      	strh	r2, [r3, #0]
  ASerialLdd1_TDeviceDataPtr DeviceDataPrv = (ASerialLdd1_TDeviceDataPtr)DeviceDataPtr;
    4b26:	68fb      	ldr	r3, [r7, #12]
    4b28:	617b      	str	r3, [r7, #20]

  if (!DeviceDataPrv->EnUser) {        /* Is the device disabled by user? */
    4b2a:	697b      	ldr	r3, [r7, #20]
    4b2c:	789b      	ldrb	r3, [r3, #2]
    4b2e:	2b00      	cmp	r3, #0
    4b30:	d101      	bne.n	4b36 <ASerialLdd1_SendBlock+0x1e>
    return ERR_DISABLED;               /* If yes then error */
    4b32:	2307      	movs	r3, #7
    4b34:	e04e      	b.n	4bd4 <ASerialLdd1_SendBlock+0xbc>
  }
  if (Size == 0U) {                    /* Is the parameter Size within an expected range? */
    4b36:	1dbb      	adds	r3, r7, #6
    4b38:	881b      	ldrh	r3, [r3, #0]
    4b3a:	2b00      	cmp	r3, #0
    4b3c:	d101      	bne.n	4b42 <ASerialLdd1_SendBlock+0x2a>
    return ERR_PARAM_SIZE;             /* If no then error */
    4b3e:	2384      	movs	r3, #132	; 0x84
    4b40:	e048      	b.n	4bd4 <ASerialLdd1_SendBlock+0xbc>
  }
  if (DeviceDataPrv->OutDataNumReq != 0x00U) { /* Is the previous transmit operation pending? */
    4b42:	697b      	ldr	r3, [r7, #20]
    4b44:	8b1b      	ldrh	r3, [r3, #24]
    4b46:	2b00      	cmp	r3, #0
    4b48:	d001      	beq.n	4b4e <ASerialLdd1_SendBlock+0x36>
    return ERR_BUSY;                   /* If yes then error */
    4b4a:	2308      	movs	r3, #8
    4b4c:	e042      	b.n	4bd4 <ASerialLdd1_SendBlock+0xbc>
  }
  /* {Default RTOS Adapter} Critical section begin, general PE function is used */
  EnterCritical();
    4b4e:	1c3b      	adds	r3, r7, #0
    4b50:	3313      	adds	r3, #19
    4b52:	f3ef 8010 	mrs	r0, PRIMASK
    4b56:	b672      	cpsid	i
    4b58:	7018      	strb	r0, [r3, #0]
    4b5a:	4b20      	ldr	r3, [pc, #128]	; (4bdc <ASerialLdd1_SendBlock+0xc4>)
    4b5c:	781b      	ldrb	r3, [r3, #0]
    4b5e:	b2db      	uxtb	r3, r3
    4b60:	3301      	adds	r3, #1
    4b62:	b2db      	uxtb	r3, r3
    4b64:	4a1d      	ldr	r2, [pc, #116]	; (4bdc <ASerialLdd1_SendBlock+0xc4>)
    4b66:	1c19      	adds	r1, r3, #0
    4b68:	7011      	strb	r1, [r2, #0]
    4b6a:	2b01      	cmp	r3, #1
    4b6c:	d104      	bne.n	4b78 <ASerialLdd1_SendBlock+0x60>
    4b6e:	1c3b      	adds	r3, r7, #0
    4b70:	3313      	adds	r3, #19
    4b72:	781a      	ldrb	r2, [r3, #0]
    4b74:	4b1a      	ldr	r3, [pc, #104]	; (4be0 <ASerialLdd1_SendBlock+0xc8>)
    4b76:	701a      	strb	r2, [r3, #0]
  DeviceDataPrv->OutDataPtr = (uint8_t*)BufferPtr; /* Set a pointer to the output data. */
    4b78:	697b      	ldr	r3, [r7, #20]
    4b7a:	68ba      	ldr	r2, [r7, #8]
    4b7c:	615a      	str	r2, [r3, #20]
  DeviceDataPrv->OutDataNumReq = Size; /* Set the counter of characters to be sent. */
    4b7e:	697b      	ldr	r3, [r7, #20]
    4b80:	1dba      	adds	r2, r7, #6
    4b82:	8812      	ldrh	r2, [r2, #0]
    4b84:	831a      	strh	r2, [r3, #24]
  DeviceDataPrv->OutSentDataNum = 0x00U; /* Clear the counter of sent characters. */
    4b86:	697b      	ldr	r3, [r7, #20]
    4b88:	2200      	movs	r2, #0
    4b8a:	825a      	strh	r2, [r3, #18]
  DeviceDataPrv->SerFlag |= ENABLED_TX_INT; /* Set the flag ENABLED_TX_INT */
    4b8c:	697b      	ldr	r3, [r7, #20]
    4b8e:	881b      	ldrh	r3, [r3, #0]
    4b90:	2201      	movs	r2, #1
    4b92:	4313      	orrs	r3, r2
    4b94:	b29a      	uxth	r2, r3
    4b96:	697b      	ldr	r3, [r7, #20]
    4b98:	801a      	strh	r2, [r3, #0]
  UART0_PDD_EnableInterrupt(UART0_BASE_PTR, UART0_PDD_INTERRUPT_TRANSMITTER); /* Enable TX interrupt */
    4b9a:	4b12      	ldr	r3, [pc, #72]	; (4be4 <ASerialLdd1_SendBlock+0xcc>)
    4b9c:	4a11      	ldr	r2, [pc, #68]	; (4be4 <ASerialLdd1_SendBlock+0xcc>)
    4b9e:	78d2      	ldrb	r2, [r2, #3]
    4ba0:	b2d2      	uxtb	r2, r2
    4ba2:	2180      	movs	r1, #128	; 0x80
    4ba4:	4249      	negs	r1, r1
    4ba6:	430a      	orrs	r2, r1
    4ba8:	b2d2      	uxtb	r2, r2
    4baa:	70da      	strb	r2, [r3, #3]
    4bac:	4b0d      	ldr	r3, [pc, #52]	; (4be4 <ASerialLdd1_SendBlock+0xcc>)
    4bae:	4a0d      	ldr	r2, [pc, #52]	; (4be4 <ASerialLdd1_SendBlock+0xcc>)
    4bb0:	7992      	ldrb	r2, [r2, #6]
    4bb2:	b2d2      	uxtb	r2, r2
    4bb4:	719a      	strb	r2, [r3, #6]
  /* {Default RTOS Adapter} Critical section end, general PE function is used */
  ExitCritical();
    4bb6:	4b09      	ldr	r3, [pc, #36]	; (4bdc <ASerialLdd1_SendBlock+0xc4>)
    4bb8:	781b      	ldrb	r3, [r3, #0]
    4bba:	b2db      	uxtb	r3, r3
    4bbc:	3b01      	subs	r3, #1
    4bbe:	b2db      	uxtb	r3, r3
    4bc0:	4a06      	ldr	r2, [pc, #24]	; (4bdc <ASerialLdd1_SendBlock+0xc4>)
    4bc2:	1c19      	adds	r1, r3, #0
    4bc4:	7011      	strb	r1, [r2, #0]
    4bc6:	2b00      	cmp	r3, #0
    4bc8:	d103      	bne.n	4bd2 <ASerialLdd1_SendBlock+0xba>
    4bca:	4b05      	ldr	r3, [pc, #20]	; (4be0 <ASerialLdd1_SendBlock+0xc8>)
    4bcc:	7818      	ldrb	r0, [r3, #0]
    4bce:	f380 8810 	msr	PRIMASK, r0
  return ERR_OK;                       /* OK */
    4bd2:	2300      	movs	r3, #0
}
    4bd4:	1c18      	adds	r0, r3, #0
    4bd6:	46bd      	mov	sp, r7
    4bd8:	b006      	add	sp, #24
    4bda:	bd80      	pop	{r7, pc}
    4bdc:	200000b4 	.word	0x200000b4
    4be0:	20000ad8 	.word	0x20000ad8
    4be4:	4006a000 	.word	0x4006a000

00004be8 <ASerialLdd1_TurnTxOn>:
**         DeviceDataPtr   - Device data structure
**                           pointer returned by [Init] method.
*/
/* ===================================================================*/
void ASerialLdd1_TurnTxOn(LDD_TDeviceData *DeviceDataPtr)
{
    4be8:	b580      	push	{r7, lr}
    4bea:	b082      	sub	sp, #8
    4bec:	af00      	add	r7, sp, #0
    4bee:	6078      	str	r0, [r7, #4]
  (void)DeviceDataPtr;                 /* DeviceData structure is not needed, suppress not used argument warning */
  UART0_PDD_EnableTransmitter(UART0_BASE_PTR, PDD_ENABLE); /* Enable transmitter. */
    4bf0:	4b06      	ldr	r3, [pc, #24]	; (4c0c <ASerialLdd1_TurnTxOn+0x24>)
    4bf2:	4a06      	ldr	r2, [pc, #24]	; (4c0c <ASerialLdd1_TurnTxOn+0x24>)
    4bf4:	78d2      	ldrb	r2, [r2, #3]
    4bf6:	b2d2      	uxtb	r2, r2
    4bf8:	b2d2      	uxtb	r2, r2
    4bfa:	2108      	movs	r1, #8
    4bfc:	430a      	orrs	r2, r1
    4bfe:	b2d2      	uxtb	r2, r2
    4c00:	b2d2      	uxtb	r2, r2
    4c02:	70da      	strb	r2, [r3, #3]
}
    4c04:	46bd      	mov	sp, r7
    4c06:	b002      	add	sp, #8
    4c08:	bd80      	pop	{r7, pc}
    4c0a:	46c0      	nop			; (mov r8, r8)
    4c0c:	4006a000 	.word	0x4006a000

00004c10 <ASerialLdd1_TurnRxOn>:
**         DeviceDataPtr   - Device data structure
**                           pointer returned by [Init] method.
*/
/* ===================================================================*/
void ASerialLdd1_TurnRxOn(LDD_TDeviceData *DeviceDataPtr)
{
    4c10:	b580      	push	{r7, lr}
    4c12:	b082      	sub	sp, #8
    4c14:	af00      	add	r7, sp, #0
    4c16:	6078      	str	r0, [r7, #4]
  (void)DeviceDataPtr;                 /* DeviceData structure is not needed, suppress not used argument warning */
  UART0_PDD_EnableReceiver(UART0_BASE_PTR, PDD_ENABLE); /* Enable receiver. */
    4c18:	4b06      	ldr	r3, [pc, #24]	; (4c34 <ASerialLdd1_TurnRxOn+0x24>)
    4c1a:	4a06      	ldr	r2, [pc, #24]	; (4c34 <ASerialLdd1_TurnRxOn+0x24>)
    4c1c:	78d2      	ldrb	r2, [r2, #3]
    4c1e:	b2d2      	uxtb	r2, r2
    4c20:	b2d2      	uxtb	r2, r2
    4c22:	2104      	movs	r1, #4
    4c24:	430a      	orrs	r2, r1
    4c26:	b2d2      	uxtb	r2, r2
    4c28:	b2d2      	uxtb	r2, r2
    4c2a:	70da      	strb	r2, [r3, #3]
}
    4c2c:	46bd      	mov	sp, r7
    4c2e:	b002      	add	sp, #8
    4c30:	bd80      	pop	{r7, pc}
    4c32:	46c0      	nop			; (mov r8, r8)
    4c34:	4006a000 	.word	0x4006a000

00004c38 <InterruptRx>:
**         peripheral(s) and eventually invokes the bean's event(s).
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
static void InterruptRx(ASerialLdd1_TDeviceDataPtr DeviceDataPrv)
{
    4c38:	b590      	push	{r4, r7, lr}
    4c3a:	b083      	sub	sp, #12
    4c3c:	af00      	add	r7, sp, #0
    4c3e:	6078      	str	r0, [r7, #4]
  register uint16_t Data;              /* Temporary variable for data */

  Data = (uint16_t)UART0_PDD_GetChar8(UART0_BASE_PTR); /* Read an 8-bit character from the receiver */
    4c40:	4b12      	ldr	r3, [pc, #72]	; (4c8c <InterruptRx+0x54>)
    4c42:	79db      	ldrb	r3, [r3, #7]
    4c44:	b2db      	uxtb	r3, r3
    4c46:	1c1c      	adds	r4, r3, #0
  if (DeviceDataPrv->InpDataNumReq != 0x00U) { /* Is the receive block operation pending? */
    4c48:	687b      	ldr	r3, [r7, #4]
    4c4a:	8a1b      	ldrh	r3, [r3, #16]
    4c4c:	2b00      	cmp	r3, #0
    4c4e:	d01a      	beq.n	4c86 <InterruptRx+0x4e>
    *(DeviceDataPrv->InpDataPtr++) = (uint8_t)Data; /* Put an 8-bit character to the receive buffer */
    4c50:	687b      	ldr	r3, [r7, #4]
    4c52:	68db      	ldr	r3, [r3, #12]
    4c54:	b2e2      	uxtb	r2, r4
    4c56:	701a      	strb	r2, [r3, #0]
    4c58:	1c5a      	adds	r2, r3, #1
    4c5a:	687b      	ldr	r3, [r7, #4]
    4c5c:	60da      	str	r2, [r3, #12]
    DeviceDataPrv->InpRecvDataNum++;   /* Increment received char. counter */
    4c5e:	687b      	ldr	r3, [r7, #4]
    4c60:	891b      	ldrh	r3, [r3, #8]
    4c62:	3301      	adds	r3, #1
    4c64:	b29a      	uxth	r2, r3
    4c66:	687b      	ldr	r3, [r7, #4]
    4c68:	811a      	strh	r2, [r3, #8]
    if (DeviceDataPrv->InpRecvDataNum == DeviceDataPrv->InpDataNumReq) { /* Is the requested number of characters received? */
    4c6a:	687b      	ldr	r3, [r7, #4]
    4c6c:	891a      	ldrh	r2, [r3, #8]
    4c6e:	687b      	ldr	r3, [r7, #4]
    4c70:	8a1b      	ldrh	r3, [r3, #16]
    4c72:	429a      	cmp	r2, r3
    4c74:	d107      	bne.n	4c86 <InterruptRx+0x4e>
      DeviceDataPrv->InpDataNumReq = 0x00U; /* If yes then clear number of requested characters to be received. */
    4c76:	687b      	ldr	r3, [r7, #4]
    4c78:	2200      	movs	r2, #0
    4c7a:	821a      	strh	r2, [r3, #16]
      ASerialLdd1_OnBlockReceived(DeviceDataPrv->UserDataPtr);
    4c7c:	687b      	ldr	r3, [r7, #4]
    4c7e:	69db      	ldr	r3, [r3, #28]
    4c80:	1c18      	adds	r0, r3, #0
    4c82:	f000 fabb 	bl	51fc <ASerialLdd1_OnBlockReceived>
    }
  }
}
    4c86:	46bd      	mov	sp, r7
    4c88:	b003      	add	sp, #12
    4c8a:	bd90      	pop	{r4, r7, pc}
    4c8c:	4006a000 	.word	0x4006a000

00004c90 <InterruptTx>:
**         peripheral(s) and eventually invokes the bean's event(s).
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
static void InterruptTx(ASerialLdd1_TDeviceDataPtr DeviceDataPrv)
{
    4c90:	b580      	push	{r7, lr}
    4c92:	b082      	sub	sp, #8
    4c94:	af00      	add	r7, sp, #0
    4c96:	6078      	str	r0, [r7, #4]

  if (DeviceDataPrv->OutSentDataNum < DeviceDataPrv->OutDataNumReq) { /* Is number of sent characters less than the number of requested incoming characters? */
    4c98:	687b      	ldr	r3, [r7, #4]
    4c9a:	8a5a      	ldrh	r2, [r3, #18]
    4c9c:	687b      	ldr	r3, [r7, #4]
    4c9e:	8b1b      	ldrh	r3, [r3, #24]
    4ca0:	429a      	cmp	r2, r3
    4ca2:	d21c      	bcs.n	4cde <InterruptTx+0x4e>
    UART0_PDD_PutChar8(UART0_BASE_PTR, *(DeviceDataPrv->OutDataPtr++)); /* Put a 8-bit character to the transmit register */
    4ca4:	4a20      	ldr	r2, [pc, #128]	; (4d28 <InterruptTx+0x98>)
    4ca6:	687b      	ldr	r3, [r7, #4]
    4ca8:	695b      	ldr	r3, [r3, #20]
    4caa:	7819      	ldrb	r1, [r3, #0]
    4cac:	71d1      	strb	r1, [r2, #7]
    4cae:	1c5a      	adds	r2, r3, #1
    4cb0:	687b      	ldr	r3, [r7, #4]
    4cb2:	615a      	str	r2, [r3, #20]
    DeviceDataPrv->OutSentDataNum++;   /* Increment the counter of sent characters. */
    4cb4:	687b      	ldr	r3, [r7, #4]
    4cb6:	8a5b      	ldrh	r3, [r3, #18]
    4cb8:	3301      	adds	r3, #1
    4cba:	b29a      	uxth	r2, r3
    4cbc:	687b      	ldr	r3, [r7, #4]
    4cbe:	825a      	strh	r2, [r3, #18]
    if (DeviceDataPrv->OutSentDataNum == DeviceDataPrv->OutDataNumReq) {
    4cc0:	687b      	ldr	r3, [r7, #4]
    4cc2:	8a5a      	ldrh	r2, [r3, #18]
    4cc4:	687b      	ldr	r3, [r7, #4]
    4cc6:	8b1b      	ldrh	r3, [r3, #24]
    4cc8:	429a      	cmp	r2, r3
    4cca:	d129      	bne.n	4d20 <InterruptTx+0x90>
      DeviceDataPrv->OutDataNumReq = 0x00U; /* Clear the counter of characters to be send by SendBlock() */
    4ccc:	687b      	ldr	r3, [r7, #4]
    4cce:	2200      	movs	r2, #0
    4cd0:	831a      	strh	r2, [r3, #24]
      ASerialLdd1_OnBlockSent(DeviceDataPrv->UserDataPtr);
    4cd2:	687b      	ldr	r3, [r7, #4]
    4cd4:	69db      	ldr	r3, [r3, #28]
    4cd6:	1c18      	adds	r0, r3, #0
    4cd8:	f000 fad0 	bl	527c <ASerialLdd1_OnBlockSent>
    4cdc:	e020      	b.n	4d20 <InterruptTx+0x90>
    }
  } else {
    UART0_PDD_DisableInterrupt(UART0_BASE_PTR, UART0_PDD_INTERRUPT_TRANSMITTER); /* Disable TX interrupt */
    4cde:	4b12      	ldr	r3, [pc, #72]	; (4d28 <InterruptTx+0x98>)
    4ce0:	4a11      	ldr	r2, [pc, #68]	; (4d28 <InterruptTx+0x98>)
    4ce2:	78d2      	ldrb	r2, [r2, #3]
    4ce4:	b2d1      	uxtb	r1, r2
    4ce6:	227f      	movs	r2, #127	; 0x7f
    4ce8:	400a      	ands	r2, r1
    4cea:	b2d2      	uxtb	r2, r2
    4cec:	70da      	strb	r2, [r3, #3]
    4cee:	4b0e      	ldr	r3, [pc, #56]	; (4d28 <InterruptTx+0x98>)
    4cf0:	4a0d      	ldr	r2, [pc, #52]	; (4d28 <InterruptTx+0x98>)
    4cf2:	7992      	ldrb	r2, [r2, #6]
    4cf4:	b2d2      	uxtb	r2, r2
    4cf6:	719a      	strb	r2, [r3, #6]
    UART0_PDD_EnableInterrupt(UART0_BASE_PTR, UART0_PDD_INTERRUPT_TRANSMITTER_COMPLETE); /* Enable TX complete interrupt */
    4cf8:	4b0b      	ldr	r3, [pc, #44]	; (4d28 <InterruptTx+0x98>)
    4cfa:	4a0b      	ldr	r2, [pc, #44]	; (4d28 <InterruptTx+0x98>)
    4cfc:	78d2      	ldrb	r2, [r2, #3]
    4cfe:	b2d2      	uxtb	r2, r2
    4d00:	2140      	movs	r1, #64	; 0x40
    4d02:	430a      	orrs	r2, r1
    4d04:	b2d2      	uxtb	r2, r2
    4d06:	70da      	strb	r2, [r3, #3]
    4d08:	4b07      	ldr	r3, [pc, #28]	; (4d28 <InterruptTx+0x98>)
    4d0a:	4a07      	ldr	r2, [pc, #28]	; (4d28 <InterruptTx+0x98>)
    4d0c:	7992      	ldrb	r2, [r2, #6]
    4d0e:	b2d2      	uxtb	r2, r2
    4d10:	719a      	strb	r2, [r3, #6]
    DeviceDataPrv->SerFlag &= (uint16_t)(~(uint16_t)ENABLED_TX_INT); /* Clear the flag ENABLED_TX_INT */
    4d12:	687b      	ldr	r3, [r7, #4]
    4d14:	881b      	ldrh	r3, [r3, #0]
    4d16:	2201      	movs	r2, #1
    4d18:	4393      	bics	r3, r2
    4d1a:	b29a      	uxth	r2, r3
    4d1c:	687b      	ldr	r3, [r7, #4]
    4d1e:	801a      	strh	r2, [r3, #0]
  }
}
    4d20:	46bd      	mov	sp, r7
    4d22:	b002      	add	sp, #8
    4d24:	bd80      	pop	{r7, pc}
    4d26:	46c0      	nop			; (mov r8, r8)
    4d28:	4006a000 	.word	0x4006a000

00004d2c <ASerialLdd1_Interrupt>:
**         interrupt. Calls InterruptTX/InterruptRX methods.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(ASerialLdd1_Interrupt)
{
    4d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d2e:	4647      	mov	r7, r8
    4d30:	b480      	push	{r7}
    4d32:	b082      	sub	sp, #8
    4d34:	af00      	add	r7, sp, #0
  /* {Default RTOS Adapter} ISR parameter is passed through the global variable */
  ASerialLdd1_TDeviceDataPtr DeviceDataPrv = INT_UART0__DEFAULT_RTOS_ISRPARAM;
    4d36:	4b42      	ldr	r3, [pc, #264]	; (4e40 <ASerialLdd1_Interrupt+0x114>)
    4d38:	681b      	ldr	r3, [r3, #0]
    4d3a:	607b      	str	r3, [r7, #4]
  register uint32_t StatReg = UART0_PDD_ReadInterruptStatusReg(UART0_BASE_PTR); /* Read status register */
    4d3c:	4b41      	ldr	r3, [pc, #260]	; (4e44 <ASerialLdd1_Interrupt+0x118>)
    4d3e:	791b      	ldrb	r3, [r3, #4]
    4d40:	b2db      	uxtb	r3, r3
    4d42:	1c1c      	adds	r4, r3, #0
  register uint16_t OnErrorFlags = 0U; /* Temporary variable for flags */
    4d44:	2500      	movs	r5, #0
  register uint8_t  OnBreakFlag = 0U;  /* Temporary variable flag for OnBreak event */
    4d46:	2600      	movs	r6, #0
  register uint16_t Data;              /* Temporary variable for data */

  if (StatReg & (UART0_S1_NF_MASK | UART0_S1_OR_MASK | UART0_S1_FE_MASK | UART0_S1_PF_MASK)) { /* Is any error flag set? */
    4d48:	230f      	movs	r3, #15
    4d4a:	4023      	ands	r3, r4
    4d4c:	d043      	beq.n	4dd6 <ASerialLdd1_Interrupt+0xaa>
    UART0_PDD_ClearInterruptFlags(UART0_BASE_PTR, (UART0_S1_NF_MASK | UART0_S1_OR_MASK | UART0_S1_FE_MASK | UART0_S1_PF_MASK));
    4d4e:	4b3d      	ldr	r3, [pc, #244]	; (4e44 <ASerialLdd1_Interrupt+0x118>)
    4d50:	220f      	movs	r2, #15
    4d52:	711a      	strb	r2, [r3, #4]
    Data = (uint16_t)UART0_PDD_GetChar8(UART0_BASE_PTR); /* Read an 8-bit character from receiver */
    4d54:	4b3b      	ldr	r3, [pc, #236]	; (4e44 <ASerialLdd1_Interrupt+0x118>)
    4d56:	79db      	ldrb	r3, [r3, #7]
    4d58:	b2db      	uxtb	r3, r3
    4d5a:	4698      	mov	r8, r3
    if ((StatReg & UART0_S1_FE_MASK) != 0U) { /* Is the framing error detected? */
    4d5c:	2302      	movs	r3, #2
    4d5e:	4023      	ands	r3, r4
    4d60:	d012      	beq.n	4d88 <ASerialLdd1_Interrupt+0x5c>
      if (((StatReg & UART0_S1_RDRF_MASK) != 0U) && (Data == 0U)) { /* Is the zero character in the receiver? */
    4d62:	2320      	movs	r3, #32
    4d64:	4023      	ands	r3, r4
    4d66:	d00c      	beq.n	4d82 <ASerialLdd1_Interrupt+0x56>
    4d68:	4643      	mov	r3, r8
    4d6a:	2b00      	cmp	r3, #0
    4d6c:	d109      	bne.n	4d82 <ASerialLdd1_Interrupt+0x56>
        OnBreakFlag++;
    4d6e:	1c73      	adds	r3, r6, #1
    4d70:	b2de      	uxtb	r6, r3
        DeviceDataPrv->SerFlag |= BREAK_DETECTED; /* If yes then set the flag */
    4d72:	687b      	ldr	r3, [r7, #4]
    4d74:	881b      	ldrh	r3, [r3, #0]
    4d76:	2202      	movs	r2, #2
    4d78:	4313      	orrs	r3, r2
    4d7a:	b29a      	uxth	r2, r3
    4d7c:	687b      	ldr	r3, [r7, #4]
    4d7e:	801a      	strh	r2, [r3, #0]
    4d80:	e002      	b.n	4d88 <ASerialLdd1_Interrupt+0x5c>
      } else {
        OnErrorFlags |= LDD_SERIAL_FRAMING_ERROR; /* If yes then set the flag */
    4d82:	2304      	movs	r3, #4
    4d84:	432b      	orrs	r3, r5
    4d86:	b29d      	uxth	r5, r3
      }
    }
    if ((StatReg & UART0_S1_OR_MASK) != 0U) { /* Is the overrun error flag set? */
    4d88:	2308      	movs	r3, #8
    4d8a:	4023      	ands	r3, r4
    4d8c:	d002      	beq.n	4d94 <ASerialLdd1_Interrupt+0x68>
      OnErrorFlags |= LDD_SERIAL_RX_OVERRUN; /* If yes then set the flag */
    4d8e:	2301      	movs	r3, #1
    4d90:	432b      	orrs	r3, r5
    4d92:	b29d      	uxth	r5, r3
    }
    if ((StatReg & UART0_S1_PF_MASK) != 0U) { /* Is the parity error flag set? */
    4d94:	2301      	movs	r3, #1
    4d96:	4023      	ands	r3, r4
    4d98:	d002      	beq.n	4da0 <ASerialLdd1_Interrupt+0x74>
      OnErrorFlags |= LDD_SERIAL_PARITY_ERROR; /* If yes then set the flag */
    4d9a:	2302      	movs	r3, #2
    4d9c:	432b      	orrs	r3, r5
    4d9e:	b29d      	uxth	r5, r3
    }
    if ((StatReg & UART0_S1_NF_MASK) != 0U) { /* Is the noise error flag set? */
    4da0:	2304      	movs	r3, #4
    4da2:	4023      	ands	r3, r4
    4da4:	d002      	beq.n	4dac <ASerialLdd1_Interrupt+0x80>
      OnErrorFlags |= LDD_SERIAL_NOISE_ERROR; /* If yes then set the flag */
    4da6:	2308      	movs	r3, #8
    4da8:	432b      	orrs	r3, r5
    4daa:	b29d      	uxth	r5, r3
    }
    DeviceDataPrv->ErrFlag |= OnErrorFlags; /* Copy flags status to ErrFlag status variable */
    4dac:	687b      	ldr	r3, [r7, #4]
    4dae:	685a      	ldr	r2, [r3, #4]
    4db0:	1c2b      	adds	r3, r5, #0
    4db2:	431a      	orrs	r2, r3
    4db4:	687b      	ldr	r3, [r7, #4]
    4db6:	605a      	str	r2, [r3, #4]
    StatReg &= (uint32_t)(~(uint32_t)UART0_S1_RDRF_MASK); /* Clear the receive data flag to discard the errorneous data */
    4db8:	2320      	movs	r3, #32
    4dba:	439c      	bics	r4, r3
    if (OnBreakFlag != 0U) {
    4dbc:	2e00      	cmp	r6, #0
    4dbe:	d005      	beq.n	4dcc <ASerialLdd1_Interrupt+0xa0>
      ASerialLdd1_OnBreak(DeviceDataPrv->UserDataPtr); /* If yes then invoke user event */
    4dc0:	687b      	ldr	r3, [r7, #4]
    4dc2:	69db      	ldr	r3, [r3, #28]
    4dc4:	1c18      	adds	r0, r3, #0
    4dc6:	f000 faef 	bl	53a8 <ASerialLdd1_OnBreak>
    4dca:	e004      	b.n	4dd6 <ASerialLdd1_Interrupt+0xaa>
    } else {
      ASerialLdd1_OnError(DeviceDataPrv->UserDataPtr); /* Invoke user event */
    4dcc:	687b      	ldr	r3, [r7, #4]
    4dce:	69db      	ldr	r3, [r3, #28]
    4dd0:	1c18      	adds	r0, r3, #0
    4dd2:	f000 fa97 	bl	5304 <ASerialLdd1_OnError>
    }
  }
  if (StatReg & UART0_S1_RDRF_MASK) {  /* Is the receiver's interrupt flag set? */
    4dd6:	2320      	movs	r3, #32
    4dd8:	4023      	ands	r3, r4
    4dda:	d003      	beq.n	4de4 <ASerialLdd1_Interrupt+0xb8>
    InterruptRx(DeviceDataPrv);        /* If yes, then invoke the internal service routine. This routine is inlined. */
    4ddc:	687b      	ldr	r3, [r7, #4]
    4dde:	1c18      	adds	r0, r3, #0
    4de0:	f7ff ff2a 	bl	4c38 <InterruptRx>
  }
  if (DeviceDataPrv->SerFlag & ENABLED_TX_INT) { /* Is the transmitter interrupt enabled? */
    4de4:	687b      	ldr	r3, [r7, #4]
    4de6:	881b      	ldrh	r3, [r3, #0]
    4de8:	1c1a      	adds	r2, r3, #0
    4dea:	2301      	movs	r3, #1
    4dec:	4013      	ands	r3, r2
    4dee:	d006      	beq.n	4dfe <ASerialLdd1_Interrupt+0xd2>
    if (StatReg & UART0_S1_TDRE_MASK) { /* Is the transmitter empty? */
    4df0:	2380      	movs	r3, #128	; 0x80
    4df2:	4023      	ands	r3, r4
    4df4:	d003      	beq.n	4dfe <ASerialLdd1_Interrupt+0xd2>
      InterruptTx(DeviceDataPrv);      /* If yes, then invoke the internal service routine. This routine is inlined. */
    4df6:	687b      	ldr	r3, [r7, #4]
    4df8:	1c18      	adds	r0, r3, #0
    4dfa:	f7ff ff49 	bl	4c90 <InterruptTx>
    }
  }
  if ((UART0_PDD_GetTxCompleteInterruptMask(UART0_BASE_PTR) != 0U)  && (StatReg & UART0_S1_TC_MASK)) { /* Is a transmission completed? */
    4dfe:	4b11      	ldr	r3, [pc, #68]	; (4e44 <ASerialLdd1_Interrupt+0x118>)
    4e00:	78db      	ldrb	r3, [r3, #3]
    4e02:	b2db      	uxtb	r3, r3
    4e04:	1c1a      	adds	r2, r3, #0
    4e06:	2340      	movs	r3, #64	; 0x40
    4e08:	4013      	ands	r3, r2
    4e0a:	d014      	beq.n	4e36 <ASerialLdd1_Interrupt+0x10a>
    4e0c:	2340      	movs	r3, #64	; 0x40
    4e0e:	4023      	ands	r3, r4
    4e10:	d011      	beq.n	4e36 <ASerialLdd1_Interrupt+0x10a>
    UART0_PDD_DisableInterrupt(UART0_BASE_PTR, UART0_PDD_INTERRUPT_TRANSMITTER_COMPLETE); /* If yes then disable TX complete interrupt */
    4e12:	4b0c      	ldr	r3, [pc, #48]	; (4e44 <ASerialLdd1_Interrupt+0x118>)
    4e14:	4a0b      	ldr	r2, [pc, #44]	; (4e44 <ASerialLdd1_Interrupt+0x118>)
    4e16:	78d2      	ldrb	r2, [r2, #3]
    4e18:	b2d2      	uxtb	r2, r2
    4e1a:	2140      	movs	r1, #64	; 0x40
    4e1c:	438a      	bics	r2, r1
    4e1e:	b2d2      	uxtb	r2, r2
    4e20:	70da      	strb	r2, [r3, #3]
    4e22:	4b08      	ldr	r3, [pc, #32]	; (4e44 <ASerialLdd1_Interrupt+0x118>)
    4e24:	4a07      	ldr	r2, [pc, #28]	; (4e44 <ASerialLdd1_Interrupt+0x118>)
    4e26:	7992      	ldrb	r2, [r2, #6]
    4e28:	b2d2      	uxtb	r2, r2
    4e2a:	719a      	strb	r2, [r3, #6]
    ASerialLdd1_OnTxComplete(DeviceDataPrv->UserDataPtr); /* If yes then invoke user event */
    4e2c:	687b      	ldr	r3, [r7, #4]
    4e2e:	69db      	ldr	r3, [r3, #28]
    4e30:	1c18      	adds	r0, r3, #0
    4e32:	f000 faaf 	bl	5394 <ASerialLdd1_OnTxComplete>
  }
}
    4e36:	46bd      	mov	sp, r7
    4e38:	b002      	add	sp, #8
    4e3a:	bc04      	pop	{r2}
    4e3c:	4690      	mov	r8, r2
    4e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e40:	20000110 	.word	0x20000110
    4e44:	4006a000 	.word	0x4006a000

00004e48 <ASerialLdd1_GetError>:
**                           the active clock configuration
**                           ERR_DISABLED - Component is disabled
*/
/* ===================================================================*/
LDD_TError ASerialLdd1_GetError(LDD_TDeviceData *DeviceDataPtr, LDD_SERIAL_TError *ErrorPtr)
{
    4e48:	b580      	push	{r7, lr}
    4e4a:	b084      	sub	sp, #16
    4e4c:	af00      	add	r7, sp, #0
    4e4e:	6078      	str	r0, [r7, #4]
    4e50:	6039      	str	r1, [r7, #0]
  ASerialLdd1_TDeviceDataPtr DeviceDataPrv = (ASerialLdd1_TDeviceDataPtr)DeviceDataPtr;
    4e52:	687b      	ldr	r3, [r7, #4]
    4e54:	60fb      	str	r3, [r7, #12]

  if (!DeviceDataPrv->EnUser) {        /* Is the device disabled by user? */
    4e56:	68fb      	ldr	r3, [r7, #12]
    4e58:	789b      	ldrb	r3, [r3, #2]
    4e5a:	2b00      	cmp	r3, #0
    4e5c:	d101      	bne.n	4e62 <ASerialLdd1_GetError+0x1a>
    return ERR_DISABLED;               /* If yes then error */
    4e5e:	2307      	movs	r3, #7
    4e60:	e02a      	b.n	4eb8 <ASerialLdd1_GetError+0x70>
  }
  /* {Default RTOS Adapter} Critical section begin, general PE function is used */
  EnterCritical();
    4e62:	1c3b      	adds	r3, r7, #0
    4e64:	330b      	adds	r3, #11
    4e66:	f3ef 8010 	mrs	r0, PRIMASK
    4e6a:	b672      	cpsid	i
    4e6c:	7018      	strb	r0, [r3, #0]
    4e6e:	4b14      	ldr	r3, [pc, #80]	; (4ec0 <ASerialLdd1_GetError+0x78>)
    4e70:	781b      	ldrb	r3, [r3, #0]
    4e72:	b2db      	uxtb	r3, r3
    4e74:	3301      	adds	r3, #1
    4e76:	b2db      	uxtb	r3, r3
    4e78:	4a11      	ldr	r2, [pc, #68]	; (4ec0 <ASerialLdd1_GetError+0x78>)
    4e7a:	1c19      	adds	r1, r3, #0
    4e7c:	7011      	strb	r1, [r2, #0]
    4e7e:	2b01      	cmp	r3, #1
    4e80:	d104      	bne.n	4e8c <ASerialLdd1_GetError+0x44>
    4e82:	1c3b      	adds	r3, r7, #0
    4e84:	330b      	adds	r3, #11
    4e86:	781a      	ldrb	r2, [r3, #0]
    4e88:	4b0e      	ldr	r3, [pc, #56]	; (4ec4 <ASerialLdd1_GetError+0x7c>)
    4e8a:	701a      	strb	r2, [r3, #0]
  *ErrorPtr = DeviceDataPrv->ErrFlag;
    4e8c:	68fb      	ldr	r3, [r7, #12]
    4e8e:	685a      	ldr	r2, [r3, #4]
    4e90:	683b      	ldr	r3, [r7, #0]
    4e92:	601a      	str	r2, [r3, #0]
  DeviceDataPrv->ErrFlag = 0x00U;      /* Reset error flags */
    4e94:	68fb      	ldr	r3, [r7, #12]
    4e96:	2200      	movs	r2, #0
    4e98:	605a      	str	r2, [r3, #4]
  /* {Default RTOS Adapter} Critical section end, general PE function is used */
  ExitCritical();
    4e9a:	4b09      	ldr	r3, [pc, #36]	; (4ec0 <ASerialLdd1_GetError+0x78>)
    4e9c:	781b      	ldrb	r3, [r3, #0]
    4e9e:	b2db      	uxtb	r3, r3
    4ea0:	3b01      	subs	r3, #1
    4ea2:	b2db      	uxtb	r3, r3
    4ea4:	4a06      	ldr	r2, [pc, #24]	; (4ec0 <ASerialLdd1_GetError+0x78>)
    4ea6:	1c19      	adds	r1, r3, #0
    4ea8:	7011      	strb	r1, [r2, #0]
    4eaa:	2b00      	cmp	r3, #0
    4eac:	d103      	bne.n	4eb6 <ASerialLdd1_GetError+0x6e>
    4eae:	4b05      	ldr	r3, [pc, #20]	; (4ec4 <ASerialLdd1_GetError+0x7c>)
    4eb0:	7818      	ldrb	r0, [r3, #0]
    4eb2:	f380 8810 	msr	PRIMASK, r0
  return ERR_OK;                       /* OK */
    4eb6:	2300      	movs	r3, #0
}
    4eb8:	1c18      	adds	r0, r3, #0
    4eba:	46bd      	mov	sp, r7
    4ebc:	b004      	add	sp, #16
    4ebe:	bd80      	pop	{r7, pc}
    4ec0:	200000b4 	.word	0x200000b4
    4ec4:	20000ad8 	.word	0x20000ad8

00004ec8 <HWEnDi>:
**         Disable methods and several internal methods.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
static void HWEnDi(void)
{
    4ec8:	b580      	push	{r7, lr}
    4eca:	af00      	add	r7, sp, #0
  if (EnUser) {                        /* Enable device? */
    4ecc:	4b17      	ldr	r3, [pc, #92]	; (4f2c <HWEnDi+0x64>)
    4ece:	781b      	ldrb	r3, [r3, #0]
    4ed0:	2b00      	cmp	r3, #0
    4ed2:	d024      	beq.n	4f1e <HWEnDi+0x56>
    (void)ASerialLdd1_Enable(ASerialLdd1_DeviceDataPtr); /* Enable device */
    4ed4:	4b16      	ldr	r3, [pc, #88]	; (4f30 <HWEnDi+0x68>)
    4ed6:	681b      	ldr	r3, [r3, #0]
    4ed8:	1c18      	adds	r0, r3, #0
    4eda:	f7ff fd5f 	bl	499c <ASerialLdd1_Enable>
    (void)ASerialLdd1_ReceiveBlock(ASerialLdd1_DeviceDataPtr, &BufferRead, 1U); /* Receive one data byte */
    4ede:	4b14      	ldr	r3, [pc, #80]	; (4f30 <HWEnDi+0x68>)
    4ee0:	681a      	ldr	r2, [r3, #0]
    4ee2:	4b14      	ldr	r3, [pc, #80]	; (4f34 <HWEnDi+0x6c>)
    4ee4:	1c10      	adds	r0, r2, #0
    4ee6:	1c19      	adds	r1, r3, #0
    4ee8:	2201      	movs	r2, #1
    4eea:	f7ff fdc3 	bl	4a74 <ASerialLdd1_ReceiveBlock>
    if ((AS1_OutLen) != 0U) {          /* Is number of bytes in the transmit buffer greater then 0? */
    4eee:	4b12      	ldr	r3, [pc, #72]	; (4f38 <HWEnDi+0x70>)
    4ef0:	881b      	ldrh	r3, [r3, #0]
    4ef2:	2b00      	cmp	r3, #0
    4ef4:	d018      	beq.n	4f28 <HWEnDi+0x60>
      SerFlag |= RUNINT_FROM_TX;       /* Set flag "running int from TX"? */
    4ef6:	4b11      	ldr	r3, [pc, #68]	; (4f3c <HWEnDi+0x74>)
    4ef8:	881b      	ldrh	r3, [r3, #0]
    4efa:	2220      	movs	r2, #32
    4efc:	4313      	orrs	r3, r2
    4efe:	b29a      	uxth	r2, r3
    4f00:	4b0e      	ldr	r3, [pc, #56]	; (4f3c <HWEnDi+0x74>)
    4f02:	801a      	strh	r2, [r3, #0]
      (void)ASerialLdd1_SendBlock(ASerialLdd1_DeviceDataPtr, (LDD_TData *)&OutBuffer[OutIndexR], 1U); /* Send one data byte */
    4f04:	4b0a      	ldr	r3, [pc, #40]	; (4f30 <HWEnDi+0x68>)
    4f06:	681a      	ldr	r2, [r3, #0]
    4f08:	4b0d      	ldr	r3, [pc, #52]	; (4f40 <HWEnDi+0x78>)
    4f0a:	881b      	ldrh	r3, [r3, #0]
    4f0c:	1c19      	adds	r1, r3, #0
    4f0e:	4b0d      	ldr	r3, [pc, #52]	; (4f44 <HWEnDi+0x7c>)
    4f10:	18cb      	adds	r3, r1, r3
    4f12:	1c10      	adds	r0, r2, #0
    4f14:	1c19      	adds	r1, r3, #0
    4f16:	2201      	movs	r2, #1
    4f18:	f7ff fdfe 	bl	4b18 <ASerialLdd1_SendBlock>
    4f1c:	e004      	b.n	4f28 <HWEnDi+0x60>
    }
  } else {
    (void)ASerialLdd1_Disable(ASerialLdd1_DeviceDataPtr); /* Disable device */
    4f1e:	4b04      	ldr	r3, [pc, #16]	; (4f30 <HWEnDi+0x68>)
    4f20:	681b      	ldr	r3, [r3, #0]
    4f22:	1c18      	adds	r0, r3, #0
    4f24:	f7ff fd72 	bl	4a0c <ASerialLdd1_Disable>
  }
}
    4f28:	46bd      	mov	sp, r7
    4f2a:	bd80      	pop	{r7, pc}
    4f2c:	20000114 	.word	0x20000114
    4f30:	20000adc 	.word	0x20000adc
    4f34:	200001b8 	.word	0x200001b8
    4f38:	200001ba 	.word	0x200001ba
    4f3c:	20000116 	.word	0x20000116
    4f40:	200001bc 	.word	0x200001bc
    4f44:	200001c0 	.word	0x200001c0

00004f48 <AS1_Enable>:
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/
byte AS1_Enable(void)
{
    4f48:	b580      	push	{r7, lr}
    4f4a:	af00      	add	r7, sp, #0
  if (!EnUser) {                       /* Is the device disabled by user? */
    4f4c:	4b06      	ldr	r3, [pc, #24]	; (4f68 <AS1_Enable+0x20>)
    4f4e:	781b      	ldrb	r3, [r3, #0]
    4f50:	2b00      	cmp	r3, #0
    4f52:	d104      	bne.n	4f5e <AS1_Enable+0x16>
    EnUser = TRUE;                     /* If yes then set the flag "device enabled" */
    4f54:	4b04      	ldr	r3, [pc, #16]	; (4f68 <AS1_Enable+0x20>)
    4f56:	2201      	movs	r2, #1
    4f58:	701a      	strb	r2, [r3, #0]
    HWEnDi();                          /* Enable the device */
    4f5a:	f7ff ffb5 	bl	4ec8 <HWEnDi>
  }
  return ERR_OK;                       /* OK */
    4f5e:	2300      	movs	r3, #0
}
    4f60:	1c18      	adds	r0, r3, #0
    4f62:	46bd      	mov	sp, r7
    4f64:	bd80      	pop	{r7, pc}
    4f66:	46c0      	nop			; (mov r8, r8)
    4f68:	20000114 	.word	0x20000114

00004f6c <AS1_RecvChar>:
**                           <GetError> method can be used for error
**                           specification)
** ===================================================================
*/
byte AS1_RecvChar(AS1_TComData *Chr)
{
    4f6c:	b580      	push	{r7, lr}
    4f6e:	b084      	sub	sp, #16
    4f70:	af00      	add	r7, sp, #0
    4f72:	6078      	str	r0, [r7, #4]
  byte Result = ERR_OK;                /* Return error code */
    4f74:	1c3b      	adds	r3, r7, #0
    4f76:	330f      	adds	r3, #15
    4f78:	2200      	movs	r2, #0
    4f7a:	701a      	strb	r2, [r3, #0]

  if (AS1_InpLen > 0x00U) {            /* Is number of received chars greater than 0? */
    4f7c:	4b2d      	ldr	r3, [pc, #180]	; (5034 <AS1_RecvChar+0xc8>)
    4f7e:	881b      	ldrh	r3, [r3, #0]
    4f80:	2b00      	cmp	r3, #0
    4f82:	d04e      	beq.n	5022 <AS1_RecvChar+0xb6>
    EnterCritical();                   /* Disable global interrupts */
    4f84:	1c3b      	adds	r3, r7, #0
    4f86:	330e      	adds	r3, #14
    4f88:	f3ef 8010 	mrs	r0, PRIMASK
    4f8c:	b672      	cpsid	i
    4f8e:	7018      	strb	r0, [r3, #0]
    4f90:	4b29      	ldr	r3, [pc, #164]	; (5038 <AS1_RecvChar+0xcc>)
    4f92:	781b      	ldrb	r3, [r3, #0]
    4f94:	b2db      	uxtb	r3, r3
    4f96:	3301      	adds	r3, #1
    4f98:	b2db      	uxtb	r3, r3
    4f9a:	4a27      	ldr	r2, [pc, #156]	; (5038 <AS1_RecvChar+0xcc>)
    4f9c:	1c19      	adds	r1, r3, #0
    4f9e:	7011      	strb	r1, [r2, #0]
    4fa0:	2b01      	cmp	r3, #1
    4fa2:	d104      	bne.n	4fae <AS1_RecvChar+0x42>
    4fa4:	1c3b      	adds	r3, r7, #0
    4fa6:	330e      	adds	r3, #14
    4fa8:	781a      	ldrb	r2, [r3, #0]
    4faa:	4b24      	ldr	r3, [pc, #144]	; (503c <AS1_RecvChar+0xd0>)
    4fac:	701a      	strb	r2, [r3, #0]
    AS1_InpLen--;                      /* Decrease number of received chars */
    4fae:	4b21      	ldr	r3, [pc, #132]	; (5034 <AS1_RecvChar+0xc8>)
    4fb0:	881b      	ldrh	r3, [r3, #0]
    4fb2:	3b01      	subs	r3, #1
    4fb4:	b29a      	uxth	r2, r3
    4fb6:	4b1f      	ldr	r3, [pc, #124]	; (5034 <AS1_RecvChar+0xc8>)
    4fb8:	801a      	strh	r2, [r3, #0]
    *Chr = InpBuffer[InpIndexR++];     /* Received char */
    4fba:	4b21      	ldr	r3, [pc, #132]	; (5040 <AS1_RecvChar+0xd4>)
    4fbc:	881b      	ldrh	r3, [r3, #0]
    4fbe:	1c1a      	adds	r2, r3, #0
    4fc0:	4920      	ldr	r1, [pc, #128]	; (5044 <AS1_RecvChar+0xd8>)
    4fc2:	5c89      	ldrb	r1, [r1, r2]
    4fc4:	687a      	ldr	r2, [r7, #4]
    4fc6:	7011      	strb	r1, [r2, #0]
    4fc8:	3301      	adds	r3, #1
    4fca:	b29a      	uxth	r2, r3
    4fcc:	4b1c      	ldr	r3, [pc, #112]	; (5040 <AS1_RecvChar+0xd4>)
    4fce:	801a      	strh	r2, [r3, #0]
    if (InpIndexR >= AS1_INP_BUF_SIZE) { /* Is the index out of the receive buffer? */
    4fd0:	4b1b      	ldr	r3, [pc, #108]	; (5040 <AS1_RecvChar+0xd4>)
    4fd2:	881b      	ldrh	r3, [r3, #0]
    4fd4:	2b95      	cmp	r3, #149	; 0x95
    4fd6:	d902      	bls.n	4fde <AS1_RecvChar+0x72>
      InpIndexR = 0x00U;               /* Set index to the first item into the receive buffer */
    4fd8:	4b19      	ldr	r3, [pc, #100]	; (5040 <AS1_RecvChar+0xd4>)
    4fda:	2200      	movs	r2, #0
    4fdc:	801a      	strh	r2, [r3, #0]
    }
    Result = (byte)((SerFlag & (OVERRUN_ERR|COMMON_ERR|FULL_RX))? ERR_COMMON : ERR_OK);
    4fde:	4b1a      	ldr	r3, [pc, #104]	; (5048 <AS1_RecvChar+0xdc>)
    4fe0:	881b      	ldrh	r3, [r3, #0]
    4fe2:	1c1a      	adds	r2, r3, #0
    4fe4:	4b19      	ldr	r3, [pc, #100]	; (504c <AS1_RecvChar+0xe0>)
    4fe6:	4013      	ands	r3, r2
    4fe8:	d001      	beq.n	4fee <AS1_RecvChar+0x82>
    4fea:	2319      	movs	r3, #25
    4fec:	e000      	b.n	4ff0 <AS1_RecvChar+0x84>
    4fee:	2300      	movs	r3, #0
    4ff0:	1c3a      	adds	r2, r7, #0
    4ff2:	320f      	adds	r2, #15
    4ff4:	7013      	strb	r3, [r2, #0]
    SerFlag &= (word)~(word)(OVERRUN_ERR|COMMON_ERR|FULL_RX|CHAR_IN_RX); /* Clear all errors in the status variable */
    4ff6:	4b14      	ldr	r3, [pc, #80]	; (5048 <AS1_RecvChar+0xdc>)
    4ff8:	881a      	ldrh	r2, [r3, #0]
    4ffa:	4b15      	ldr	r3, [pc, #84]	; (5050 <AS1_RecvChar+0xe4>)
    4ffc:	4013      	ands	r3, r2
    4ffe:	b29a      	uxth	r2, r3
    5000:	4b11      	ldr	r3, [pc, #68]	; (5048 <AS1_RecvChar+0xdc>)
    5002:	801a      	strh	r2, [r3, #0]
    ExitCritical();                    /* Enable global interrupts */
    5004:	4b0c      	ldr	r3, [pc, #48]	; (5038 <AS1_RecvChar+0xcc>)
    5006:	781b      	ldrb	r3, [r3, #0]
    5008:	b2db      	uxtb	r3, r3
    500a:	3b01      	subs	r3, #1
    500c:	b2db      	uxtb	r3, r3
    500e:	4a0a      	ldr	r2, [pc, #40]	; (5038 <AS1_RecvChar+0xcc>)
    5010:	1c19      	adds	r1, r3, #0
    5012:	7011      	strb	r1, [r2, #0]
    5014:	2b00      	cmp	r3, #0
    5016:	d106      	bne.n	5026 <AS1_RecvChar+0xba>
    5018:	4b08      	ldr	r3, [pc, #32]	; (503c <AS1_RecvChar+0xd0>)
    501a:	7818      	ldrb	r0, [r3, #0]
    501c:	f380 8810 	msr	PRIMASK, r0
    5020:	e001      	b.n	5026 <AS1_RecvChar+0xba>
  } else {
    return ERR_RXEMPTY;                /* Receiver is empty */
    5022:	230a      	movs	r3, #10
    5024:	e002      	b.n	502c <AS1_RecvChar+0xc0>
  }
  return Result;                       /* Return error code */
    5026:	1c3b      	adds	r3, r7, #0
    5028:	330f      	adds	r3, #15
    502a:	781b      	ldrb	r3, [r3, #0]
}
    502c:	1c18      	adds	r0, r3, #0
    502e:	46bd      	mov	sp, r7
    5030:	b004      	add	sp, #16
    5032:	bd80      	pop	{r7, pc}
    5034:	20000118 	.word	0x20000118
    5038:	200000b4 	.word	0x200000b4
    503c:	20000ad8 	.word	0x20000ad8
    5040:	2000011a 	.word	0x2000011a
    5044:	20000120 	.word	0x20000120
    5048:	20000116 	.word	0x20000116
    504c:	00000841 	.word	0x00000841
    5050:	fffff7b6 	.word	0xfffff7b6

00005054 <AS1_SendChar>:
**                           the active speed mode
**                           ERR_TXFULL - Transmitter is full
** ===================================================================
*/
byte AS1_SendChar(AS1_TComData Chr)
{
    5054:	b580      	push	{r7, lr}
    5056:	b084      	sub	sp, #16
    5058:	af00      	add	r7, sp, #0
    505a:	1c02      	adds	r2, r0, #0
    505c:	1dfb      	adds	r3, r7, #7
    505e:	701a      	strb	r2, [r3, #0]
  if (AS1_OutLen == AS1_OUT_BUF_SIZE) { /* Is number of chars in buffer is the same as a size of the transmit buffer */
    5060:	4b31      	ldr	r3, [pc, #196]	; (5128 <AS1_SendChar+0xd4>)
    5062:	881b      	ldrh	r3, [r3, #0]
    5064:	2b96      	cmp	r3, #150	; 0x96
    5066:	d101      	bne.n	506c <AS1_SendChar+0x18>
    return ERR_TXFULL;                 /* If yes then error */
    5068:	230b      	movs	r3, #11
    506a:	e058      	b.n	511e <AS1_SendChar+0xca>
  }
  EnterCritical();                     /* Disable global interrupts */
    506c:	1c3b      	adds	r3, r7, #0
    506e:	330f      	adds	r3, #15
    5070:	f3ef 8010 	mrs	r0, PRIMASK
    5074:	b672      	cpsid	i
    5076:	7018      	strb	r0, [r3, #0]
    5078:	4b2c      	ldr	r3, [pc, #176]	; (512c <AS1_SendChar+0xd8>)
    507a:	781b      	ldrb	r3, [r3, #0]
    507c:	b2db      	uxtb	r3, r3
    507e:	3301      	adds	r3, #1
    5080:	b2db      	uxtb	r3, r3
    5082:	4a2a      	ldr	r2, [pc, #168]	; (512c <AS1_SendChar+0xd8>)
    5084:	1c19      	adds	r1, r3, #0
    5086:	7011      	strb	r1, [r2, #0]
    5088:	2b01      	cmp	r3, #1
    508a:	d104      	bne.n	5096 <AS1_SendChar+0x42>
    508c:	1c3b      	adds	r3, r7, #0
    508e:	330f      	adds	r3, #15
    5090:	781a      	ldrb	r2, [r3, #0]
    5092:	4b27      	ldr	r3, [pc, #156]	; (5130 <AS1_SendChar+0xdc>)
    5094:	701a      	strb	r2, [r3, #0]
  AS1_OutLen++;                        /* Increase number of bytes in the transmit buffer */
    5096:	4b24      	ldr	r3, [pc, #144]	; (5128 <AS1_SendChar+0xd4>)
    5098:	881b      	ldrh	r3, [r3, #0]
    509a:	3301      	adds	r3, #1
    509c:	b29a      	uxth	r2, r3
    509e:	4b22      	ldr	r3, [pc, #136]	; (5128 <AS1_SendChar+0xd4>)
    50a0:	801a      	strh	r2, [r3, #0]
  OutBuffer[OutIndexW++] = Chr;        /* Store char to buffer */
    50a2:	4b24      	ldr	r3, [pc, #144]	; (5134 <AS1_SendChar+0xe0>)
    50a4:	881b      	ldrh	r3, [r3, #0]
    50a6:	1c1a      	adds	r2, r3, #0
    50a8:	4923      	ldr	r1, [pc, #140]	; (5138 <AS1_SendChar+0xe4>)
    50aa:	1df8      	adds	r0, r7, #7
    50ac:	7800      	ldrb	r0, [r0, #0]
    50ae:	5488      	strb	r0, [r1, r2]
    50b0:	3301      	adds	r3, #1
    50b2:	b29a      	uxth	r2, r3
    50b4:	4b1f      	ldr	r3, [pc, #124]	; (5134 <AS1_SendChar+0xe0>)
    50b6:	801a      	strh	r2, [r3, #0]
  if (OutIndexW >= AS1_OUT_BUF_SIZE) { /* Is the pointer out of the transmit buffer */
    50b8:	4b1e      	ldr	r3, [pc, #120]	; (5134 <AS1_SendChar+0xe0>)
    50ba:	881b      	ldrh	r3, [r3, #0]
    50bc:	2b95      	cmp	r3, #149	; 0x95
    50be:	d902      	bls.n	50c6 <AS1_SendChar+0x72>
    OutIndexW = 0x00U;                 /* Set index to first item in the transmit buffer */
    50c0:	4b1c      	ldr	r3, [pc, #112]	; (5134 <AS1_SendChar+0xe0>)
    50c2:	2200      	movs	r2, #0
    50c4:	801a      	strh	r2, [r3, #0]
  }
  if ((EnUser) && ((SerFlag & RUNINT_FROM_TX) == 0U)) { /* Is the device enabled by user? */
    50c6:	4b1d      	ldr	r3, [pc, #116]	; (513c <AS1_SendChar+0xe8>)
    50c8:	781b      	ldrb	r3, [r3, #0]
    50ca:	2b00      	cmp	r3, #0
    50cc:	d018      	beq.n	5100 <AS1_SendChar+0xac>
    50ce:	4b1c      	ldr	r3, [pc, #112]	; (5140 <AS1_SendChar+0xec>)
    50d0:	881b      	ldrh	r3, [r3, #0]
    50d2:	1c1a      	adds	r2, r3, #0
    50d4:	2320      	movs	r3, #32
    50d6:	4013      	ands	r3, r2
    50d8:	d112      	bne.n	5100 <AS1_SendChar+0xac>
    SerFlag |= RUNINT_FROM_TX;         /* Set flag "running int from TX"? */
    50da:	4b19      	ldr	r3, [pc, #100]	; (5140 <AS1_SendChar+0xec>)
    50dc:	881b      	ldrh	r3, [r3, #0]
    50de:	2220      	movs	r2, #32
    50e0:	4313      	orrs	r3, r2
    50e2:	b29a      	uxth	r2, r3
    50e4:	4b16      	ldr	r3, [pc, #88]	; (5140 <AS1_SendChar+0xec>)
    50e6:	801a      	strh	r2, [r3, #0]
    (void)ASerialLdd1_SendBlock(ASerialLdd1_DeviceDataPtr, (LDD_TData *)&OutBuffer[OutIndexR], 1U); /* Send one data byte */
    50e8:	4b16      	ldr	r3, [pc, #88]	; (5144 <AS1_SendChar+0xf0>)
    50ea:	681a      	ldr	r2, [r3, #0]
    50ec:	4b16      	ldr	r3, [pc, #88]	; (5148 <AS1_SendChar+0xf4>)
    50ee:	881b      	ldrh	r3, [r3, #0]
    50f0:	1c19      	adds	r1, r3, #0
    50f2:	4b11      	ldr	r3, [pc, #68]	; (5138 <AS1_SendChar+0xe4>)
    50f4:	18cb      	adds	r3, r1, r3
    50f6:	1c10      	adds	r0, r2, #0
    50f8:	1c19      	adds	r1, r3, #0
    50fa:	2201      	movs	r2, #1
    50fc:	f7ff fd0c 	bl	4b18 <ASerialLdd1_SendBlock>
  }
  ExitCritical();                      /* Enable global interrupts */
    5100:	4b0a      	ldr	r3, [pc, #40]	; (512c <AS1_SendChar+0xd8>)
    5102:	781b      	ldrb	r3, [r3, #0]
    5104:	b2db      	uxtb	r3, r3
    5106:	3b01      	subs	r3, #1
    5108:	b2db      	uxtb	r3, r3
    510a:	4a08      	ldr	r2, [pc, #32]	; (512c <AS1_SendChar+0xd8>)
    510c:	1c19      	adds	r1, r3, #0
    510e:	7011      	strb	r1, [r2, #0]
    5110:	2b00      	cmp	r3, #0
    5112:	d103      	bne.n	511c <AS1_SendChar+0xc8>
    5114:	4b06      	ldr	r3, [pc, #24]	; (5130 <AS1_SendChar+0xdc>)
    5116:	7818      	ldrb	r0, [r3, #0]
    5118:	f380 8810 	msr	PRIMASK, r0
  return ERR_OK;                       /* OK */
    511c:	2300      	movs	r3, #0
}
    511e:	1c18      	adds	r0, r3, #0
    5120:	46bd      	mov	sp, r7
    5122:	b004      	add	sp, #16
    5124:	bd80      	pop	{r7, pc}
    5126:	46c0      	nop			; (mov r8, r8)
    5128:	200001ba 	.word	0x200001ba
    512c:	200000b4 	.word	0x200000b4
    5130:	20000ad8 	.word	0x20000ad8
    5134:	200001be 	.word	0x200001be
    5138:	200001c0 	.word	0x200001c0
    513c:	20000114 	.word	0x20000114
    5140:	20000116 	.word	0x20000116
    5144:	20000adc 	.word	0x20000adc
    5148:	200001bc 	.word	0x200001bc

0000514c <AS1_GetCharsInRxBuf>:
**         ---             - The number of characters in the input
**                           buffer.
** ===================================================================
*/
word AS1_GetCharsInRxBuf(void)
{
    514c:	b580      	push	{r7, lr}
    514e:	af00      	add	r7, sp, #0
  return AS1_InpLen;                   /* Return number of chars in receive buffer */
    5150:	4b02      	ldr	r3, [pc, #8]	; (515c <AS1_GetCharsInRxBuf+0x10>)
    5152:	881b      	ldrh	r3, [r3, #0]
}
    5154:	1c18      	adds	r0, r3, #0
    5156:	46bd      	mov	sp, r7
    5158:	bd80      	pop	{r7, pc}
    515a:	46c0      	nop			; (mov r8, r8)
    515c:	20000118 	.word	0x20000118

00005160 <AS1_Init>:
**         application initialization code.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void AS1_Init(void)
{
    5160:	b580      	push	{r7, lr}
    5162:	af00      	add	r7, sp, #0
  SerFlag = 0x00U;                     /* Reset flags */
    5164:	4b10      	ldr	r3, [pc, #64]	; (51a8 <AS1_Init+0x48>)
    5166:	2200      	movs	r2, #0
    5168:	801a      	strh	r2, [r3, #0]
  EnUser = TRUE;                       /* Enable device */
    516a:	4b10      	ldr	r3, [pc, #64]	; (51ac <AS1_Init+0x4c>)
    516c:	2201      	movs	r2, #1
    516e:	701a      	strb	r2, [r3, #0]
  AS1_InpLen = 0x00U;                  /* No char in the receive buffer */
    5170:	4b0f      	ldr	r3, [pc, #60]	; (51b0 <AS1_Init+0x50>)
    5172:	2200      	movs	r2, #0
    5174:	801a      	strh	r2, [r3, #0]
  InpIndexR = 0x00U;                   /* Set index on the first item in the receive buffer */
    5176:	4b0f      	ldr	r3, [pc, #60]	; (51b4 <AS1_Init+0x54>)
    5178:	2200      	movs	r2, #0
    517a:	801a      	strh	r2, [r3, #0]
  InpIndexW = 0x00U;
    517c:	4b0e      	ldr	r3, [pc, #56]	; (51b8 <AS1_Init+0x58>)
    517e:	2200      	movs	r2, #0
    5180:	801a      	strh	r2, [r3, #0]
  AS1_OutLen = 0x00U;                  /* No char in the transmit buffer */
    5182:	4b0e      	ldr	r3, [pc, #56]	; (51bc <AS1_Init+0x5c>)
    5184:	2200      	movs	r2, #0
    5186:	801a      	strh	r2, [r3, #0]
  OutIndexR = 0x00U;                   /* Set index on the first item in the transmit buffer */
    5188:	4b0d      	ldr	r3, [pc, #52]	; (51c0 <AS1_Init+0x60>)
    518a:	2200      	movs	r2, #0
    518c:	801a      	strh	r2, [r3, #0]
  OutIndexW = 0x00U;
    518e:	4b0d      	ldr	r3, [pc, #52]	; (51c4 <AS1_Init+0x64>)
    5190:	2200      	movs	r2, #0
    5192:	801a      	strh	r2, [r3, #0]
  ASerialLdd1_DeviceDataPtr = ASerialLdd1_Init(NULL); /* Calling init method of the inherited component */
    5194:	2000      	movs	r0, #0
    5196:	f7ff fb25 	bl	47e4 <ASerialLdd1_Init>
    519a:	1c02      	adds	r2, r0, #0
    519c:	4b0a      	ldr	r3, [pc, #40]	; (51c8 <AS1_Init+0x68>)
    519e:	601a      	str	r2, [r3, #0]
  HWEnDi();                            /* Enable/disable device according to status flags */
    51a0:	f7ff fe92 	bl	4ec8 <HWEnDi>
}
    51a4:	46bd      	mov	sp, r7
    51a6:	bd80      	pop	{r7, pc}
    51a8:	20000116 	.word	0x20000116
    51ac:	20000114 	.word	0x20000114
    51b0:	20000118 	.word	0x20000118
    51b4:	2000011a 	.word	0x2000011a
    51b8:	2000011c 	.word	0x2000011c
    51bc:	200001ba 	.word	0x200001ba
    51c0:	200001bc 	.word	0x200001bc
    51c4:	200001be 	.word	0x200001be
    51c8:	20000adc 	.word	0x20000adc

000051cc <AS1_TurnRxOn>:
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/
void AS1_TurnRxOn(void)
{
    51cc:	b580      	push	{r7, lr}
    51ce:	af00      	add	r7, sp, #0
  ASerialLdd1_TurnRxOn(ASerialLdd1_DeviceDataPtr);
    51d0:	4b03      	ldr	r3, [pc, #12]	; (51e0 <AS1_TurnRxOn+0x14>)
    51d2:	681b      	ldr	r3, [r3, #0]
    51d4:	1c18      	adds	r0, r3, #0
    51d6:	f7ff fd1b 	bl	4c10 <ASerialLdd1_TurnRxOn>
}
    51da:	46bd      	mov	sp, r7
    51dc:	bd80      	pop	{r7, pc}
    51de:	46c0      	nop			; (mov r8, r8)
    51e0:	20000adc 	.word	0x20000adc

000051e4 <AS1_TurnTxOn>:
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/
void AS1_TurnTxOn(void)
{
    51e4:	b580      	push	{r7, lr}
    51e6:	af00      	add	r7, sp, #0
  ASerialLdd1_TurnTxOn(ASerialLdd1_DeviceDataPtr);
    51e8:	4b03      	ldr	r3, [pc, #12]	; (51f8 <AS1_TurnTxOn+0x14>)
    51ea:	681b      	ldr	r3, [r3, #0]
    51ec:	1c18      	adds	r0, r3, #0
    51ee:	f7ff fcfb 	bl	4be8 <ASerialLdd1_TurnTxOn>
}
    51f2:	46bd      	mov	sp, r7
    51f4:	bd80      	pop	{r7, pc}
    51f6:	46c0      	nop			; (mov r8, r8)
    51f8:	20000adc 	.word	0x20000adc

000051fc <ASerialLdd1_OnBlockReceived>:
**         moved to the input buffer.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void ASerialLdd1_OnBlockReceived(LDD_TUserData *UserDataPtr)
{
    51fc:	b580      	push	{r7, lr}
    51fe:	b082      	sub	sp, #8
    5200:	af00      	add	r7, sp, #0
    5202:	6078      	str	r0, [r7, #4]

  (void)UserDataPtr;                   /* Parameter is not used, suppress unused argument warning */
  if (AS1_InpLen < AS1_INP_BUF_SIZE) { /* Is number of bytes in the receive buffer lower than size of buffer? */
    5204:	4b17      	ldr	r3, [pc, #92]	; (5264 <ASerialLdd1_OnBlockReceived+0x68>)
    5206:	881b      	ldrh	r3, [r3, #0]
    5208:	2b95      	cmp	r3, #149	; 0x95
    520a:	d818      	bhi.n	523e <ASerialLdd1_OnBlockReceived+0x42>
    AS1_InpLen++;                      /* Increase number of chars in the receive buffer */
    520c:	4b15      	ldr	r3, [pc, #84]	; (5264 <ASerialLdd1_OnBlockReceived+0x68>)
    520e:	881b      	ldrh	r3, [r3, #0]
    5210:	3301      	adds	r3, #1
    5212:	b29a      	uxth	r2, r3
    5214:	4b13      	ldr	r3, [pc, #76]	; (5264 <ASerialLdd1_OnBlockReceived+0x68>)
    5216:	801a      	strh	r2, [r3, #0]
    InpBuffer[InpIndexW++] = (AS1_TComData)BufferRead; /* Save received char to the receive buffer */
    5218:	4b13      	ldr	r3, [pc, #76]	; (5268 <ASerialLdd1_OnBlockReceived+0x6c>)
    521a:	881b      	ldrh	r3, [r3, #0]
    521c:	1c1a      	adds	r2, r3, #0
    521e:	4913      	ldr	r1, [pc, #76]	; (526c <ASerialLdd1_OnBlockReceived+0x70>)
    5220:	7808      	ldrb	r0, [r1, #0]
    5222:	4913      	ldr	r1, [pc, #76]	; (5270 <ASerialLdd1_OnBlockReceived+0x74>)
    5224:	5488      	strb	r0, [r1, r2]
    5226:	3301      	adds	r3, #1
    5228:	b29a      	uxth	r2, r3
    522a:	4b0f      	ldr	r3, [pc, #60]	; (5268 <ASerialLdd1_OnBlockReceived+0x6c>)
    522c:	801a      	strh	r2, [r3, #0]
    if (InpIndexW >= AS1_INP_BUF_SIZE) { /* Is the index out of the receive buffer? */
    522e:	4b0e      	ldr	r3, [pc, #56]	; (5268 <ASerialLdd1_OnBlockReceived+0x6c>)
    5230:	881b      	ldrh	r3, [r3, #0]
    5232:	2b95      	cmp	r3, #149	; 0x95
    5234:	d90a      	bls.n	524c <ASerialLdd1_OnBlockReceived+0x50>
      InpIndexW = 0x00U;               /* Set index on the first item into the receive buffer */
    5236:	4b0c      	ldr	r3, [pc, #48]	; (5268 <ASerialLdd1_OnBlockReceived+0x6c>)
    5238:	2200      	movs	r2, #0
    523a:	801a      	strh	r2, [r3, #0]
    523c:	e006      	b.n	524c <ASerialLdd1_OnBlockReceived+0x50>
    }
  } else {
    SerFlag |= FULL_RX;                /* Set flag "full RX buffer" */
    523e:	4b0d      	ldr	r3, [pc, #52]	; (5274 <ASerialLdd1_OnBlockReceived+0x78>)
    5240:	881b      	ldrh	r3, [r3, #0]
    5242:	2240      	movs	r2, #64	; 0x40
    5244:	4313      	orrs	r3, r2
    5246:	b29a      	uxth	r2, r3
    5248:	4b0a      	ldr	r3, [pc, #40]	; (5274 <ASerialLdd1_OnBlockReceived+0x78>)
    524a:	801a      	strh	r2, [r3, #0]
  }
  (void)ASerialLdd1_ReceiveBlock(ASerialLdd1_DeviceDataPtr, &BufferRead, 1U); /* Receive one data byte */
    524c:	4b0a      	ldr	r3, [pc, #40]	; (5278 <ASerialLdd1_OnBlockReceived+0x7c>)
    524e:	681a      	ldr	r2, [r3, #0]
    5250:	4b06      	ldr	r3, [pc, #24]	; (526c <ASerialLdd1_OnBlockReceived+0x70>)
    5252:	1c10      	adds	r0, r2, #0
    5254:	1c19      	adds	r1, r3, #0
    5256:	2201      	movs	r2, #1
    5258:	f7ff fc0c 	bl	4a74 <ASerialLdd1_ReceiveBlock>
}
    525c:	46bd      	mov	sp, r7
    525e:	b002      	add	sp, #8
    5260:	bd80      	pop	{r7, pc}
    5262:	46c0      	nop			; (mov r8, r8)
    5264:	20000118 	.word	0x20000118
    5268:	2000011c 	.word	0x2000011c
    526c:	200001b8 	.word	0x200001b8
    5270:	20000120 	.word	0x20000120
    5274:	20000116 	.word	0x20000116
    5278:	20000adc 	.word	0x20000adc

0000527c <ASerialLdd1_OnBlockSent>:
**         buffer is moved to the transmitter.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void ASerialLdd1_OnBlockSent(LDD_TUserData *UserDataPtr)
{
    527c:	b580      	push	{r7, lr}
    527e:	b082      	sub	sp, #8
    5280:	af00      	add	r7, sp, #0
    5282:	6078      	str	r0, [r7, #4]

  (void)UserDataPtr;                   /* Parameter is not used, suppress unused argument warning */
  OutIndexR++;
    5284:	4b1a      	ldr	r3, [pc, #104]	; (52f0 <ASerialLdd1_OnBlockSent+0x74>)
    5286:	881b      	ldrh	r3, [r3, #0]
    5288:	3301      	adds	r3, #1
    528a:	b29a      	uxth	r2, r3
    528c:	4b18      	ldr	r3, [pc, #96]	; (52f0 <ASerialLdd1_OnBlockSent+0x74>)
    528e:	801a      	strh	r2, [r3, #0]
  if (OutIndexR >= AS1_OUT_BUF_SIZE) { /* Is the index out of the transmit buffer? */
    5290:	4b17      	ldr	r3, [pc, #92]	; (52f0 <ASerialLdd1_OnBlockSent+0x74>)
    5292:	881b      	ldrh	r3, [r3, #0]
    5294:	2b95      	cmp	r3, #149	; 0x95
    5296:	d902      	bls.n	529e <ASerialLdd1_OnBlockSent+0x22>
    OutIndexR = 0x00U;                 /* Set index on the first item into the transmit buffer */
    5298:	4b15      	ldr	r3, [pc, #84]	; (52f0 <ASerialLdd1_OnBlockSent+0x74>)
    529a:	2200      	movs	r2, #0
    529c:	801a      	strh	r2, [r3, #0]
  }
  AS1_OutLen--;                        /* Decrease number of chars in the transmit buffer */
    529e:	4b15      	ldr	r3, [pc, #84]	; (52f4 <ASerialLdd1_OnBlockSent+0x78>)
    52a0:	881b      	ldrh	r3, [r3, #0]
    52a2:	3b01      	subs	r3, #1
    52a4:	b29a      	uxth	r2, r3
    52a6:	4b13      	ldr	r3, [pc, #76]	; (52f4 <ASerialLdd1_OnBlockSent+0x78>)
    52a8:	801a      	strh	r2, [r3, #0]
  if (AS1_OutLen != 0U) {              /* Is number of bytes in the transmit buffer greater then 0? */
    52aa:	4b12      	ldr	r3, [pc, #72]	; (52f4 <ASerialLdd1_OnBlockSent+0x78>)
    52ac:	881b      	ldrh	r3, [r3, #0]
    52ae:	2b00      	cmp	r3, #0
    52b0:	d013      	beq.n	52da <ASerialLdd1_OnBlockSent+0x5e>
    SerFlag |= RUNINT_FROM_TX;         /* Set flag "running int from TX"? */
    52b2:	4b11      	ldr	r3, [pc, #68]	; (52f8 <ASerialLdd1_OnBlockSent+0x7c>)
    52b4:	881b      	ldrh	r3, [r3, #0]
    52b6:	2220      	movs	r2, #32
    52b8:	4313      	orrs	r3, r2
    52ba:	b29a      	uxth	r2, r3
    52bc:	4b0e      	ldr	r3, [pc, #56]	; (52f8 <ASerialLdd1_OnBlockSent+0x7c>)
    52be:	801a      	strh	r2, [r3, #0]
    (void)ASerialLdd1_SendBlock(ASerialLdd1_DeviceDataPtr, (LDD_TData *)&OutBuffer[OutIndexR], 1U); /* Send one data byte */
    52c0:	4b0e      	ldr	r3, [pc, #56]	; (52fc <ASerialLdd1_OnBlockSent+0x80>)
    52c2:	681a      	ldr	r2, [r3, #0]
    52c4:	4b0a      	ldr	r3, [pc, #40]	; (52f0 <ASerialLdd1_OnBlockSent+0x74>)
    52c6:	881b      	ldrh	r3, [r3, #0]
    52c8:	1c19      	adds	r1, r3, #0
    52ca:	4b0d      	ldr	r3, [pc, #52]	; (5300 <ASerialLdd1_OnBlockSent+0x84>)
    52cc:	18cb      	adds	r3, r1, r3
    52ce:	1c10      	adds	r0, r2, #0
    52d0:	1c19      	adds	r1, r3, #0
    52d2:	2201      	movs	r2, #1
    52d4:	f7ff fc20 	bl	4b18 <ASerialLdd1_SendBlock>
    52d8:	e006      	b.n	52e8 <ASerialLdd1_OnBlockSent+0x6c>
  } else {
    SerFlag &= (byte)~(RUNINT_FROM_TX); /* Clear "running int from TX" and "full TX buff" flags */
    52da:	4b07      	ldr	r3, [pc, #28]	; (52f8 <ASerialLdd1_OnBlockSent+0x7c>)
    52dc:	881a      	ldrh	r2, [r3, #0]
    52de:	23df      	movs	r3, #223	; 0xdf
    52e0:	4013      	ands	r3, r2
    52e2:	b29a      	uxth	r2, r3
    52e4:	4b04      	ldr	r3, [pc, #16]	; (52f8 <ASerialLdd1_OnBlockSent+0x7c>)
    52e6:	801a      	strh	r2, [r3, #0]
  }
}
    52e8:	46bd      	mov	sp, r7
    52ea:	b002      	add	sp, #8
    52ec:	bd80      	pop	{r7, pc}
    52ee:	46c0      	nop			; (mov r8, r8)
    52f0:	200001bc 	.word	0x200001bc
    52f4:	200001ba 	.word	0x200001ba
    52f8:	20000116 	.word	0x20000116
    52fc:	20000adc 	.word	0x20000adc
    5300:	200001c0 	.word	0x200001c0

00005304 <ASerialLdd1_OnError>:
**         returned by a given method) occurs.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void ASerialLdd1_OnError(LDD_TUserData *UserDataPtr)
{
    5304:	b580      	push	{r7, lr}
    5306:	b084      	sub	sp, #16
    5308:	af00      	add	r7, sp, #0
    530a:	6078      	str	r0, [r7, #4]
  LDD_SERIAL_TError SerialErrorMask;   /* Serial error mask variable */

  (void)UserDataPtr;                   /* Parameter is not used, suppress unused argument warning */
  (void)ASerialLdd1_GetError(ASerialLdd1_DeviceDataPtr, &SerialErrorMask); /* Get error state */
    530c:	4b1f      	ldr	r3, [pc, #124]	; (538c <ASerialLdd1_OnError+0x88>)
    530e:	681a      	ldr	r2, [r3, #0]
    5310:	1c3b      	adds	r3, r7, #0
    5312:	330c      	adds	r3, #12
    5314:	1c10      	adds	r0, r2, #0
    5316:	1c19      	adds	r1, r3, #0
    5318:	f7ff fd96 	bl	4e48 <ASerialLdd1_GetError>
  if (SerialErrorMask != 0U) {
    531c:	68fb      	ldr	r3, [r7, #12]
    531e:	2b00      	cmp	r3, #0
    5320:	d031      	beq.n	5386 <ASerialLdd1_OnError+0x82>
    SerFlag |= (((SerialErrorMask & LDD_SERIAL_PARITY_ERROR) != 0U ) ? PARITY_ERR : 0U);
    5322:	68fa      	ldr	r2, [r7, #12]
    5324:	2302      	movs	r3, #2
    5326:	4013      	ands	r3, r2
    5328:	d001      	beq.n	532e <ASerialLdd1_OnError+0x2a>
    532a:	2304      	movs	r3, #4
    532c:	e000      	b.n	5330 <ASerialLdd1_OnError+0x2c>
    532e:	2300      	movs	r3, #0
    5330:	4a17      	ldr	r2, [pc, #92]	; (5390 <ASerialLdd1_OnError+0x8c>)
    5332:	8812      	ldrh	r2, [r2, #0]
    5334:	4313      	orrs	r3, r2
    5336:	b29a      	uxth	r2, r3
    5338:	4b15      	ldr	r3, [pc, #84]	; (5390 <ASerialLdd1_OnError+0x8c>)
    533a:	801a      	strh	r2, [r3, #0]
    SerFlag |= (((SerialErrorMask & LDD_SERIAL_NOISE_ERROR) != 0U ) ? NOISE_ERR : 0U);
    533c:	68fa      	ldr	r2, [r7, #12]
    533e:	2308      	movs	r3, #8
    5340:	4013      	ands	r3, r2
    5342:	d001      	beq.n	5348 <ASerialLdd1_OnError+0x44>
    5344:	2380      	movs	r3, #128	; 0x80
    5346:	e000      	b.n	534a <ASerialLdd1_OnError+0x46>
    5348:	2300      	movs	r3, #0
    534a:	4a11      	ldr	r2, [pc, #68]	; (5390 <ASerialLdd1_OnError+0x8c>)
    534c:	8812      	ldrh	r2, [r2, #0]
    534e:	4313      	orrs	r3, r2
    5350:	b29a      	uxth	r2, r3
    5352:	4b0f      	ldr	r3, [pc, #60]	; (5390 <ASerialLdd1_OnError+0x8c>)
    5354:	801a      	strh	r2, [r3, #0]
    SerFlag |= (((SerialErrorMask & LDD_SERIAL_RX_OVERRUN) != 0U ) ? OVERRUN_ERR : 0U);
    5356:	68fb      	ldr	r3, [r7, #12]
    5358:	b29a      	uxth	r2, r3
    535a:	2301      	movs	r3, #1
    535c:	4013      	ands	r3, r2
    535e:	b29a      	uxth	r2, r3
    5360:	4b0b      	ldr	r3, [pc, #44]	; (5390 <ASerialLdd1_OnError+0x8c>)
    5362:	881b      	ldrh	r3, [r3, #0]
    5364:	4313      	orrs	r3, r2
    5366:	b29a      	uxth	r2, r3
    5368:	4b09      	ldr	r3, [pc, #36]	; (5390 <ASerialLdd1_OnError+0x8c>)
    536a:	801a      	strh	r2, [r3, #0]
    SerFlag |= (((SerialErrorMask & LDD_SERIAL_FRAMING_ERROR) != 0U ) ? FRAMING_ERR : 0U);
    536c:	68fa      	ldr	r2, [r7, #12]
    536e:	2304      	movs	r3, #4
    5370:	4013      	ands	r3, r2
    5372:	d001      	beq.n	5378 <ASerialLdd1_OnError+0x74>
    5374:	2302      	movs	r3, #2
    5376:	e000      	b.n	537a <ASerialLdd1_OnError+0x76>
    5378:	2300      	movs	r3, #0
    537a:	4a05      	ldr	r2, [pc, #20]	; (5390 <ASerialLdd1_OnError+0x8c>)
    537c:	8812      	ldrh	r2, [r2, #0]
    537e:	4313      	orrs	r3, r2
    5380:	b29a      	uxth	r2, r3
    5382:	4b03      	ldr	r3, [pc, #12]	; (5390 <ASerialLdd1_OnError+0x8c>)
    5384:	801a      	strh	r2, [r3, #0]
  }
}
    5386:	46bd      	mov	sp, r7
    5388:	b004      	add	sp, #16
    538a:	bd80      	pop	{r7, pc}
    538c:	20000adc 	.word	0x20000adc
    5390:	20000116 	.word	0x20000116

00005394 <ASerialLdd1_OnTxComplete>:
**         idle.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void ASerialLdd1_OnTxComplete(LDD_TUserData *UserDataPtr)
{
    5394:	b580      	push	{r7, lr}
    5396:	b082      	sub	sp, #8
    5398:	af00      	add	r7, sp, #0
    539a:	6078      	str	r0, [r7, #4]
  (void)UserDataPtr;                   /* Parameter is not used, suppress unused argument warning */
  AS1_OnTxComplete();                  /* Invoke user event */
    539c:	f000 fce6 	bl	5d6c <AS1_OnTxComplete>
}
    53a0:	46bd      	mov	sp, r7
    53a2:	b002      	add	sp, #8
    53a4:	bd80      	pop	{r7, pc}
    53a6:	46c0      	nop			; (mov r8, r8)

000053a8 <ASerialLdd1_OnBreak>:
**         This event is called when a break occurs on the input channel.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void ASerialLdd1_OnBreak(LDD_TUserData *UserDataPtr)
{
    53a8:	b580      	push	{r7, lr}
    53aa:	b082      	sub	sp, #8
    53ac:	af00      	add	r7, sp, #0
    53ae:	6078      	str	r0, [r7, #4]
  (void)UserDataPtr;                   /* Parameter is not used, suppress unused argument warning */
  SerFlag |= FRAMING_ERR;              /* Set framing error flag */
    53b0:	4b04      	ldr	r3, [pc, #16]	; (53c4 <ASerialLdd1_OnBreak+0x1c>)
    53b2:	881b      	ldrh	r3, [r3, #0]
    53b4:	2202      	movs	r2, #2
    53b6:	4313      	orrs	r3, r2
    53b8:	b29a      	uxth	r2, r3
    53ba:	4b02      	ldr	r3, [pc, #8]	; (53c4 <ASerialLdd1_OnBreak+0x1c>)
    53bc:	801a      	strh	r2, [r3, #0]
}
    53be:	46bd      	mov	sp, r7
    53c0:	b002      	add	sp, #8
    53c2:	bd80      	pop	{r7, pc}
    53c4:	20000116 	.word	0x20000116

000053c8 <AD1_Init>:
**         part of the application initialization code.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void AD1_Init(void)
{
    53c8:	b580      	push	{r7, lr}
    53ca:	af00      	add	r7, sp, #0
  EnUser = FALSE;                      /* Disable device */
    53cc:	4b09      	ldr	r3, [pc, #36]	; (53f4 <AD1_Init+0x2c>)
    53ce:	2200      	movs	r2, #0
    53d0:	701a      	strb	r2, [r3, #0]
  OutFlg = 0U;                         /* No measured value */
    53d2:	4b09      	ldr	r3, [pc, #36]	; (53f8 <AD1_Init+0x30>)
    53d4:	2200      	movs	r2, #0
    53d6:	701a      	strb	r2, [r3, #0]
  SumChan = 0U;                        /* Set the counter of measured channels to 0 */
    53d8:	4b08      	ldr	r3, [pc, #32]	; (53fc <AD1_Init+0x34>)
    53da:	2200      	movs	r2, #0
    53dc:	701a      	strb	r2, [r3, #0]
  ModeFlg = STOP;                      /* Device isn't running */
    53de:	4b08      	ldr	r3, [pc, #32]	; (5400 <AD1_Init+0x38>)
    53e0:	2200      	movs	r2, #0
    53e2:	701a      	strb	r2, [r3, #0]
  AdcLdd1_DeviceDataPtr = AdcLdd1_Init(NULL); /* Calling init method of the inherited component */
    53e4:	2000      	movs	r0, #0
    53e6:	f7ff f98f 	bl	4708 <AdcLdd1_Init>
    53ea:	1c02      	adds	r2, r0, #0
    53ec:	4b05      	ldr	r3, [pc, #20]	; (5404 <AD1_Init+0x3c>)
    53ee:	601a      	str	r2, [r3, #0]
}
    53f0:	46bd      	mov	sp, r7
    53f2:	bd80      	pop	{r7, pc}
    53f4:	20000258 	.word	0x20000258
    53f8:	2000025b 	.word	0x2000025b
    53fc:	20000259 	.word	0x20000259
    5400:	2000025a 	.word	0x2000025a
    5404:	20000aec 	.word	0x20000aec

00005408 <zero_fill_bss>:



static void zero_fill_bss(void)

{
    5408:	b580      	push	{r7, lr}
    540a:	af00      	add	r7, sp, #0

	extern char __END_BSS[];



	memset(__START_BSS, 0, (__END_BSS - __START_BSS));
    540c:	4a05      	ldr	r2, [pc, #20]	; (5424 <zero_fill_bss+0x1c>)
    540e:	4b06      	ldr	r3, [pc, #24]	; (5428 <zero_fill_bss+0x20>)
    5410:	1ad3      	subs	r3, r2, r3
    5412:	4a05      	ldr	r2, [pc, #20]	; (5428 <zero_fill_bss+0x20>)
    5414:	1c10      	adds	r0, r2, #0
    5416:	2100      	movs	r1, #0
    5418:	1c1a      	adds	r2, r3, #0
    541a:	f001 fdc9 	bl	6fb0 <memset>

}
    541e:	46bd      	mov	sp, r7
    5420:	bd80      	pop	{r7, pc}
    5422:	46c0      	nop			; (mov r8, r8)
    5424:	20000bb4 	.word	0x20000bb4
    5428:	20000000 	.word	0x20000000

0000542c <__thumb_startup>:

{

		// Setup registers

		__init_registers();
    542c:	f003 f8c4 	bl	85b8 <__init_registers>



		// setup hardware

		__init_hardware();
    5430:	f7fe fd40 	bl	3eb4 <__init_hardware>

#endif

		//	zero-fill the .bss section

		zero_fill_bss();
    5434:	f7ff ffe8 	bl	5408 <zero_fill_bss>

#if SUPPORT_ROM_TO_RAM

		if (__S_romp != 0L)

			__copy_rom_sections_to_ram();
    5438:	f003 f8f2 	bl	8620 <__copy_rom_sections_to_ram>



		//	call C++ static initializers

		__call_static_initializers();
    543c:	f003 f870 	bl	8520 <__init_cpp>



		// initializations before main, user specific

		__init_user();
    5440:	f003 f8c8 	bl	85d4 <__init_user>

		exit(main(__argc_argv(__MAX_CMDLINE_ARGS, argv), argv));

#else

		exit(main(0, argv));
    5444:	4b04      	ldr	r3, [pc, #16]	; (5458 <__thumb_startup+0x2c>)
    5446:	2000      	movs	r0, #0
    5448:	1c19      	adds	r1, r3, #0
    544a:	f000 f80d 	bl	5468 <main>
    544e:	1c03      	adds	r3, r0, #0
    5450:	1c18      	adds	r0, r3, #0
    5452:	f001 fc9b 	bl	6d8c <exit>
    5456:	46c0      	nop			; (mov r8, r8)
    5458:	2000025c 	.word	0x2000025c

0000545c <_ExitProcess>:
 *	_ExitProcess
 *
 */
extern void _ExitProcess(int status) _EWL_WEAK;
extern void _ExitProcess(int status)
{
    545c:	b580      	push	{r7, lr}
    545e:	b082      	sub	sp, #8
    5460:	af00      	add	r7, sp, #0
    5462:	6078      	str	r0, [r7, #4]
#if defined(__SEMIHOSTING)
	sys_exit(status);
#endif
	while (1);
    5464:	e7fe      	b.n	5464 <_ExitProcess+0x8>
    5466:	46c0      	nop			; (mov r8, r8)

00005468 <main>:
** ===========================================================================================================================
*/


int main(void)
{
    5468:	b580      	push	{r7, lr}
    546a:	af00      	add	r7, sp, #0

  /*** Processor Expert internal initialization. DON'T REMOVE THIS CODE!!! ***/
  PE_low_level_init();
    546c:	f7fe fdc0 	bl	3ff0 <PE_low_level_init>
  /*** End of Processor Expert internal initialization.                    ***/
  
 //WDReset();							// kick the dog  
    AS1_Enable();
    5470:	f7ff fd6a 	bl	4f48 <AS1_Enable>
  	AS1_TurnRxOn();
    5474:	f7ff feaa 	bl	51cc <AS1_TurnRxOn>
  	AS1_TurnTxOn();
    5478:	f7ff feb4 	bl	51e4 <AS1_TurnTxOn>
  	
  NCP_init();
    547c:	f000 fba4 	bl	5bc8 <NCP_init>
  
  for(;;) {								// main loop
	  
	 WDReset();							// kick the dog 
    5480:	4b04      	ldr	r3, [pc, #16]	; (5494 <main+0x2c>)
    5482:	681b      	ldr	r3, [r3, #0]
    5484:	1c18      	adds	r0, r3, #0
    5486:	f7fe f9b5 	bl	37f4 <WDog1_Clear>
	 
	 rpc_run();
    548a:	f001 fa17 	bl	68bc <rpc_run>
	 sendPeriodicMessage();
    548e:	f000 fbc9 	bl	5c24 <sendPeriodicMessage>
	   	
  }
    5492:	e7f5      	b.n	5480 <main+0x18>
    5494:	20000024 	.word	0x20000024

00005498 <Boot_Default_Handler>:

/*********************************************************************************************************************
**  Default Interrupt Handlers
*/
void __attribute__ ((interrupt)) Boot_Default_Handler(void)
{
    5498:	b580      	push	{r7, lr}
    549a:	af00      	add	r7, sp, #0
  __asm("bkpt");
    549c:	be00      	bkpt	0x0000
}
    549e:	46bd      	mov	sp, r7
    54a0:	bd80      	pop	{r7, pc}
    54a2:	46c0      	nop			; (mov r8, r8)

000054a4 <rpc_ncp_ping>:
extern "C" {
#endif


static inline
RpcStatus rpc_ncp_ping(void) {
    54a4:	b590      	push	{r4, r7, lr}
    54a6:	b087      	sub	sp, #28
    54a8:	af00      	add	r7, sp, #0
  RpcStatus _rpc_res;
  MessageWriter_begin();
    54aa:	f000 fd27 	bl	5efc <MessageWriter_begin>
  MessageWriter_writeUInt16(RPC_OP_INVOKE);
    54ae:	4b1a      	ldr	r3, [pc, #104]	; (5518 <rpc_ncp_ping+0x74>)
    54b0:	1c18      	adds	r0, r3, #0
    54b2:	f000 fd05 	bl	5ec0 <MessageWriter_writeUInt16>
  MessageWriter_writeUInt16(RPC_UID_NCP_PING);
    54b6:	4b19      	ldr	r3, [pc, #100]	; (551c <rpc_ncp_ping+0x78>)
    54b8:	1c18      	adds	r0, r3, #0
    54ba:	f000 fd01 	bl	5ec0 <MessageWriter_writeUInt16>
  MessageWriter_writeUInt16(++_rpc_seq);
    54be:	4b18      	ldr	r3, [pc, #96]	; (5520 <rpc_ncp_ping+0x7c>)
    54c0:	881b      	ldrh	r3, [r3, #0]
    54c2:	3301      	adds	r3, #1
    54c4:	b29a      	uxth	r2, r3
    54c6:	4b16      	ldr	r3, [pc, #88]	; (5520 <rpc_ncp_ping+0x7c>)
    54c8:	801a      	strh	r2, [r3, #0]
    54ca:	4b15      	ldr	r3, [pc, #84]	; (5520 <rpc_ncp_ping+0x7c>)
    54cc:	881b      	ldrh	r3, [r3, #0]
    54ce:	1c18      	adds	r0, r3, #0
    54d0:	f000 fcf6 	bl	5ec0 <MessageWriter_writeUInt16>
  MessageWriter_end();
    54d4:	f000 fd1a 	bl	5f0c <MessageWriter_end>

  MessageBuffer _rsp_buff;
  MessageBuffer_init(&_rsp_buff, NULL, 0);
    54d8:	1c3b      	adds	r3, r7, #0
    54da:	1c18      	adds	r0, r3, #0
    54dc:	2100      	movs	r1, #0
    54de:	2200      	movs	r2, #0
    54e0:	f000 fd2c 	bl	5f3c <MessageBuffer_init>
  _rpc_res = rpc_wait_result(_rpc_seq, &_rsp_buff, 100);
    54e4:	4b0e      	ldr	r3, [pc, #56]	; (5520 <rpc_ncp_ping+0x7c>)
    54e6:	881a      	ldrh	r2, [r3, #0]
    54e8:	1c3c      	adds	r4, r7, #0
    54ea:	3417      	adds	r4, #23
    54ec:	1c3b      	adds	r3, r7, #0
    54ee:	1c10      	adds	r0, r2, #0
    54f0:	1c19      	adds	r1, r3, #0
    54f2:	2264      	movs	r2, #100	; 0x64
    54f4:	f001 f984 	bl	6800 <rpc_wait_result>
    54f8:	1c03      	adds	r3, r0, #0
    54fa:	7023      	strb	r3, [r4, #0]

  rpc_set_status(_rpc_res);
    54fc:	1c3b      	adds	r3, r7, #0
    54fe:	3317      	adds	r3, #23
    5500:	781b      	ldrb	r3, [r3, #0]
    5502:	1c18      	adds	r0, r3, #0
    5504:	f001 f914 	bl	6730 <rpc_set_status>
  return _rpc_res;
    5508:	1c3b      	adds	r3, r7, #0
    550a:	3317      	adds	r3, #23
    550c:	781b      	ldrb	r3, [r3, #0]
}
    550e:	1c18      	adds	r0, r3, #0
    5510:	46bd      	mov	sp, r7
    5512:	b007      	add	sp, #28
    5514:	bd90      	pop	{r4, r7, pc}
    5516:	46c0      	nop			; (mov r8, r8)
    5518:	000067bc 	.word	0x000067bc
    551c:	00000101 	.word	0x00000101
    5520:	2000028a 	.word	0x2000028a

00005524 <rpc_hw_setUartBaudRate>:
extern "C" {
#endif


static inline
bool rpc_hw_setUartBaudRate(uint32_t baud) {
    5524:	b590      	push	{r4, r7, lr}
    5526:	b089      	sub	sp, #36	; 0x24
    5528:	af00      	add	r7, sp, #0
    552a:	6078      	str	r0, [r7, #4]
  RpcStatus _rpc_res;
  /* Prepare return value */
  bool _rpc_ret_val;
  memset(&_rpc_ret_val, 0, sizeof(_rpc_ret_val));
    552c:	1c3b      	adds	r3, r7, #0
    552e:	331e      	adds	r3, #30
    5530:	2200      	movs	r2, #0
    5532:	701a      	strb	r2, [r3, #0]

  MessageWriter_begin();
    5534:	f000 fce2 	bl	5efc <MessageWriter_begin>
  MessageWriter_writeUInt16(RPC_OP_INVOKE);
    5538:	4b33      	ldr	r3, [pc, #204]	; (5608 <rpc_hw_setUartBaudRate+0xe4>)
    553a:	1c18      	adds	r0, r3, #0
    553c:	f000 fcc0 	bl	5ec0 <MessageWriter_writeUInt16>
  MessageWriter_writeUInt16(RPC_UID_HW_SETUARTBAUDRATE);
    5540:	4b32      	ldr	r3, [pc, #200]	; (560c <rpc_hw_setUartBaudRate+0xe8>)
    5542:	1c18      	adds	r0, r3, #0
    5544:	f000 fcbc 	bl	5ec0 <MessageWriter_writeUInt16>
  MessageWriter_writeUInt16(++_rpc_seq);
    5548:	4b31      	ldr	r3, [pc, #196]	; (5610 <rpc_hw_setUartBaudRate+0xec>)
    554a:	881b      	ldrh	r3, [r3, #0]
    554c:	3301      	adds	r3, #1
    554e:	b29a      	uxth	r2, r3
    5550:	4b2f      	ldr	r3, [pc, #188]	; (5610 <rpc_hw_setUartBaudRate+0xec>)
    5552:	801a      	strh	r2, [r3, #0]
    5554:	4b2e      	ldr	r3, [pc, #184]	; (5610 <rpc_hw_setUartBaudRate+0xec>)
    5556:	881b      	ldrh	r3, [r3, #0]
    5558:	1c18      	adds	r0, r3, #0
    555a:	f000 fcb1 	bl	5ec0 <MessageWriter_writeUInt16>

  /* Serialize inputs */
  MessageWriter_writeUInt32(baud);
    555e:	687b      	ldr	r3, [r7, #4]
    5560:	1c18      	adds	r0, r3, #0
    5562:	f000 fcbd 	bl	5ee0 <MessageWriter_writeUInt32>
  MessageWriter_end();
    5566:	f000 fcd1 	bl	5f0c <MessageWriter_end>

  MessageBuffer _rsp_buff;
  MessageBuffer_init(&_rsp_buff, NULL, 0);
    556a:	1c3b      	adds	r3, r7, #0
    556c:	3308      	adds	r3, #8
    556e:	1c18      	adds	r0, r3, #0
    5570:	2100      	movs	r1, #0
    5572:	2200      	movs	r2, #0
    5574:	f000 fce2 	bl	5f3c <MessageBuffer_init>
  _rpc_res = rpc_wait_result(_rpc_seq, &_rsp_buff, RPC_TIMEOUT_DEFAULT);
    5578:	4b25      	ldr	r3, [pc, #148]	; (5610 <rpc_hw_setUartBaudRate+0xec>)
    557a:	8819      	ldrh	r1, [r3, #0]
    557c:	1c3c      	adds	r4, r7, #0
    557e:	341f      	adds	r4, #31
    5580:	1c3a      	adds	r2, r7, #0
    5582:	3208      	adds	r2, #8
    5584:	23fa      	movs	r3, #250	; 0xfa
    5586:	009b      	lsls	r3, r3, #2
    5588:	1c08      	adds	r0, r1, #0
    558a:	1c11      	adds	r1, r2, #0
    558c:	1c1a      	adds	r2, r3, #0
    558e:	f001 f937 	bl	6800 <rpc_wait_result>
    5592:	1c03      	adds	r3, r0, #0
    5594:	7023      	strb	r3, [r4, #0]
  if (_rpc_res == RPC_STATUS_OK) {
    5596:	1c3b      	adds	r3, r7, #0
    5598:	331f      	adds	r3, #31
    559a:	781b      	ldrb	r3, [r3, #0]
    559c:	2b00      	cmp	r3, #0
    559e:	d107      	bne.n	55b0 <rpc_hw_setUartBaudRate+0x8c>
    /* Deserialize outputs */
    MessageBuffer_readBool(&_rsp_buff, &_rpc_ret_val);
    55a0:	1c3a      	adds	r2, r7, #0
    55a2:	3208      	adds	r2, #8
    55a4:	1c3b      	adds	r3, r7, #0
    55a6:	331e      	adds	r3, #30
    55a8:	1c10      	adds	r0, r2, #0
    55aa:	1c19      	adds	r1, r3, #0
    55ac:	f000 fdc8 	bl	6140 <MessageBuffer_readBool>
  }
  if (MessageBuffer_getError(&_rsp_buff) || MessageBuffer_availableToRead(&_rsp_buff)) {
    55b0:	1c3b      	adds	r3, r7, #0
    55b2:	3308      	adds	r3, #8
    55b4:	1c18      	adds	r0, r3, #0
    55b6:	f000 fd23 	bl	6000 <MessageBuffer_getError>
    55ba:	1c03      	adds	r3, r0, #0
    55bc:	2b00      	cmp	r3, #0
    55be:	d107      	bne.n	55d0 <rpc_hw_setUartBaudRate+0xac>
    55c0:	1c3b      	adds	r3, r7, #0
    55c2:	3308      	adds	r3, #8
    55c4:	1c18      	adds	r0, r3, #0
    55c6:	f000 fd0d 	bl	5fe4 <MessageBuffer_availableToRead>
    55ca:	1c03      	adds	r3, r0, #0
    55cc:	2b00      	cmp	r3, #0
    55ce:	d00d      	beq.n	55ec <rpc_hw_setUartBaudRate+0xc8>
    rpc_set_status(_rpc_res = RPC_STATUS_ERROR_RETS_R);
    55d0:	1c3b      	adds	r3, r7, #0
    55d2:	331f      	adds	r3, #31
    55d4:	2217      	movs	r2, #23
    55d6:	701a      	strb	r2, [r3, #0]
    55d8:	1c3b      	adds	r3, r7, #0
    55da:	331f      	adds	r3, #31
    55dc:	781b      	ldrb	r3, [r3, #0]
    55de:	1c18      	adds	r0, r3, #0
    55e0:	f001 f8a6 	bl	6730 <rpc_set_status>
    return _rpc_ret_val;
    55e4:	1c3b      	adds	r3, r7, #0
    55e6:	331e      	adds	r3, #30
    55e8:	781b      	ldrb	r3, [r3, #0]
    55ea:	e008      	b.n	55fe <rpc_hw_setUartBaudRate+0xda>
  }

  rpc_set_status(_rpc_res);
    55ec:	1c3b      	adds	r3, r7, #0
    55ee:	331f      	adds	r3, #31
    55f0:	781b      	ldrb	r3, [r3, #0]
    55f2:	1c18      	adds	r0, r3, #0
    55f4:	f001 f89c 	bl	6730 <rpc_set_status>
  return _rpc_ret_val;
    55f8:	1c3b      	adds	r3, r7, #0
    55fa:	331e      	adds	r3, #30
    55fc:	781b      	ldrb	r3, [r3, #0]
}
    55fe:	1c18      	adds	r0, r3, #0
    5600:	46bd      	mov	sp, r7
    5602:	b009      	add	sp, #36	; 0x24
    5604:	bd90      	pop	{r4, r7, pc}
    5606:	46c0      	nop			; (mov r8, r8)
    5608:	000067bc 	.word	0x000067bc
    560c:	00000201 	.word	0x00000201
    5610:	2000028a 	.word	0x2000028a

00005614 <rpc_blynk_getNcpVersion>:
extern "C" {
#endif


static inline
bool rpc_blynk_getNcpVersion(const char** ver) {
    5614:	b590      	push	{r4, r7, lr}
    5616:	b089      	sub	sp, #36	; 0x24
    5618:	af00      	add	r7, sp, #0
    561a:	6078      	str	r0, [r7, #4]
  RpcStatus _rpc_res;
  /* Prepare return value */
  bool _rpc_ret_val;
  memset(&_rpc_ret_val, 0, sizeof(_rpc_ret_val));
    561c:	1c3b      	adds	r3, r7, #0
    561e:	331e      	adds	r3, #30
    5620:	2200      	movs	r2, #0
    5622:	701a      	strb	r2, [r3, #0]

  MessageWriter_begin();
    5624:	f000 fc6a 	bl	5efc <MessageWriter_begin>
  MessageWriter_writeUInt16(RPC_OP_INVOKE);
    5628:	4b34      	ldr	r3, [pc, #208]	; (56fc <rpc_blynk_getNcpVersion+0xe8>)
    562a:	1c18      	adds	r0, r3, #0
    562c:	f000 fc48 	bl	5ec0 <MessageWriter_writeUInt16>
  MessageWriter_writeUInt16(RPC_UID_BLYNK_GETNCPVERSION);
    5630:	4b33      	ldr	r3, [pc, #204]	; (5700 <rpc_blynk_getNcpVersion+0xec>)
    5632:	1c18      	adds	r0, r3, #0
    5634:	f000 fc44 	bl	5ec0 <MessageWriter_writeUInt16>
  MessageWriter_writeUInt16(++_rpc_seq);
    5638:	4b32      	ldr	r3, [pc, #200]	; (5704 <rpc_blynk_getNcpVersion+0xf0>)
    563a:	881b      	ldrh	r3, [r3, #0]
    563c:	3301      	adds	r3, #1
    563e:	b29a      	uxth	r2, r3
    5640:	4b30      	ldr	r3, [pc, #192]	; (5704 <rpc_blynk_getNcpVersion+0xf0>)
    5642:	801a      	strh	r2, [r3, #0]
    5644:	4b2f      	ldr	r3, [pc, #188]	; (5704 <rpc_blynk_getNcpVersion+0xf0>)
    5646:	881b      	ldrh	r3, [r3, #0]
    5648:	1c18      	adds	r0, r3, #0
    564a:	f000 fc39 	bl	5ec0 <MessageWriter_writeUInt16>
  MessageWriter_end();
    564e:	f000 fc5d 	bl	5f0c <MessageWriter_end>

  MessageBuffer _rsp_buff;
  MessageBuffer_init(&_rsp_buff, NULL, 0);
    5652:	1c3b      	adds	r3, r7, #0
    5654:	3308      	adds	r3, #8
    5656:	1c18      	adds	r0, r3, #0
    5658:	2100      	movs	r1, #0
    565a:	2200      	movs	r2, #0
    565c:	f000 fc6e 	bl	5f3c <MessageBuffer_init>
  _rpc_res = rpc_wait_result(_rpc_seq, &_rsp_buff, RPC_TIMEOUT_DEFAULT);
    5660:	4b28      	ldr	r3, [pc, #160]	; (5704 <rpc_blynk_getNcpVersion+0xf0>)
    5662:	8819      	ldrh	r1, [r3, #0]
    5664:	1c3c      	adds	r4, r7, #0
    5666:	341f      	adds	r4, #31
    5668:	1c3a      	adds	r2, r7, #0
    566a:	3208      	adds	r2, #8
    566c:	23fa      	movs	r3, #250	; 0xfa
    566e:	009b      	lsls	r3, r3, #2
    5670:	1c08      	adds	r0, r1, #0
    5672:	1c11      	adds	r1, r2, #0
    5674:	1c1a      	adds	r2, r3, #0
    5676:	f001 f8c3 	bl	6800 <rpc_wait_result>
    567a:	1c03      	adds	r3, r0, #0
    567c:	7023      	strb	r3, [r4, #0]
  if (_rpc_res == RPC_STATUS_OK) {
    567e:	1c3b      	adds	r3, r7, #0
    5680:	331f      	adds	r3, #31
    5682:	781b      	ldrb	r3, [r3, #0]
    5684:	2b00      	cmp	r3, #0
    5686:	d10e      	bne.n	56a6 <rpc_blynk_getNcpVersion+0x92>
    /* Deserialize outputs */
    MessageBuffer_readString(&_rsp_buff, ver);
    5688:	1c3a      	adds	r2, r7, #0
    568a:	3208      	adds	r2, #8
    568c:	687b      	ldr	r3, [r7, #4]
    568e:	1c10      	adds	r0, r2, #0
    5690:	1c19      	adds	r1, r3, #0
    5692:	f000 fcbf 	bl	6014 <MessageBuffer_readString>
    MessageBuffer_readBool(&_rsp_buff, &_rpc_ret_val);
    5696:	1c3a      	adds	r2, r7, #0
    5698:	3208      	adds	r2, #8
    569a:	1c3b      	adds	r3, r7, #0
    569c:	331e      	adds	r3, #30
    569e:	1c10      	adds	r0, r2, #0
    56a0:	1c19      	adds	r1, r3, #0
    56a2:	f000 fd4d 	bl	6140 <MessageBuffer_readBool>
  }
  if (MessageBuffer_getError(&_rsp_buff) || MessageBuffer_availableToRead(&_rsp_buff)) {
    56a6:	1c3b      	adds	r3, r7, #0
    56a8:	3308      	adds	r3, #8
    56aa:	1c18      	adds	r0, r3, #0
    56ac:	f000 fca8 	bl	6000 <MessageBuffer_getError>
    56b0:	1c03      	adds	r3, r0, #0
    56b2:	2b00      	cmp	r3, #0
    56b4:	d107      	bne.n	56c6 <rpc_blynk_getNcpVersion+0xb2>
    56b6:	1c3b      	adds	r3, r7, #0
    56b8:	3308      	adds	r3, #8
    56ba:	1c18      	adds	r0, r3, #0
    56bc:	f000 fc92 	bl	5fe4 <MessageBuffer_availableToRead>
    56c0:	1c03      	adds	r3, r0, #0
    56c2:	2b00      	cmp	r3, #0
    56c4:	d00d      	beq.n	56e2 <rpc_blynk_getNcpVersion+0xce>
    rpc_set_status(_rpc_res = RPC_STATUS_ERROR_RETS_R);
    56c6:	1c3b      	adds	r3, r7, #0
    56c8:	331f      	adds	r3, #31
    56ca:	2217      	movs	r2, #23
    56cc:	701a      	strb	r2, [r3, #0]
    56ce:	1c3b      	adds	r3, r7, #0
    56d0:	331f      	adds	r3, #31
    56d2:	781b      	ldrb	r3, [r3, #0]
    56d4:	1c18      	adds	r0, r3, #0
    56d6:	f001 f82b 	bl	6730 <rpc_set_status>
    return _rpc_ret_val;
    56da:	1c3b      	adds	r3, r7, #0
    56dc:	331e      	adds	r3, #30
    56de:	781b      	ldrb	r3, [r3, #0]
    56e0:	e008      	b.n	56f4 <rpc_blynk_getNcpVersion+0xe0>
  }

  rpc_set_status(_rpc_res);
    56e2:	1c3b      	adds	r3, r7, #0
    56e4:	331f      	adds	r3, #31
    56e6:	781b      	ldrb	r3, [r3, #0]
    56e8:	1c18      	adds	r0, r3, #0
    56ea:	f001 f821 	bl	6730 <rpc_set_status>
  return _rpc_ret_val;
    56ee:	1c3b      	adds	r3, r7, #0
    56f0:	331e      	adds	r3, #30
    56f2:	781b      	ldrb	r3, [r3, #0]
}
    56f4:	1c18      	adds	r0, r3, #0
    56f6:	46bd      	mov	sp, r7
    56f8:	b009      	add	sp, #36	; 0x24
    56fa:	bd90      	pop	{r4, r7, pc}
    56fc:	000067bc 	.word	0x000067bc
    5700:	00000305 	.word	0x00000305
    5704:	2000028a 	.word	0x2000028a

00005708 <rpc_blynk_setFirmwareInfo>:
  return _rpc_ret_val;
}


static inline
bool rpc_blynk_setFirmwareInfo(const char* type, const char* version, const char* build, const char* blynk) {
    5708:	b590      	push	{r4, r7, lr}
    570a:	b08b      	sub	sp, #44	; 0x2c
    570c:	af00      	add	r7, sp, #0
    570e:	60f8      	str	r0, [r7, #12]
    5710:	60b9      	str	r1, [r7, #8]
    5712:	607a      	str	r2, [r7, #4]
    5714:	603b      	str	r3, [r7, #0]
  RpcStatus _rpc_res;
  /* Prepare return value */
  bool _rpc_ret_val;
  memset(&_rpc_ret_val, 0, sizeof(_rpc_ret_val));
    5716:	1c3b      	adds	r3, r7, #0
    5718:	3326      	adds	r3, #38	; 0x26
    571a:	2200      	movs	r2, #0
    571c:	701a      	strb	r2, [r3, #0]

  MessageWriter_begin();
    571e:	f000 fbed 	bl	5efc <MessageWriter_begin>
  MessageWriter_writeUInt16(RPC_OP_INVOKE);
    5722:	4b3a      	ldr	r3, [pc, #232]	; (580c <rpc_blynk_setFirmwareInfo+0x104>)
    5724:	1c18      	adds	r0, r3, #0
    5726:	f000 fbcb 	bl	5ec0 <MessageWriter_writeUInt16>
  MessageWriter_writeUInt16(RPC_UID_BLYNK_SETFIRMWAREINFO);
    572a:	23c1      	movs	r3, #193	; 0xc1
    572c:	009b      	lsls	r3, r3, #2
    572e:	1c18      	adds	r0, r3, #0
    5730:	f000 fbc6 	bl	5ec0 <MessageWriter_writeUInt16>
  MessageWriter_writeUInt16(++_rpc_seq);
    5734:	4b36      	ldr	r3, [pc, #216]	; (5810 <rpc_blynk_setFirmwareInfo+0x108>)
    5736:	881b      	ldrh	r3, [r3, #0]
    5738:	3301      	adds	r3, #1
    573a:	b29a      	uxth	r2, r3
    573c:	4b34      	ldr	r3, [pc, #208]	; (5810 <rpc_blynk_setFirmwareInfo+0x108>)
    573e:	801a      	strh	r2, [r3, #0]
    5740:	4b33      	ldr	r3, [pc, #204]	; (5810 <rpc_blynk_setFirmwareInfo+0x108>)
    5742:	881b      	ldrh	r3, [r3, #0]
    5744:	1c18      	adds	r0, r3, #0
    5746:	f000 fbbb 	bl	5ec0 <MessageWriter_writeUInt16>

  /* Serialize inputs */
  MessageWriter_writeString(type);
    574a:	68fb      	ldr	r3, [r7, #12]
    574c:	1c18      	adds	r0, r3, #0
    574e:	f000 fb53 	bl	5df8 <MessageWriter_writeString>
  MessageWriter_writeString(version);
    5752:	68bb      	ldr	r3, [r7, #8]
    5754:	1c18      	adds	r0, r3, #0
    5756:	f000 fb4f 	bl	5df8 <MessageWriter_writeString>
  MessageWriter_writeString(build);
    575a:	687b      	ldr	r3, [r7, #4]
    575c:	1c18      	adds	r0, r3, #0
    575e:	f000 fb4b 	bl	5df8 <MessageWriter_writeString>
  MessageWriter_writeString(blynk);
    5762:	683b      	ldr	r3, [r7, #0]
    5764:	1c18      	adds	r0, r3, #0
    5766:	f000 fb47 	bl	5df8 <MessageWriter_writeString>
  MessageWriter_end();
    576a:	f000 fbcf 	bl	5f0c <MessageWriter_end>

  MessageBuffer _rsp_buff;
  MessageBuffer_init(&_rsp_buff, NULL, 0);
    576e:	1c3b      	adds	r3, r7, #0
    5770:	3310      	adds	r3, #16
    5772:	1c18      	adds	r0, r3, #0
    5774:	2100      	movs	r1, #0
    5776:	2200      	movs	r2, #0
    5778:	f000 fbe0 	bl	5f3c <MessageBuffer_init>
  _rpc_res = rpc_wait_result(_rpc_seq, &_rsp_buff, RPC_TIMEOUT_DEFAULT);
    577c:	4b24      	ldr	r3, [pc, #144]	; (5810 <rpc_blynk_setFirmwareInfo+0x108>)
    577e:	8819      	ldrh	r1, [r3, #0]
    5780:	1c3c      	adds	r4, r7, #0
    5782:	3427      	adds	r4, #39	; 0x27
    5784:	1c3a      	adds	r2, r7, #0
    5786:	3210      	adds	r2, #16
    5788:	23fa      	movs	r3, #250	; 0xfa
    578a:	009b      	lsls	r3, r3, #2
    578c:	1c08      	adds	r0, r1, #0
    578e:	1c11      	adds	r1, r2, #0
    5790:	1c1a      	adds	r2, r3, #0
    5792:	f001 f835 	bl	6800 <rpc_wait_result>
    5796:	1c03      	adds	r3, r0, #0
    5798:	7023      	strb	r3, [r4, #0]
  if (_rpc_res == RPC_STATUS_OK) {
    579a:	1c3b      	adds	r3, r7, #0
    579c:	3327      	adds	r3, #39	; 0x27
    579e:	781b      	ldrb	r3, [r3, #0]
    57a0:	2b00      	cmp	r3, #0
    57a2:	d107      	bne.n	57b4 <rpc_blynk_setFirmwareInfo+0xac>
    /* Deserialize outputs */
    MessageBuffer_readBool(&_rsp_buff, &_rpc_ret_val);
    57a4:	1c3a      	adds	r2, r7, #0
    57a6:	3210      	adds	r2, #16
    57a8:	1c3b      	adds	r3, r7, #0
    57aa:	3326      	adds	r3, #38	; 0x26
    57ac:	1c10      	adds	r0, r2, #0
    57ae:	1c19      	adds	r1, r3, #0
    57b0:	f000 fcc6 	bl	6140 <MessageBuffer_readBool>
  }
  if (MessageBuffer_getError(&_rsp_buff) || MessageBuffer_availableToRead(&_rsp_buff)) {
    57b4:	1c3b      	adds	r3, r7, #0
    57b6:	3310      	adds	r3, #16
    57b8:	1c18      	adds	r0, r3, #0
    57ba:	f000 fc21 	bl	6000 <MessageBuffer_getError>
    57be:	1c03      	adds	r3, r0, #0
    57c0:	2b00      	cmp	r3, #0
    57c2:	d107      	bne.n	57d4 <rpc_blynk_setFirmwareInfo+0xcc>
    57c4:	1c3b      	adds	r3, r7, #0
    57c6:	3310      	adds	r3, #16
    57c8:	1c18      	adds	r0, r3, #0
    57ca:	f000 fc0b 	bl	5fe4 <MessageBuffer_availableToRead>
    57ce:	1c03      	adds	r3, r0, #0
    57d0:	2b00      	cmp	r3, #0
    57d2:	d00d      	beq.n	57f0 <rpc_blynk_setFirmwareInfo+0xe8>
    rpc_set_status(_rpc_res = RPC_STATUS_ERROR_RETS_R);
    57d4:	1c3b      	adds	r3, r7, #0
    57d6:	3327      	adds	r3, #39	; 0x27
    57d8:	2217      	movs	r2, #23
    57da:	701a      	strb	r2, [r3, #0]
    57dc:	1c3b      	adds	r3, r7, #0
    57de:	3327      	adds	r3, #39	; 0x27
    57e0:	781b      	ldrb	r3, [r3, #0]
    57e2:	1c18      	adds	r0, r3, #0
    57e4:	f000 ffa4 	bl	6730 <rpc_set_status>
    return _rpc_ret_val;
    57e8:	1c3b      	adds	r3, r7, #0
    57ea:	3326      	adds	r3, #38	; 0x26
    57ec:	781b      	ldrb	r3, [r3, #0]
    57ee:	e008      	b.n	5802 <rpc_blynk_setFirmwareInfo+0xfa>
  }

  rpc_set_status(_rpc_res);
    57f0:	1c3b      	adds	r3, r7, #0
    57f2:	3327      	adds	r3, #39	; 0x27
    57f4:	781b      	ldrb	r3, [r3, #0]
    57f6:	1c18      	adds	r0, r3, #0
    57f8:	f000 ff9a 	bl	6730 <rpc_set_status>
  return _rpc_ret_val;
    57fc:	1c3b      	adds	r3, r7, #0
    57fe:	3326      	adds	r3, #38	; 0x26
    5800:	781b      	ldrb	r3, [r3, #0]
}
    5802:	1c18      	adds	r0, r3, #0
    5804:	46bd      	mov	sp, r7
    5806:	b00b      	add	sp, #44	; 0x2c
    5808:	bd90      	pop	{r4, r7, pc}
    580a:	46c0      	nop			; (mov r8, r8)
    580c:	000067bc 	.word	0x000067bc
    5810:	2000028a 	.word	0x2000028a

00005814 <rpc_blynk_initialize>:


static inline
bool rpc_blynk_initialize(const char* templateID, const char* templateName) {
    5814:	b590      	push	{r4, r7, lr}
    5816:	b089      	sub	sp, #36	; 0x24
    5818:	af00      	add	r7, sp, #0
    581a:	6078      	str	r0, [r7, #4]
    581c:	6039      	str	r1, [r7, #0]
  RpcStatus _rpc_res;
  /* Prepare return value */
  bool _rpc_ret_val;
  memset(&_rpc_ret_val, 0, sizeof(_rpc_ret_val));
    581e:	1c3b      	adds	r3, r7, #0
    5820:	331e      	adds	r3, #30
    5822:	2200      	movs	r2, #0
    5824:	701a      	strb	r2, [r3, #0]

  MessageWriter_begin();
    5826:	f000 fb69 	bl	5efc <MessageWriter_begin>
  MessageWriter_writeUInt16(RPC_OP_INVOKE);
    582a:	4b35      	ldr	r3, [pc, #212]	; (5900 <rpc_blynk_initialize+0xec>)
    582c:	1c18      	adds	r0, r3, #0
    582e:	f000 fb47 	bl	5ec0 <MessageWriter_writeUInt16>
  MessageWriter_writeUInt16(RPC_UID_BLYNK_INITIALIZE);
    5832:	4b34      	ldr	r3, [pc, #208]	; (5904 <rpc_blynk_initialize+0xf0>)
    5834:	1c18      	adds	r0, r3, #0
    5836:	f000 fb43 	bl	5ec0 <MessageWriter_writeUInt16>
  MessageWriter_writeUInt16(++_rpc_seq);
    583a:	4b33      	ldr	r3, [pc, #204]	; (5908 <rpc_blynk_initialize+0xf4>)
    583c:	881b      	ldrh	r3, [r3, #0]
    583e:	3301      	adds	r3, #1
    5840:	b29a      	uxth	r2, r3
    5842:	4b31      	ldr	r3, [pc, #196]	; (5908 <rpc_blynk_initialize+0xf4>)
    5844:	801a      	strh	r2, [r3, #0]
    5846:	4b30      	ldr	r3, [pc, #192]	; (5908 <rpc_blynk_initialize+0xf4>)
    5848:	881b      	ldrh	r3, [r3, #0]
    584a:	1c18      	adds	r0, r3, #0
    584c:	f000 fb38 	bl	5ec0 <MessageWriter_writeUInt16>

  /* Serialize inputs */
  MessageWriter_writeString(templateID);
    5850:	687b      	ldr	r3, [r7, #4]
    5852:	1c18      	adds	r0, r3, #0
    5854:	f000 fad0 	bl	5df8 <MessageWriter_writeString>
  MessageWriter_writeString(templateName);
    5858:	683b      	ldr	r3, [r7, #0]
    585a:	1c18      	adds	r0, r3, #0
    585c:	f000 facc 	bl	5df8 <MessageWriter_writeString>
  MessageWriter_end();
    5860:	f000 fb54 	bl	5f0c <MessageWriter_end>

  MessageBuffer _rsp_buff;
  MessageBuffer_init(&_rsp_buff, NULL, 0);
    5864:	1c3b      	adds	r3, r7, #0
    5866:	3308      	adds	r3, #8
    5868:	1c18      	adds	r0, r3, #0
    586a:	2100      	movs	r1, #0
    586c:	2200      	movs	r2, #0
    586e:	f000 fb65 	bl	5f3c <MessageBuffer_init>
  _rpc_res = rpc_wait_result(_rpc_seq, &_rsp_buff, 5000);
    5872:	4b25      	ldr	r3, [pc, #148]	; (5908 <rpc_blynk_initialize+0xf4>)
    5874:	8819      	ldrh	r1, [r3, #0]
    5876:	1c3c      	adds	r4, r7, #0
    5878:	341f      	adds	r4, #31
    587a:	1c3a      	adds	r2, r7, #0
    587c:	3208      	adds	r2, #8
    587e:	4b23      	ldr	r3, [pc, #140]	; (590c <rpc_blynk_initialize+0xf8>)
    5880:	1c08      	adds	r0, r1, #0
    5882:	1c11      	adds	r1, r2, #0
    5884:	1c1a      	adds	r2, r3, #0
    5886:	f000 ffbb 	bl	6800 <rpc_wait_result>
    588a:	1c03      	adds	r3, r0, #0
    588c:	7023      	strb	r3, [r4, #0]
  if (_rpc_res == RPC_STATUS_OK) {
    588e:	1c3b      	adds	r3, r7, #0
    5890:	331f      	adds	r3, #31
    5892:	781b      	ldrb	r3, [r3, #0]
    5894:	2b00      	cmp	r3, #0
    5896:	d107      	bne.n	58a8 <rpc_blynk_initialize+0x94>
    /* Deserialize outputs */
    MessageBuffer_readBool(&_rsp_buff, &_rpc_ret_val);
    5898:	1c3a      	adds	r2, r7, #0
    589a:	3208      	adds	r2, #8
    589c:	1c3b      	adds	r3, r7, #0
    589e:	331e      	adds	r3, #30
    58a0:	1c10      	adds	r0, r2, #0
    58a2:	1c19      	adds	r1, r3, #0
    58a4:	f000 fc4c 	bl	6140 <MessageBuffer_readBool>
  }
  if (MessageBuffer_getError(&_rsp_buff) || MessageBuffer_availableToRead(&_rsp_buff)) {
    58a8:	1c3b      	adds	r3, r7, #0
    58aa:	3308      	adds	r3, #8
    58ac:	1c18      	adds	r0, r3, #0
    58ae:	f000 fba7 	bl	6000 <MessageBuffer_getError>
    58b2:	1c03      	adds	r3, r0, #0
    58b4:	2b00      	cmp	r3, #0
    58b6:	d107      	bne.n	58c8 <rpc_blynk_initialize+0xb4>
    58b8:	1c3b      	adds	r3, r7, #0
    58ba:	3308      	adds	r3, #8
    58bc:	1c18      	adds	r0, r3, #0
    58be:	f000 fb91 	bl	5fe4 <MessageBuffer_availableToRead>
    58c2:	1c03      	adds	r3, r0, #0
    58c4:	2b00      	cmp	r3, #0
    58c6:	d00d      	beq.n	58e4 <rpc_blynk_initialize+0xd0>
    rpc_set_status(_rpc_res = RPC_STATUS_ERROR_RETS_R);
    58c8:	1c3b      	adds	r3, r7, #0
    58ca:	331f      	adds	r3, #31
    58cc:	2217      	movs	r2, #23
    58ce:	701a      	strb	r2, [r3, #0]
    58d0:	1c3b      	adds	r3, r7, #0
    58d2:	331f      	adds	r3, #31
    58d4:	781b      	ldrb	r3, [r3, #0]
    58d6:	1c18      	adds	r0, r3, #0
    58d8:	f000 ff2a 	bl	6730 <rpc_set_status>
    return _rpc_ret_val;
    58dc:	1c3b      	adds	r3, r7, #0
    58de:	331e      	adds	r3, #30
    58e0:	781b      	ldrb	r3, [r3, #0]
    58e2:	e008      	b.n	58f6 <rpc_blynk_initialize+0xe2>
  }

  rpc_set_status(_rpc_res);
    58e4:	1c3b      	adds	r3, r7, #0
    58e6:	331f      	adds	r3, #31
    58e8:	781b      	ldrb	r3, [r3, #0]
    58ea:	1c18      	adds	r0, r3, #0
    58ec:	f000 ff20 	bl	6730 <rpc_set_status>
  return _rpc_ret_val;
    58f0:	1c3b      	adds	r3, r7, #0
    58f2:	331e      	adds	r3, #30
    58f4:	781b      	ldrb	r3, [r3, #0]
}
    58f6:	1c18      	adds	r0, r3, #0
    58f8:	46bd      	mov	sp, r7
    58fa:	b009      	add	sp, #36	; 0x24
    58fc:	bd90      	pop	{r4, r7, pc}
    58fe:	46c0      	nop			; (mov r8, r8)
    5900:	000067bc 	.word	0x000067bc
    5904:	00000301 	.word	0x00000301
    5908:	2000028a 	.word	0x2000028a
    590c:	00001388 	.word	0x00001388

00005910 <rpc_blynk_setConfigTimeout>:
  return _rpc_ret_val;
}


static inline
bool rpc_blynk_setConfigTimeout(uint16_t timeout) {
    5910:	b590      	push	{r4, r7, lr}
    5912:	b089      	sub	sp, #36	; 0x24
    5914:	af00      	add	r7, sp, #0
    5916:	1c02      	adds	r2, r0, #0
    5918:	1dbb      	adds	r3, r7, #6
    591a:	801a      	strh	r2, [r3, #0]
  RpcStatus _rpc_res;
  /* Prepare return value */
  bool _rpc_ret_val;
  memset(&_rpc_ret_val, 0, sizeof(_rpc_ret_val));
    591c:	1c3b      	adds	r3, r7, #0
    591e:	331e      	adds	r3, #30
    5920:	2200      	movs	r2, #0
    5922:	701a      	strb	r2, [r3, #0]

  MessageWriter_begin();
    5924:	f000 faea 	bl	5efc <MessageWriter_begin>
  MessageWriter_writeUInt16(RPC_OP_INVOKE);
    5928:	4b33      	ldr	r3, [pc, #204]	; (59f8 <rpc_blynk_setConfigTimeout+0xe8>)
    592a:	1c18      	adds	r0, r3, #0
    592c:	f000 fac8 	bl	5ec0 <MessageWriter_writeUInt16>
  MessageWriter_writeUInt16(RPC_UID_BLYNK_SETCONFIGTIMEOUT);
    5930:	4b32      	ldr	r3, [pc, #200]	; (59fc <rpc_blynk_setConfigTimeout+0xec>)
    5932:	1c18      	adds	r0, r3, #0
    5934:	f000 fac4 	bl	5ec0 <MessageWriter_writeUInt16>
  MessageWriter_writeUInt16(++_rpc_seq);
    5938:	4b31      	ldr	r3, [pc, #196]	; (5a00 <rpc_blynk_setConfigTimeout+0xf0>)
    593a:	881b      	ldrh	r3, [r3, #0]
    593c:	3301      	adds	r3, #1
    593e:	b29a      	uxth	r2, r3
    5940:	4b2f      	ldr	r3, [pc, #188]	; (5a00 <rpc_blynk_setConfigTimeout+0xf0>)
    5942:	801a      	strh	r2, [r3, #0]
    5944:	4b2e      	ldr	r3, [pc, #184]	; (5a00 <rpc_blynk_setConfigTimeout+0xf0>)
    5946:	881b      	ldrh	r3, [r3, #0]
    5948:	1c18      	adds	r0, r3, #0
    594a:	f000 fab9 	bl	5ec0 <MessageWriter_writeUInt16>

  /* Serialize inputs */
  MessageWriter_writeUInt16(timeout);
    594e:	1dbb      	adds	r3, r7, #6
    5950:	881b      	ldrh	r3, [r3, #0]
    5952:	1c18      	adds	r0, r3, #0
    5954:	f000 fab4 	bl	5ec0 <MessageWriter_writeUInt16>
  MessageWriter_end();
    5958:	f000 fad8 	bl	5f0c <MessageWriter_end>

  MessageBuffer _rsp_buff;
  MessageBuffer_init(&_rsp_buff, NULL, 0);
    595c:	1c3b      	adds	r3, r7, #0
    595e:	3308      	adds	r3, #8
    5960:	1c18      	adds	r0, r3, #0
    5962:	2100      	movs	r1, #0
    5964:	2200      	movs	r2, #0
    5966:	f000 fae9 	bl	5f3c <MessageBuffer_init>
  _rpc_res = rpc_wait_result(_rpc_seq, &_rsp_buff, RPC_TIMEOUT_DEFAULT);
    596a:	4b25      	ldr	r3, [pc, #148]	; (5a00 <rpc_blynk_setConfigTimeout+0xf0>)
    596c:	8819      	ldrh	r1, [r3, #0]
    596e:	1c3c      	adds	r4, r7, #0
    5970:	341f      	adds	r4, #31
    5972:	1c3a      	adds	r2, r7, #0
    5974:	3208      	adds	r2, #8
    5976:	23fa      	movs	r3, #250	; 0xfa
    5978:	009b      	lsls	r3, r3, #2
    597a:	1c08      	adds	r0, r1, #0
    597c:	1c11      	adds	r1, r2, #0
    597e:	1c1a      	adds	r2, r3, #0
    5980:	f000 ff3e 	bl	6800 <rpc_wait_result>
    5984:	1c03      	adds	r3, r0, #0
    5986:	7023      	strb	r3, [r4, #0]
  if (_rpc_res == RPC_STATUS_OK) {
    5988:	1c3b      	adds	r3, r7, #0
    598a:	331f      	adds	r3, #31
    598c:	781b      	ldrb	r3, [r3, #0]
    598e:	2b00      	cmp	r3, #0
    5990:	d107      	bne.n	59a2 <rpc_blynk_setConfigTimeout+0x92>
    /* Deserialize outputs */
    MessageBuffer_readBool(&_rsp_buff, &_rpc_ret_val);
    5992:	1c3a      	adds	r2, r7, #0
    5994:	3208      	adds	r2, #8
    5996:	1c3b      	adds	r3, r7, #0
    5998:	331e      	adds	r3, #30
    599a:	1c10      	adds	r0, r2, #0
    599c:	1c19      	adds	r1, r3, #0
    599e:	f000 fbcf 	bl	6140 <MessageBuffer_readBool>
  }
  if (MessageBuffer_getError(&_rsp_buff) || MessageBuffer_availableToRead(&_rsp_buff)) {
    59a2:	1c3b      	adds	r3, r7, #0
    59a4:	3308      	adds	r3, #8
    59a6:	1c18      	adds	r0, r3, #0
    59a8:	f000 fb2a 	bl	6000 <MessageBuffer_getError>
    59ac:	1c03      	adds	r3, r0, #0
    59ae:	2b00      	cmp	r3, #0
    59b0:	d107      	bne.n	59c2 <rpc_blynk_setConfigTimeout+0xb2>
    59b2:	1c3b      	adds	r3, r7, #0
    59b4:	3308      	adds	r3, #8
    59b6:	1c18      	adds	r0, r3, #0
    59b8:	f000 fb14 	bl	5fe4 <MessageBuffer_availableToRead>
    59bc:	1c03      	adds	r3, r0, #0
    59be:	2b00      	cmp	r3, #0
    59c0:	d00d      	beq.n	59de <rpc_blynk_setConfigTimeout+0xce>
    rpc_set_status(_rpc_res = RPC_STATUS_ERROR_RETS_R);
    59c2:	1c3b      	adds	r3, r7, #0
    59c4:	331f      	adds	r3, #31
    59c6:	2217      	movs	r2, #23
    59c8:	701a      	strb	r2, [r3, #0]
    59ca:	1c3b      	adds	r3, r7, #0
    59cc:	331f      	adds	r3, #31
    59ce:	781b      	ldrb	r3, [r3, #0]
    59d0:	1c18      	adds	r0, r3, #0
    59d2:	f000 fead 	bl	6730 <rpc_set_status>
    return _rpc_ret_val;
    59d6:	1c3b      	adds	r3, r7, #0
    59d8:	331e      	adds	r3, #30
    59da:	781b      	ldrb	r3, [r3, #0]
    59dc:	e008      	b.n	59f0 <rpc_blynk_setConfigTimeout+0xe0>
  }

  rpc_set_status(_rpc_res);
    59de:	1c3b      	adds	r3, r7, #0
    59e0:	331f      	adds	r3, #31
    59e2:	781b      	ldrb	r3, [r3, #0]
    59e4:	1c18      	adds	r0, r3, #0
    59e6:	f000 fea3 	bl	6730 <rpc_set_status>
  return _rpc_ret_val;
    59ea:	1c3b      	adds	r3, r7, #0
    59ec:	331e      	adds	r3, #30
    59ee:	781b      	ldrb	r3, [r3, #0]
}
    59f0:	1c18      	adds	r0, r3, #0
    59f2:	46bd      	mov	sp, r7
    59f4:	b009      	add	sp, #36	; 0x24
    59f6:	bd90      	pop	{r4, r7, pc}
    59f8:	000067bc 	.word	0x000067bc
    59fc:	00000325 	.word	0x00000325
    5a00:	2000028a 	.word	0x2000028a

00005a04 <rpc_blynk_virtualWrite>:
  return _rpc_ret_val;
}


static inline
void rpc_blynk_virtualWrite(uint16_t vpin, buffer_t value) {
    5a04:	b580      	push	{r7, lr}
    5a06:	b084      	sub	sp, #16
    5a08:	af00      	add	r7, sp, #0
    5a0a:	1d3b      	adds	r3, r7, #4
    5a0c:	6019      	str	r1, [r3, #0]
    5a0e:	605a      	str	r2, [r3, #4]
    5a10:	1c3b      	adds	r3, r7, #0
    5a12:	330e      	adds	r3, #14
    5a14:	1c02      	adds	r2, r0, #0
    5a16:	801a      	strh	r2, [r3, #0]
  MessageWriter_begin();
    5a18:	f000 fa70 	bl	5efc <MessageWriter_begin>
  MessageWriter_writeUInt16(RPC_OP_ONEWAY);
    5a1c:	4b0b      	ldr	r3, [pc, #44]	; (5a4c <rpc_blynk_virtualWrite+0x48>)
    5a1e:	1c18      	adds	r0, r3, #0
    5a20:	f000 fa4e 	bl	5ec0 <MessageWriter_writeUInt16>
  MessageWriter_writeUInt16(RPC_UID_BLYNK_VIRTUALWRITE);
    5a24:	4b0a      	ldr	r3, [pc, #40]	; (5a50 <rpc_blynk_virtualWrite+0x4c>)
    5a26:	1c18      	adds	r0, r3, #0
    5a28:	f000 fa4a 	bl	5ec0 <MessageWriter_writeUInt16>

  /* Serialize inputs */
  MessageWriter_writeUInt16(vpin);
    5a2c:	1c3b      	adds	r3, r7, #0
    5a2e:	330e      	adds	r3, #14
    5a30:	881b      	ldrh	r3, [r3, #0]
    5a32:	1c18      	adds	r0, r3, #0
    5a34:	f000 fa44 	bl	5ec0 <MessageWriter_writeUInt16>
  MessageWriter_writeBinary(value);
    5a38:	1d3b      	adds	r3, r7, #4
    5a3a:	6818      	ldr	r0, [r3, #0]
    5a3c:	6859      	ldr	r1, [r3, #4]
    5a3e:	f000 f9fd 	bl	5e3c <MessageWriter_writeBinary>
  MessageWriter_end();
    5a42:	f000 fa63 	bl	5f0c <MessageWriter_end>

  /* Oneway => skip response */
}
    5a46:	46bd      	mov	sp, r7
    5a48:	b004      	add	sp, #16
    5a4a:	bd80      	pop	{r7, pc}
    5a4c:	00001cf3 	.word	0x00001cf3
    5a50:	00000311 	.word	0x00000311

00005a54 <rpc_uart_available>:

#include "NCP_Helpers.h"
#include "Events.h"
#include "Operation.h"

int rpc_uart_available(void) {
    5a54:	b580      	push	{r7, lr}
    5a56:	af00      	add	r7, sp, #0
  // Return the amount of data in the UART input buffer
  return AS1_GetCharsInRxBuf();
    5a58:	f7ff fb78 	bl	514c <AS1_GetCharsInRxBuf>
    5a5c:	1c03      	adds	r3, r0, #0
}
    5a5e:	1c18      	adds	r0, r3, #0
    5a60:	46bd      	mov	sp, r7
    5a62:	bd80      	pop	{r7, pc}

00005a64 <rpc_uart_read>:
int rpc_uart_read(void) {
    5a64:	b580      	push	{r7, lr}
    5a66:	b082      	sub	sp, #8
    5a68:	af00      	add	r7, sp, #0
  // Get a byte from the UART input buffer
  uint8 bTemp;
  AS1_RecvChar(&bTemp);
    5a6a:	1dfb      	adds	r3, r7, #7
    5a6c:	1c18      	adds	r0, r3, #0
    5a6e:	f7ff fa7d 	bl	4f6c <AS1_RecvChar>
  return bTemp;
    5a72:	1dfb      	adds	r3, r7, #7
    5a74:	781b      	ldrb	r3, [r3, #0]
}
    5a76:	1c18      	adds	r0, r3, #0
    5a78:	46bd      	mov	sp, r7
    5a7a:	b002      	add	sp, #8
    5a7c:	bd80      	pop	{r7, pc}
    5a7e:	46c0      	nop			; (mov r8, r8)

00005a80 <rpc_uart_write>:

size_t rpc_uart_write(uint8_t data) {
    5a80:	b580      	push	{r7, lr}
    5a82:	b082      	sub	sp, #8
    5a84:	af00      	add	r7, sp, #0
    5a86:	1c02      	adds	r2, r0, #0
    5a88:	1dfb      	adds	r3, r7, #7
    5a8a:	701a      	strb	r2, [r3, #0]
  // Put a byte to the UART output buffer
	AS1_SendChar(data);
    5a8c:	1dfb      	adds	r3, r7, #7
    5a8e:	781b      	ldrb	r3, [r3, #0]
    5a90:	1c18      	adds	r0, r3, #0
    5a92:	f7ff fadf 	bl	5054 <AS1_SendChar>
	return 1; 
    5a96:	2301      	movs	r3, #1
}
    5a98:	1c18      	adds	r0, r3, #0
    5a9a:	46bd      	mov	sp, r7
    5a9c:	b002      	add	sp, #8
    5a9e:	bd80      	pop	{r7, pc}

00005aa0 <rpc_uart_flush>:

void rpc_uart_flush(void) {
    5aa0:	b580      	push	{r7, lr}
    5aa2:	af00      	add	r7, sp, #0
  // Wait for UART to output all the data
  //SerialNCP.flush();
	while(SendComplete == 0);				// Waiting for Tx complete
    5aa4:	46c0      	nop			; (mov r8, r8)
    5aa6:	4b05      	ldr	r3, [pc, #20]	; (5abc <rpc_uart_flush+0x1c>)
    5aa8:	781b      	ldrb	r3, [r3, #0]
    5aaa:	b2db      	uxtb	r3, r3
    5aac:	2b00      	cmp	r3, #0
    5aae:	d0fa      	beq.n	5aa6 <rpc_uart_flush+0x6>
	SendComplete = 0;	
    5ab0:	4b02      	ldr	r3, [pc, #8]	; (5abc <rpc_uart_flush+0x1c>)
    5ab2:	2200      	movs	r2, #0
    5ab4:	701a      	strb	r2, [r3, #0]
}
    5ab6:	46bd      	mov	sp, r7
    5ab8:	bd80      	pop	{r7, pc}
    5aba:	46c0      	nop			; (mov r8, r8)
    5abc:	20000baa 	.word	0x20000baa

00005ac0 <millis>:

uint32_t millis(void) {
    5ac0:	b580      	push	{r7, lr}
    5ac2:	af00      	add	r7, sp, #0
	return millisTick;
    5ac4:	4b02      	ldr	r3, [pc, #8]	; (5ad0 <millis+0x10>)
    5ac6:	681b      	ldr	r3, [r3, #0]
}
    5ac8:	1c18      	adds	r0, r3, #0
    5aca:	46bd      	mov	sp, r7
    5acc:	bd80      	pop	{r7, pc}
    5ace:	46c0      	nop			; (mov r8, r8)
    5ad0:	20000bac 	.word	0x20000bac

00005ad4 <rpc_system_millis>:

uint32_t rpc_system_millis(void) {
    5ad4:	b580      	push	{r7, lr}
    5ad6:	af00      	add	r7, sp, #0
  // Return uptime in milliseconds
  // This is used to implement the RPC timeout
  return millis();
    5ad8:	f7ff fff2 	bl	5ac0 <millis>
    5adc:	1c03      	adds	r3, r0, #0
}
    5ade:	1c18      	adds	r0, r3, #0
    5ae0:	46bd      	mov	sp, r7
    5ae2:	bd80      	pop	{r7, pc}

00005ae4 <ncpSetupSerial>:
/*
 * Implement some helpers
 */
uint32_t timeout = 10000;

bool ncpSetupSerial(timeout) {
    5ae4:	b580      	push	{r7, lr}
    5ae6:	b08a      	sub	sp, #40	; 0x28
    5ae8:	af00      	add	r7, sp, #0
    5aea:	6078      	str	r0, [r7, #4]
  RpcUartFraming_init();
    5aec:	f000 fbd8 	bl	62a0 <RpcUartFraming_init>

  const long baudTarget = BLYNK_NCP_BAUD;
    5af0:	2396      	movs	r3, #150	; 0x96
    5af2:	021b      	lsls	r3, r3, #8
    5af4:	623b      	str	r3, [r7, #32]
  const long baudRates[3] = { 38400, 115200, baudTarget };
    5af6:	1c3b      	adds	r3, r7, #0
    5af8:	330c      	adds	r3, #12
    5afa:	2296      	movs	r2, #150	; 0x96
    5afc:	0212      	lsls	r2, r2, #8
    5afe:	601a      	str	r2, [r3, #0]
    5b00:	1c3b      	adds	r3, r7, #0
    5b02:	330c      	adds	r3, #12
    5b04:	22e1      	movs	r2, #225	; 0xe1
    5b06:	0252      	lsls	r2, r2, #9
    5b08:	605a      	str	r2, [r3, #4]
    5b0a:	1c3b      	adds	r3, r7, #0
    5b0c:	330c      	adds	r3, #12
    5b0e:	6a3a      	ldr	r2, [r7, #32]
    5b10:	609a      	str	r2, [r3, #8]
  unsigned baudIdx = 0;
    5b12:	2300      	movs	r3, #0
    5b14:	627b      	str	r3, [r7, #36]	; 0x24

  const uint32_t tbeg = millis();
    5b16:	f7ff ffd3 	bl	5ac0 <millis>
    5b1a:	1c03      	adds	r3, r0, #0
    5b1c:	61fb      	str	r3, [r7, #28]
  while (millis() - tbeg < timeout) {
    5b1e:	e027      	b.n	5b70 <ncpSetupSerial+0x8c>
    long baud = baudRates[baudIdx++ % 3];
    5b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5b22:	1c18      	adds	r0, r3, #0
    5b24:	2103      	movs	r1, #3
    5b26:	f7fc fb23 	bl	2170 <__aeabi_uidivmod>
    5b2a:	1c0b      	adds	r3, r1, #0
    5b2c:	1c1a      	adds	r2, r3, #0
    5b2e:	1c3b      	adds	r3, r7, #0
    5b30:	330c      	adds	r3, #12
    5b32:	0092      	lsls	r2, r2, #2
    5b34:	58d3      	ldr	r3, [r2, r3]
    5b36:	61bb      	str	r3, [r7, #24]
    5b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5b3a:	3301      	adds	r3, #1
    5b3c:	627b      	str	r3, [r7, #36]	; 0x24
 //   SerialNCP.begin(baud);
    if (RPC_STATUS_OK == rpc_ncp_ping()) {
    5b3e:	f7ff fcb1 	bl	54a4 <rpc_ncp_ping>
    5b42:	1c03      	adds	r3, r0, #0
    5b44:	2b00      	cmp	r3, #0
    5b46:	d113      	bne.n	5b70 <ncpSetupSerial+0x8c>
      if (baud != baudTarget) {
    5b48:	69ba      	ldr	r2, [r7, #24]
    5b4a:	6a3b      	ldr	r3, [r7, #32]
    5b4c:	429a      	cmp	r2, r3
    5b4e:	d00d      	beq.n	5b6c <ncpSetupSerial+0x88>
        // Upgrade baud rate
        if (rpc_hw_setUartBaudRate(baudTarget)) {
    5b50:	6a3b      	ldr	r3, [r7, #32]
    5b52:	1c18      	adds	r0, r3, #0
    5b54:	f7ff fce6 	bl	5524 <rpc_hw_setUartBaudRate>
    5b58:	1c03      	adds	r3, r0, #0
    5b5a:	2b00      	cmp	r3, #0
    5b5c:	d006      	beq.n	5b6c <ncpSetupSerial+0x88>
       //   SerialNCP.flush();
       //   SerialNCP.begin(baudTarget);
      //    baud = baudTarget;
        //  delay(20);
          if (RPC_STATUS_OK != rpc_ncp_ping()) {
    5b5e:	f7ff fca1 	bl	54a4 <rpc_ncp_ping>
    5b62:	1c03      	adds	r3, r0, #0
    5b64:	2b00      	cmp	r3, #0
    5b66:	d001      	beq.n	5b6c <ncpSetupSerial+0x88>
    //        SerialDbg.println(F("Changing NCP baud failed"));
            return false;
    5b68:	2300      	movs	r3, #0
    5b6a:	e00a      	b.n	5b82 <ncpSetupSerial+0x9e>
          }
        }
      }
  //    SerialDbg.print(F("Blynk.NCP ready, baud: "));
  //    SerialDbg.println(baud);
      return true;
    5b6c:	2301      	movs	r3, #1
    5b6e:	e008      	b.n	5b82 <ncpSetupSerial+0x9e>
  const long baudTarget = BLYNK_NCP_BAUD;
  const long baudRates[3] = { 38400, 115200, baudTarget };
  unsigned baudIdx = 0;

  const uint32_t tbeg = millis();
  while (millis() - tbeg < timeout) {
    5b70:	f7ff ffa6 	bl	5ac0 <millis>
    5b74:	1c02      	adds	r2, r0, #0
    5b76:	69fb      	ldr	r3, [r7, #28]
    5b78:	1ad2      	subs	r2, r2, r3
    5b7a:	687b      	ldr	r3, [r7, #4]
    5b7c:	429a      	cmp	r2, r3
    5b7e:	d3cf      	bcc.n	5b20 <ncpSetupSerial+0x3c>
  //    SerialDbg.println(baud);
      return true;
    }
  }
  //SerialDbg.println(F("NCP not responding"));
  return false;
    5b80:	2300      	movs	r3, #0
}
    5b82:	1c18      	adds	r0, r3, #0
    5b84:	46bd      	mov	sp, r7
    5b86:	b00a      	add	sp, #40	; 0x28
    5b88:	bd80      	pop	{r7, pc}
    5b8a:	46c0      	nop			; (mov r8, r8)

00005b8c <virtualWrite>:
  default                           : return "Unknown";
  }
}


void virtualWrite(int virtualPin, const char* value) {
    5b8c:	b580      	push	{r7, lr}
    5b8e:	b084      	sub	sp, #16
    5b90:	af00      	add	r7, sp, #0
    5b92:	6078      	str	r0, [r7, #4]
    5b94:	6039      	str	r1, [r7, #0]
  buffer_t val = { (uint8_t*)value, strlen(value) };
    5b96:	1c3b      	adds	r3, r7, #0
    5b98:	3308      	adds	r3, #8
    5b9a:	683a      	ldr	r2, [r7, #0]
    5b9c:	601a      	str	r2, [r3, #0]
    5b9e:	683b      	ldr	r3, [r7, #0]
    5ba0:	1c18      	adds	r0, r3, #0
    5ba2:	f001 fa5b 	bl	705c <strlen>
    5ba6:	1c02      	adds	r2, r0, #0
    5ba8:	1c3b      	adds	r3, r7, #0
    5baa:	3308      	adds	r3, #8
    5bac:	605a      	str	r2, [r3, #4]
  rpc_blynk_virtualWrite(virtualPin, val);
    5bae:	687b      	ldr	r3, [r7, #4]
    5bb0:	b29a      	uxth	r2, r3
    5bb2:	1c3b      	adds	r3, r7, #0
    5bb4:	3308      	adds	r3, #8
    5bb6:	1c10      	adds	r0, r2, #0
    5bb8:	6819      	ldr	r1, [r3, #0]
    5bba:	685a      	ldr	r2, [r3, #4]
    5bbc:	f7ff ff22 	bl	5a04 <rpc_blynk_virtualWrite>
}
    5bc0:	46bd      	mov	sp, r7
    5bc2:	b004      	add	sp, #16
    5bc4:	bd80      	pop	{r7, pc}
    5bc6:	46c0      	nop			; (mov r8, r8)

00005bc8 <NCP_init>:
//  while (!ser && (millis() - tstart < 2900)) { delay(1); }
//  delay(100);
//#endif
//}

void NCP_init(void){
    5bc8:	b580      	push	{r7, lr}
    5bca:	b082      	sub	sp, #8
    5bcc:	af00      	add	r7, sp, #0
	
	if (!ncpSetupSerial()) {
    5bce:	f7ff ff89 	bl	5ae4 <ncpSetupSerial>
    5bd2:	1c03      	adds	r3, r0, #0
    5bd4:	2b00      	cmp	r3, #0
    5bd6:	d016      	beq.n	5c06 <NCP_init+0x3e>
	    return;
	}
	 
  const char* ncpFwVer = "unknown";
    5bd8:	4b0c      	ldr	r3, [pc, #48]	; (5c0c <NCP_init+0x44>)
    5bda:	607b      	str	r3, [r7, #4]
  if (rpc_blynk_getNcpVersion(&ncpFwVer)) {
    5bdc:	1d3b      	adds	r3, r7, #4
    5bde:	1c18      	adds	r0, r3, #0
    5be0:	f7ff fd18 	bl	5614 <rpc_blynk_getNcpVersion>
  //rpc_hw_initLED(19, false);
  //rpc_hw_setLedBrightness(160);


  // Set config mode timeout to 30 minutes, for testing purposes
  rpc_blynk_setConfigTimeout(30*60);
    5be4:	23e1      	movs	r3, #225	; 0xe1
    5be6:	00db      	lsls	r3, r3, #3
    5be8:	1c18      	adds	r0, r3, #0
    5bea:	f7ff fe91 	bl	5910 <rpc_blynk_setConfigTimeout>


  // Provide MCU firmware info.
  // This info is mainly used for the Primary MCU OTA updates
  rpc_blynk_setFirmwareInfo(BLYNK_FIRMWARE_TYPE,
    5bee:	4808      	ldr	r0, [pc, #32]	; (5c10 <NCP_init+0x48>)
    5bf0:	4908      	ldr	r1, [pc, #32]	; (5c14 <NCP_init+0x4c>)
    5bf2:	4a09      	ldr	r2, [pc, #36]	; (5c18 <NCP_init+0x50>)
    5bf4:	4b09      	ldr	r3, [pc, #36]	; (5c1c <NCP_init+0x54>)
    5bf6:	f7ff fd87 	bl	5708 <rpc_blynk_setFirmwareInfo>
  // White labeling (use this ONLY if you have a branded Blynk App)
  //rpc_blynk_setVendorPrefix("MyCompany");
  //rpc_blynk_setVendorServer("dashboard.mycompany.com");

  // Product setup
  if (!rpc_blynk_initialize(BLYNK_TEMPLATE_ID, BLYNK_TEMPLATE_NAME)) {
    5bfa:	4a05      	ldr	r2, [pc, #20]	; (5c10 <NCP_init+0x48>)
    5bfc:	4b08      	ldr	r3, [pc, #32]	; (5c20 <NCP_init+0x58>)
    5bfe:	1c10      	adds	r0, r2, #0
    5c00:	1c19      	adds	r1, r3, #0
    5c02:	f7ff fe07 	bl	5814 <rpc_blynk_initialize>
  //  SerialDbg.println(F("rpc_blynk_initialize failed"));
  }
  
}
    5c06:	46bd      	mov	sp, r7
    5c08:	b002      	add	sp, #8
    5c0a:	bd80      	pop	{r7, pc}
    5c0c:	000086cc 	.word	0x000086cc
    5c10:	000086d4 	.word	0x000086d4
    5c14:	000086e0 	.word	0x000086e0
    5c18:	000086e8 	.word	0x000086e8
    5c1c:	000086f0 	.word	0x000086f0
    5c20:	000086f8 	.word	0x000086f8

00005c24 <sendPeriodicMessage>:

void sendPeriodicMessage(void)
{
    5c24:	b580      	push	{r7, lr}
    5c26:	af00      	add	r7, sp, #0
  static uint32_t last_change;
  last_change = millis();
    5c28:	f7ff ff4a 	bl	5ac0 <millis>
    5c2c:	1c02      	adds	r2, r0, #0
    5c2e:	4b09      	ldr	r3, [pc, #36]	; (5c54 <sendPeriodicMessage+0x30>)
    5c30:	601a      	str	r2, [r3, #0]
  if (millis() - last_change > 10000) {
    5c32:	f7ff ff45 	bl	5ac0 <millis>
    5c36:	1c02      	adds	r2, r0, #0
    5c38:	4b06      	ldr	r3, [pc, #24]	; (5c54 <sendPeriodicMessage+0x30>)
    5c3a:	681b      	ldr	r3, [r3, #0]
    5c3c:	1ad2      	subs	r2, r2, r3
    5c3e:	4b06      	ldr	r3, [pc, #24]	; (5c58 <sendPeriodicMessage+0x34>)
    5c40:	429a      	cmp	r2, r3
    5c42:	d905      	bls.n	5c50 <sendPeriodicMessage+0x2c>
    last_change += 10000;
    5c44:	4b03      	ldr	r3, [pc, #12]	; (5c54 <sendPeriodicMessage+0x30>)
    5c46:	681b      	ldr	r3, [r3, #0]
    5c48:	4903      	ldr	r1, [pc, #12]	; (5c58 <sendPeriodicMessage+0x34>)
    5c4a:	185a      	adds	r2, r3, r1
    5c4c:	4b01      	ldr	r3, [pc, #4]	; (5c54 <sendPeriodicMessage+0x30>)
    5c4e:	601a      	str	r2, [r3, #0]

    // Send a value to Blynk Virtual Pin 1
  //  virtualWrite(1, millis());
  }
}
    5c50:	46bd      	mov	sp, r7
    5c52:	bd80      	pop	{r7, pc}
    5c54:	2000028c 	.word	0x2000028c
    5c58:	00002710 	.word	0x00002710

00005c5c <rpc_client_blynkVPinChange_impl>:
//  sendPeriodicMessage();
//}

// Handle Blynk Virtual Pin value updates
void rpc_client_blynkVPinChange_impl(uint16_t vpin, buffer_t param)
{
    5c5c:	b580      	push	{r7, lr}
    5c5e:	b084      	sub	sp, #16
    5c60:	af00      	add	r7, sp, #0
    5c62:	1d3b      	adds	r3, r7, #4
    5c64:	6019      	str	r1, [r3, #0]
    5c66:	605a      	str	r2, [r3, #4]
    5c68:	1c3b      	adds	r3, r7, #0
    5c6a:	330e      	adds	r3, #14
    5c6c:	1c02      	adds	r2, r0, #0
    5c6e:	801a      	strh	r2, [r3, #0]
    // NOTE: we could copy the buffer, but we use 0-copy instead
    // But we need to 0-terminate it, overwriting the CRC8
    param.data[param.length] = '\0';
    5c70:	1d3b      	adds	r3, r7, #4
    5c72:	681a      	ldr	r2, [r3, #0]
    5c74:	1d3b      	adds	r3, r7, #4
    5c76:	685b      	ldr	r3, [r3, #4]
    5c78:	18d3      	adds	r3, r2, r3
    5c7a:	2200      	movs	r2, #0
    5c7c:	701a      	strb	r2, [r3, #0]
    //SerialDbg.println(vpin);

    // Param format. Most values will be plain strings: "Hello world", "1234", "123.456", etc.
    // However, sometimes the value contains multiple items (an array). In this case, the values are separated using a 0x00 byte, i.e:
    // "First\0Second\0Third"
}
    5c7e:	46bd      	mov	sp, r7
    5c80:	b004      	add	sp, #16
    5c82:	bd80      	pop	{r7, pc}

00005c84 <rpc_client_blynkStateChange_impl>:

// Define the callback for the NCP state change event
void rpc_client_blynkStateChange_impl(uint8_t state)
{
    5c84:	b580      	push	{r7, lr}
    5c86:	b082      	sub	sp, #8
    5c88:	af00      	add	r7, sp, #0
    5c8a:	1c02      	adds	r2, r0, #0
    5c8c:	1dfb      	adds	r3, r7, #7
    5c8e:	701a      	strb	r2, [r3, #0]
 // SerialDbg.print(F("NCP state: "));
 // SerialDbg.println(ncpGetStateString(state));
  if ((RpcBlynkState)state == BLYNK_STATE_CONNECTED) {
    5c90:	1dfb      	adds	r3, r7, #7
    5c92:	781b      	ldrb	r3, [r3, #0]
    5c94:	2b05      	cmp	r3, #5
    5c96:	d104      	bne.n	5ca2 <rpc_client_blynkStateChange_impl+0x1e>
    // Send a value to Virtual Pin 1
    virtualWrite(1, "hello world!");
    5c98:	4b03      	ldr	r3, [pc, #12]	; (5ca8 <rpc_client_blynkStateChange_impl+0x24>)
    5c9a:	2001      	movs	r0, #1
    5c9c:	1c19      	adds	r1, r3, #0
    5c9e:	f7ff ff75 	bl	5b8c <virtualWrite>
  }
}
    5ca2:	46bd      	mov	sp, r7
    5ca4:	b002      	add	sp, #8
    5ca6:	bd80      	pop	{r7, pc}
    5ca8:	00008708 	.word	0x00008708

00005cac <rpc_client_processEvent_impl>:

// Handle various NCP events
void rpc_client_processEvent_impl(uint8_t event)
{
    5cac:	b580      	push	{r7, lr}
    5cae:	b082      	sub	sp, #8
    5cb0:	af00      	add	r7, sp, #0
    5cb2:	1c02      	adds	r2, r0, #0
    5cb4:	1dfb      	adds	r3, r7, #7
    5cb6:	701a      	strb	r2, [r3, #0]
    switch ((RpcEvent)event) {
    5cb8:	1dfb      	adds	r3, r7, #7
    5cba:	781b      	ldrb	r3, [r3, #0]
    5cbc:	2b16      	cmp	r3, #22
    5cbe:	d804      	bhi.n	5cca <rpc_client_processEvent_impl+0x1e>
    5cc0:	009a      	lsls	r2, r3, #2
    5cc2:	4b04      	ldr	r3, [pc, #16]	; (5cd4 <rpc_client_processEvent_impl+0x28>)
    5cc4:	18d3      	adds	r3, r2, r3
    5cc6:	681b      	ldr	r3, [r3, #0]
    5cc8:	469f      	mov	pc, r3
    case RPC_EVENT_HW_USER_LONGPRESS:  break;
    case RPC_EVENT_HW_USER_CONFIGRESET: break;
    case RPC_EVENT_BLYNK_PROVISIONED:  break;
    case RPC_EVENT_BLYNK_TIME_SYNC:    break;
    case RPC_EVENT_BLYNK_TIME_CHANGED: break;
    default: break;
    5cca:	46c0      	nop			; (mov r8, r8)
    }
}
    5ccc:	46bd      	mov	sp, r7
    5cce:	b002      	add	sp, #8
    5cd0:	bd80      	pop	{r7, pc}
    5cd2:	46c0      	nop			; (mov r8, r8)
    5cd4:	000087a0 	.word	0x000087a0

00005cd8 <LPTmr>:
volatile uint16 wTimerTick2;	// Timer tick, set by timer expired event
volatile uint32 millisTick;		// Timer tick, set by timer expired event
volatile bool SerialIn; 		// Flag of RX, set by RX interrupt. Used in UART methods
volatile bool Latchhappened; 	// Flag of solenoid latched
PE_ISR(LPTmr)
{
    5cd8:	b580      	push	{r7, lr}
    5cda:	af00      	add	r7, sp, #0
// NOTE: The routine should include actions to clear the appropriate interrupt flags.
	LPTMR0_CSR |=  LPTMR_CSR_TCF_MASK;   // write 1 to TCF to clear the LPT timer compare flag
    5cdc:	4b03      	ldr	r3, [pc, #12]	; (5cec <LPTmr+0x14>)
    5cde:	4a03      	ldr	r2, [pc, #12]	; (5cec <LPTmr+0x14>)
    5ce0:	6812      	ldr	r2, [r2, #0]
    5ce2:	2180      	movs	r1, #128	; 0x80
    5ce4:	430a      	orrs	r2, r1
    5ce6:	601a      	str	r2, [r3, #0]
}
    5ce8:	46bd      	mov	sp, r7
    5cea:	bd80      	pop	{r7, pc}
    5cec:	40040000 	.word	0x40040000

00005cf0 <Cpu_OnReset>:
**                           definition of these constants in this file
**                           for details.
*/
/* ===================================================================*/
void Cpu_OnReset(uint16_t Reason)
{
    5cf0:	b580      	push	{r7, lr}
    5cf2:	b082      	sub	sp, #8
    5cf4:	af00      	add	r7, sp, #0
    5cf6:	1c02      	adds	r2, r0, #0
    5cf8:	1dbb      	adds	r3, r7, #6
    5cfa:	801a      	strh	r2, [r3, #0]
  /* Write your code here ... */
		
	StartReason = Reason; //just record the reason. Take action later after everything initialized.
    5cfc:	4b03      	ldr	r3, [pc, #12]	; (5d0c <Cpu_OnReset+0x1c>)
    5cfe:	1dba      	adds	r2, r7, #6
    5d00:	8812      	ldrh	r2, [r2, #0]
    5d02:	801a      	strh	r2, [r3, #0]
	
	
}
    5d04:	46bd      	mov	sp, r7
    5d06:	b002      	add	sp, #8
    5d08:	bd80      	pop	{r7, pc}
    5d0a:	46c0      	nop			; (mov r8, r8)
    5d0c:	20000ba4 	.word	0x20000ba4

00005d10 <Cpu_OnLLSWakeUpINT>:
**         This event is automatically enabled when [LLWU interrupt
**         request] is enabled.
*/
/* ===================================================================*/
void Cpu_OnLLSWakeUpINT(void)
{
    5d10:	b580      	push	{r7, lr}
    5d12:	af00      	add	r7, sp, #0
  /* Write your code here ... */
	
/* Sheng MVP Mod begin */
    if (Cpu_GetLLSWakeUpFlags() == LLWU_EXT_PIN10) 
    5d14:	f7fe f868 	bl	3de8 <Cpu_GetLLSWakeUpFlags>
    5d18:	1c02      	adds	r2, r0, #0
    5d1a:	2380      	movs	r3, #128	; 0x80
    5d1c:	00db      	lsls	r3, r3, #3
    5d1e:	429a      	cmp	r2, r3
    5d20:	d102      	bne.n	5d28 <Cpu_OnLLSWakeUpINT+0x18>
	{
		GVbWakeBLE = TRUE;
    5d22:	4b0e      	ldr	r3, [pc, #56]	; (5d5c <Cpu_OnLLSWakeUpINT+0x4c>)
    5d24:	2201      	movs	r2, #1
    5d26:	701a      	strb	r2, [r3, #0]
		
	} 
	
	if (Cpu_GetLLSWakeUpFlags() == LLWU_INT_MODULE0)	 
    5d28:	f7fe f85e 	bl	3de8 <Cpu_GetLLSWakeUpFlags>
    5d2c:	1c02      	adds	r2, r0, #0
    5d2e:	2380      	movs	r3, #128	; 0x80
    5d30:	025b      	lsls	r3, r3, #9
    5d32:	429a      	cmp	r2, r3
    5d34:	d110      	bne.n	5d58 <Cpu_OnLLSWakeUpINT+0x48>
	{
		/* Original begin */
		SIM_SCGC5 |= SIM_SCGC5_LPTMR_MASK;
    5d36:	4a0a      	ldr	r2, [pc, #40]	; (5d60 <Cpu_OnLLSWakeUpINT+0x50>)
    5d38:	4909      	ldr	r1, [pc, #36]	; (5d60 <Cpu_OnLLSWakeUpINT+0x50>)
    5d3a:	4b0a      	ldr	r3, [pc, #40]	; (5d64 <Cpu_OnLLSWakeUpINT+0x54>)
    5d3c:	58cb      	ldr	r3, [r1, r3]
    5d3e:	2101      	movs	r1, #1
    5d40:	4319      	orrs	r1, r3
    5d42:	4b08      	ldr	r3, [pc, #32]	; (5d64 <Cpu_OnLLSWakeUpINT+0x54>)
    5d44:	50d1      	str	r1, [r2, r3]
		LPTMR0_CSR |=  LPTMR_CSR_TCF_MASK;   // write 1 to TCF to clear the LPT timer compare flag
    5d46:	4b08      	ldr	r3, [pc, #32]	; (5d68 <Cpu_OnLLSWakeUpINT+0x58>)
    5d48:	4a07      	ldr	r2, [pc, #28]	; (5d68 <Cpu_OnLLSWakeUpINT+0x58>)
    5d4a:	6812      	ldr	r2, [r2, #0]
    5d4c:	2180      	movs	r1, #128	; 0x80
    5d4e:	430a      	orrs	r2, r1
    5d50:	601a      	str	r2, [r3, #0]
		LPTMR0_CSR = ( LPTMR_CSR_TEN_MASK | LPTMR_CSR_TIE_MASK | LPTMR_CSR_TCF_MASK  );
    5d52:	4b05      	ldr	r3, [pc, #20]	; (5d68 <Cpu_OnLLSWakeUpINT+0x58>)
    5d54:	22c1      	movs	r2, #193	; 0xc1
    5d56:	601a      	str	r2, [r3, #0]
		/* Original end */
	}
/* Sheng added in  end */ 
	
}
    5d58:	46bd      	mov	sp, r7
    5d5a:	bd80      	pop	{r7, pc}
    5d5c:	20000ba0 	.word	0x20000ba0
    5d60:	40047000 	.word	0x40047000
    5d64:	00001038 	.word	0x00001038
    5d68:	40040000 	.word	0x40040000

00005d6c <AS1_OnTxComplete>:
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/
void AS1_OnTxComplete(void)
{
    5d6c:	b580      	push	{r7, lr}
    5d6e:	af00      	add	r7, sp, #0
  /* Write your code here ... */
	SendComplete = TRUE;	//set this global variable
    5d70:	4b02      	ldr	r3, [pc, #8]	; (5d7c <AS1_OnTxComplete+0x10>)
    5d72:	2201      	movs	r2, #1
    5d74:	701a      	strb	r2, [r3, #0]
}
    5d76:	46bd      	mov	sp, r7
    5d78:	bd80      	pop	{r7, pc}
    5d7a:	46c0      	nop			; (mov r8, r8)
    5d7c:	20000baa 	.word	0x20000baa

00005d80 <UnUseINT>:



void __thumb_startup( void );	//Make compiler happy

void UnUseINT(void){
    5d80:	b580      	push	{r7, lr}
    5d82:	af00      	add	r7, sp, #0
	__DI();
    5d84:	b672      	cpsid	i
	__thumb_startup();
    5d86:	f7ff fb51 	bl	542c <__thumb_startup>
}
    5d8a:	46bd      	mov	sp, r7
    5d8c:	bd80      	pop	{r7, pc}
    5d8e:	46c0      	nop			; (mov r8, r8)

00005d90 <TI1_OnInterrupt>:
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/
void TI1_OnInterrupt(void)
{
    5d90:	b580      	push	{r7, lr}
    5d92:	af00      	add	r7, sp, #0
  /* Write your code here ... */
	wTimerTick++; 		//tick it
    5d94:	4b0a      	ldr	r3, [pc, #40]	; (5dc0 <TI1_OnInterrupt+0x30>)
    5d96:	881b      	ldrh	r3, [r3, #0]
    5d98:	b29b      	uxth	r3, r3
    5d9a:	3301      	adds	r3, #1
    5d9c:	b29a      	uxth	r2, r3
    5d9e:	4b08      	ldr	r3, [pc, #32]	; (5dc0 <TI1_OnInterrupt+0x30>)
    5da0:	801a      	strh	r2, [r3, #0]
	wTimerTick2++; 		//tick it
    5da2:	4b08      	ldr	r3, [pc, #32]	; (5dc4 <TI1_OnInterrupt+0x34>)
    5da4:	881b      	ldrh	r3, [r3, #0]
    5da6:	b29b      	uxth	r3, r3
    5da8:	3301      	adds	r3, #1
    5daa:	b29a      	uxth	r2, r3
    5dac:	4b05      	ldr	r3, [pc, #20]	; (5dc4 <TI1_OnInterrupt+0x34>)
    5dae:	801a      	strh	r2, [r3, #0]
	millisTick++;
    5db0:	4b05      	ldr	r3, [pc, #20]	; (5dc8 <TI1_OnInterrupt+0x38>)
    5db2:	681b      	ldr	r3, [r3, #0]
    5db4:	1c5a      	adds	r2, r3, #1
    5db6:	4b04      	ldr	r3, [pc, #16]	; (5dc8 <TI1_OnInterrupt+0x38>)
    5db8:	601a      	str	r2, [r3, #0]
}
    5dba:	46bd      	mov	sp, r7
    5dbc:	bd80      	pop	{r7, pc}
    5dbe:	46c0      	nop			; (mov r8, r8)
    5dc0:	20000ba8 	.word	0x20000ba8
    5dc4:	20000bb0 	.word	0x20000bb0
    5dc8:	20000bac 	.word	0x20000bac

00005dcc <LatchCurrent_OnInterrupt>:
**         UserDataPtr     - Pointer to RTOS device
**                           data structure pointer.
*/
/* ===================================================================*/
void LatchCurrent_OnInterrupt(LDD_TUserData *UserDataPtr)
{
    5dcc:	b580      	push	{r7, lr}
    5dce:	b082      	sub	sp, #8
    5dd0:	af00      	add	r7, sp, #0
    5dd2:	6078      	str	r0, [r7, #4]
  /* Write your code here ... */
	Latchhappened = TRUE;
    5dd4:	4b02      	ldr	r3, [pc, #8]	; (5de0 <LatchCurrent_OnInterrupt+0x14>)
    5dd6:	2201      	movs	r2, #1
    5dd8:	701a      	strb	r2, [r3, #0]
}
    5dda:	46bd      	mov	sp, r7
    5ddc:	b002      	add	sp, #8
    5dde:	bd80      	pop	{r7, pc}
    5de0:	20000ba6 	.word	0x20000ba6

00005de4 <UartWakeInt_OnInterrupt>:
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/
void UartWakeInt_OnInterrupt(void)
{
    5de4:	b580      	push	{r7, lr}
    5de6:	af00      	add	r7, sp, #0
  /* Write your code here ... */
	GVbWakeBLE = TRUE;
    5de8:	4b02      	ldr	r3, [pc, #8]	; (5df4 <UartWakeInt_OnInterrupt+0x10>)
    5dea:	2201      	movs	r2, #1
    5dec:	701a      	strb	r2, [r3, #0]
	
}
    5dee:	46bd      	mov	sp, r7
    5df0:	bd80      	pop	{r7, pc}
    5df2:	46c0      	nop			; (mov r8, r8)
    5df4:	20000ba0 	.word	0x20000ba0

00005df8 <MessageWriter_writeString>:
#include "MessageBuffer.h"
#include "MessageWriter.h"
#include "BlynkRpcUartFraming.h"

size_t MessageWriter_writeString(const char* value) {
    5df8:	b580      	push	{r7, lr}
    5dfa:	b084      	sub	sp, #16
    5dfc:	af00      	add	r7, sp, #0
    5dfe:	6078      	str	r0, [r7, #4]
    if (!value) {
    5e00:	687b      	ldr	r3, [r7, #4]
    5e02:	2b00      	cmp	r3, #0
    5e04:	d106      	bne.n	5e14 <MessageWriter_writeString+0x1c>
        return MessageWriter_write("", 1);
    5e06:	4b0c      	ldr	r3, [pc, #48]	; (5e38 <MessageWriter_writeString+0x40>)
    5e08:	1c18      	adds	r0, r3, #0
    5e0a:	2101      	movs	r1, #1
    5e0c:	f000 f886 	bl	5f1c <MessageWriter_write>
    5e10:	1c03      	adds	r3, r0, #0
    5e12:	e00d      	b.n	5e30 <MessageWriter_writeString+0x38>
    }
    size_t length = strlen(value) + 1;
    5e14:	687b      	ldr	r3, [r7, #4]
    5e16:	1c18      	adds	r0, r3, #0
    5e18:	f001 f920 	bl	705c <strlen>
    5e1c:	1c03      	adds	r3, r0, #0
    5e1e:	3301      	adds	r3, #1
    5e20:	60fb      	str	r3, [r7, #12]
    return MessageWriter_write(value, length);
    5e22:	687a      	ldr	r2, [r7, #4]
    5e24:	68fb      	ldr	r3, [r7, #12]
    5e26:	1c10      	adds	r0, r2, #0
    5e28:	1c19      	adds	r1, r3, #0
    5e2a:	f000 f877 	bl	5f1c <MessageWriter_write>
    5e2e:	1c03      	adds	r3, r0, #0
}
    5e30:	1c18      	adds	r0, r3, #0
    5e32:	46bd      	mov	sp, r7
    5e34:	b004      	add	sp, #16
    5e36:	bd80      	pop	{r7, pc}
    5e38:	00008718 	.word	0x00008718

00005e3c <MessageWriter_writeBinary>:

size_t MessageWriter_writeBinary(buffer_t value) {
    5e3c:	b580      	push	{r7, lr}
    5e3e:	b084      	sub	sp, #16
    5e40:	af00      	add	r7, sp, #0
    5e42:	1c3b      	adds	r3, r7, #0
    5e44:	6018      	str	r0, [r3, #0]
    5e46:	6059      	str	r1, [r3, #4]
    size_t len = sizeof(uint16_t) + value.length;
    5e48:	1c3b      	adds	r3, r7, #0
    5e4a:	685b      	ldr	r3, [r3, #4]
    5e4c:	3302      	adds	r3, #2
    5e4e:	60fb      	str	r3, [r7, #12]
    /*if (MessageBuffer_availableToWrite(self) < len) {
        self->_error = true;
        return 0;
    }*/
    MessageWriter_writeUInt16(value.length);
    5e50:	1c3b      	adds	r3, r7, #0
    5e52:	685b      	ldr	r3, [r3, #4]
    5e54:	b29b      	uxth	r3, r3
    5e56:	1c18      	adds	r0, r3, #0
    5e58:	f000 f832 	bl	5ec0 <MessageWriter_writeUInt16>
    MessageWriter_write(value.data, value.length);
    5e5c:	1c3b      	adds	r3, r7, #0
    5e5e:	681a      	ldr	r2, [r3, #0]
    5e60:	1c3b      	adds	r3, r7, #0
    5e62:	685b      	ldr	r3, [r3, #4]
    5e64:	1c10      	adds	r0, r2, #0
    5e66:	1c19      	adds	r1, r3, #0
    5e68:	f000 f858 	bl	5f1c <MessageWriter_write>
    return len;
    5e6c:	68fb      	ldr	r3, [r7, #12]
}
    5e6e:	1c18      	adds	r0, r3, #0
    5e70:	46bd      	mov	sp, r7
    5e72:	b004      	add	sp, #16
    5e74:	bd80      	pop	{r7, pc}
    5e76:	46c0      	nop			; (mov r8, r8)

00005e78 <MessageWriter_writeBool>:

size_t MessageWriter_writeBool(bool value) {
    5e78:	b580      	push	{r7, lr}
    5e7a:	b082      	sub	sp, #8
    5e7c:	af00      	add	r7, sp, #0
    5e7e:	1c02      	adds	r2, r0, #0
    5e80:	1dfb      	adds	r3, r7, #7
    5e82:	701a      	strb	r2, [r3, #0]
    return MessageWriter_writeUInt8(value ? 1 : 0);
    5e84:	1dfb      	adds	r3, r7, #7
    5e86:	781b      	ldrb	r3, [r3, #0]
    5e88:	1e5a      	subs	r2, r3, #1
    5e8a:	4193      	sbcs	r3, r2
    5e8c:	b2db      	uxtb	r3, r3
    5e8e:	1c18      	adds	r0, r3, #0
    5e90:	f000 f806 	bl	5ea0 <MessageWriter_writeUInt8>
    5e94:	1c03      	adds	r3, r0, #0
}
    5e96:	1c18      	adds	r0, r3, #0
    5e98:	46bd      	mov	sp, r7
    5e9a:	b002      	add	sp, #8
    5e9c:	bd80      	pop	{r7, pc}
    5e9e:	46c0      	nop			; (mov r8, r8)

00005ea0 <MessageWriter_writeUInt8>:

size_t MessageWriter_writeInt64(const int64_t value) {
    return MessageWriter_write(&value, sizeof(int64_t));
}

size_t MessageWriter_writeUInt8(const uint8_t value) {
    5ea0:	b580      	push	{r7, lr}
    5ea2:	b082      	sub	sp, #8
    5ea4:	af00      	add	r7, sp, #0
    5ea6:	1c02      	adds	r2, r0, #0
    5ea8:	1dfb      	adds	r3, r7, #7
    5eaa:	701a      	strb	r2, [r3, #0]
    return MessageWriter_write(&value, sizeof(uint8_t));
    5eac:	1dfb      	adds	r3, r7, #7
    5eae:	1c18      	adds	r0, r3, #0
    5eb0:	2101      	movs	r1, #1
    5eb2:	f000 f833 	bl	5f1c <MessageWriter_write>
    5eb6:	1c03      	adds	r3, r0, #0
}
    5eb8:	1c18      	adds	r0, r3, #0
    5eba:	46bd      	mov	sp, r7
    5ebc:	b002      	add	sp, #8
    5ebe:	bd80      	pop	{r7, pc}

00005ec0 <MessageWriter_writeUInt16>:

size_t MessageWriter_writeUInt16(const uint16_t value) {
    5ec0:	b580      	push	{r7, lr}
    5ec2:	b082      	sub	sp, #8
    5ec4:	af00      	add	r7, sp, #0
    5ec6:	1c02      	adds	r2, r0, #0
    5ec8:	1dbb      	adds	r3, r7, #6
    5eca:	801a      	strh	r2, [r3, #0]
    return MessageWriter_write(&value, sizeof(uint16_t));
    5ecc:	1dbb      	adds	r3, r7, #6
    5ece:	1c18      	adds	r0, r3, #0
    5ed0:	2102      	movs	r1, #2
    5ed2:	f000 f823 	bl	5f1c <MessageWriter_write>
    5ed6:	1c03      	adds	r3, r0, #0
}
    5ed8:	1c18      	adds	r0, r3, #0
    5eda:	46bd      	mov	sp, r7
    5edc:	b002      	add	sp, #8
    5ede:	bd80      	pop	{r7, pc}

00005ee0 <MessageWriter_writeUInt32>:

size_t MessageWriter_writeUInt32(const uint32_t value) {
    5ee0:	b580      	push	{r7, lr}
    5ee2:	b082      	sub	sp, #8
    5ee4:	af00      	add	r7, sp, #0
    5ee6:	6078      	str	r0, [r7, #4]
    return MessageWriter_write(&value, sizeof(uint32_t));
    5ee8:	1d3b      	adds	r3, r7, #4
    5eea:	1c18      	adds	r0, r3, #0
    5eec:	2104      	movs	r1, #4
    5eee:	f000 f815 	bl	5f1c <MessageWriter_write>
    5ef2:	1c03      	adds	r3, r0, #0
}
    5ef4:	1c18      	adds	r0, r3, #0
    5ef6:	46bd      	mov	sp, r7
    5ef8:	b002      	add	sp, #8
    5efa:	bd80      	pop	{r7, pc}

00005efc <MessageWriter_begin>:

size_t MessageWriter_writeFloat(const float value) {
    return MessageWriter_write(&value, sizeof(float));
}

size_t MessageWriter_begin(void) {
    5efc:	b580      	push	{r7, lr}
    5efe:	af00      	add	r7, sp, #0
    RpcUartFraming_beginPacket();
    5f00:	f000 fad2 	bl	64a8 <RpcUartFraming_beginPacket>
    return 1;
    5f04:	2301      	movs	r3, #1
}
    5f06:	1c18      	adds	r0, r3, #0
    5f08:	46bd      	mov	sp, r7
    5f0a:	bd80      	pop	{r7, pc}

00005f0c <MessageWriter_end>:
size_t MessageWriter_end(void) {
    5f0c:	b580      	push	{r7, lr}
    5f0e:	af00      	add	r7, sp, #0
    RpcUartFraming_endPacket();
    5f10:	f000 fad8 	bl	64c4 <RpcUartFraming_endPacket>
    return 1;
    5f14:	2301      	movs	r3, #1
}
    5f16:	1c18      	adds	r0, r3, #0
    5f18:	46bd      	mov	sp, r7
    5f1a:	bd80      	pop	{r7, pc}

00005f1c <MessageWriter_write>:

size_t MessageWriter_write(const void* data, size_t size) {
    5f1c:	b580      	push	{r7, lr}
    5f1e:	b082      	sub	sp, #8
    5f20:	af00      	add	r7, sp, #0
    5f22:	6078      	str	r0, [r7, #4]
    5f24:	6039      	str	r1, [r7, #0]
        return 0;
    }
    memcpy(self->_buffer + self->_wpos, data, size);
    self->_wpos += size;*/

    return RpcUartFraming_write((const uint8_t*)data, size);
    5f26:	687a      	ldr	r2, [r7, #4]
    5f28:	683b      	ldr	r3, [r7, #0]
    5f2a:	1c10      	adds	r0, r2, #0
    5f2c:	1c19      	adds	r1, r3, #0
    5f2e:	f000 fb37 	bl	65a0 <RpcUartFraming_write>
    5f32:	1c03      	adds	r3, r0, #0
}
    5f34:	1c18      	adds	r0, r3, #0
    5f36:	46bd      	mov	sp, r7
    5f38:	b002      	add	sp, #8
    5f3a:	bd80      	pop	{r7, pc}

00005f3c <MessageBuffer_init>:
#include "MessageBuffer.h"

void MessageBuffer_init(MessageBuffer* self, uint8_t* buffer, size_t size) {
    5f3c:	b580      	push	{r7, lr}
    5f3e:	b084      	sub	sp, #16
    5f40:	af00      	add	r7, sp, #0
    5f42:	60f8      	str	r0, [r7, #12]
    5f44:	60b9      	str	r1, [r7, #8]
    5f46:	607a      	str	r2, [r7, #4]
    self->_buffer = buffer;
    5f48:	68fb      	ldr	r3, [r7, #12]
    5f4a:	68ba      	ldr	r2, [r7, #8]
    5f4c:	601a      	str	r2, [r3, #0]
    self->_size = size;
    5f4e:	68fb      	ldr	r3, [r7, #12]
    5f50:	687a      	ldr	r2, [r7, #4]
    5f52:	605a      	str	r2, [r3, #4]
    MessageBuffer_reset(self);
    5f54:	68fb      	ldr	r3, [r7, #12]
    5f56:	1c18      	adds	r0, r3, #0
    5f58:	f000 f812 	bl	5f80 <MessageBuffer_reset>
}
    5f5c:	46bd      	mov	sp, r7
    5f5e:	b004      	add	sp, #16
    5f60:	bd80      	pop	{r7, pc}
    5f62:	46c0      	nop			; (mov r8, r8)

00005f64 <MessageBuffer_rewind>:

void MessageBuffer_rewind(MessageBuffer* self) {
    5f64:	b580      	push	{r7, lr}
    5f66:	b082      	sub	sp, #8
    5f68:	af00      	add	r7, sp, #0
    5f6a:	6078      	str	r0, [r7, #4]
    self->_rpos = 0;
    5f6c:	687b      	ldr	r3, [r7, #4]
    5f6e:	2200      	movs	r2, #0
    5f70:	60da      	str	r2, [r3, #12]
    self->_error = false;
    5f72:	687b      	ldr	r3, [r7, #4]
    5f74:	2200      	movs	r2, #0
    5f76:	741a      	strb	r2, [r3, #16]
}
    5f78:	46bd      	mov	sp, r7
    5f7a:	b002      	add	sp, #8
    5f7c:	bd80      	pop	{r7, pc}
    5f7e:	46c0      	nop			; (mov r8, r8)

00005f80 <MessageBuffer_reset>:

void MessageBuffer_reset(MessageBuffer* self) {
    5f80:	b580      	push	{r7, lr}
    5f82:	b082      	sub	sp, #8
    5f84:	af00      	add	r7, sp, #0
    5f86:	6078      	str	r0, [r7, #4]
    self->_wpos = self->_rpos = 0;
    5f88:	687b      	ldr	r3, [r7, #4]
    5f8a:	2200      	movs	r2, #0
    5f8c:	60da      	str	r2, [r3, #12]
    5f8e:	687b      	ldr	r3, [r7, #4]
    5f90:	68da      	ldr	r2, [r3, #12]
    5f92:	687b      	ldr	r3, [r7, #4]
    5f94:	609a      	str	r2, [r3, #8]
    self->_error = false;
    5f96:	687b      	ldr	r3, [r7, #4]
    5f98:	2200      	movs	r2, #0
    5f9a:	741a      	strb	r2, [r3, #16]
}
    5f9c:	46bd      	mov	sp, r7
    5f9e:	b002      	add	sp, #8
    5fa0:	bd80      	pop	{r7, pc}
    5fa2:	46c0      	nop			; (mov r8, r8)

00005fa4 <MessageBuffer_setBuffer>:

void MessageBuffer_setBuffer(MessageBuffer* self, uint8_t* buffer, size_t size) {
    5fa4:	b580      	push	{r7, lr}
    5fa6:	b084      	sub	sp, #16
    5fa8:	af00      	add	r7, sp, #0
    5faa:	60f8      	str	r0, [r7, #12]
    5fac:	60b9      	str	r1, [r7, #8]
    5fae:	607a      	str	r2, [r7, #4]
    self->_buffer = buffer;
    5fb0:	68fb      	ldr	r3, [r7, #12]
    5fb2:	68ba      	ldr	r2, [r7, #8]
    5fb4:	601a      	str	r2, [r3, #0]
    self->_size = size;
    5fb6:	68fb      	ldr	r3, [r7, #12]
    5fb8:	687a      	ldr	r2, [r7, #4]
    5fba:	605a      	str	r2, [r3, #4]
    MessageBuffer_reset(self);
    5fbc:	68fb      	ldr	r3, [r7, #12]
    5fbe:	1c18      	adds	r0, r3, #0
    5fc0:	f7ff ffde 	bl	5f80 <MessageBuffer_reset>
}
    5fc4:	46bd      	mov	sp, r7
    5fc6:	b004      	add	sp, #16
    5fc8:	bd80      	pop	{r7, pc}
    5fca:	46c0      	nop			; (mov r8, r8)

00005fcc <MessageBuffer_setWritten>:

size_t MessageBuffer_getWritten(MessageBuffer* self) {
    return self->_wpos;
}

void MessageBuffer_setWritten(MessageBuffer* self, size_t s) {
    5fcc:	b580      	push	{r7, lr}
    5fce:	b082      	sub	sp, #8
    5fd0:	af00      	add	r7, sp, #0
    5fd2:	6078      	str	r0, [r7, #4]
    5fd4:	6039      	str	r1, [r7, #0]
    self->_wpos = s;
    5fd6:	687b      	ldr	r3, [r7, #4]
    5fd8:	683a      	ldr	r2, [r7, #0]
    5fda:	609a      	str	r2, [r3, #8]
}
    5fdc:	46bd      	mov	sp, r7
    5fde:	b002      	add	sp, #8
    5fe0:	bd80      	pop	{r7, pc}
    5fe2:	46c0      	nop			; (mov r8, r8)

00005fe4 <MessageBuffer_availableToRead>:

size_t MessageBuffer_availableToRead(MessageBuffer* self) {
    5fe4:	b580      	push	{r7, lr}
    5fe6:	b082      	sub	sp, #8
    5fe8:	af00      	add	r7, sp, #0
    5fea:	6078      	str	r0, [r7, #4]
    return self->_wpos - self->_rpos;
    5fec:	687b      	ldr	r3, [r7, #4]
    5fee:	689a      	ldr	r2, [r3, #8]
    5ff0:	687b      	ldr	r3, [r7, #4]
    5ff2:	68db      	ldr	r3, [r3, #12]
    5ff4:	1ad3      	subs	r3, r2, r3
}
    5ff6:	1c18      	adds	r0, r3, #0
    5ff8:	46bd      	mov	sp, r7
    5ffa:	b002      	add	sp, #8
    5ffc:	bd80      	pop	{r7, pc}
    5ffe:	46c0      	nop			; (mov r8, r8)

00006000 <MessageBuffer_getError>:

size_t MessageBuffer_availableToWrite(MessageBuffer* self) {
    return self->_size - self->_wpos;
}

bool MessageBuffer_getError(MessageBuffer* self) {
    6000:	b580      	push	{r7, lr}
    6002:	b082      	sub	sp, #8
    6004:	af00      	add	r7, sp, #0
    6006:	6078      	str	r0, [r7, #4]
    return self->_error;
    6008:	687b      	ldr	r3, [r7, #4]
    600a:	7c1b      	ldrb	r3, [r3, #16]
}
    600c:	1c18      	adds	r0, r3, #0
    600e:	46bd      	mov	sp, r7
    6010:	b002      	add	sp, #8
    6012:	bd80      	pop	{r7, pc}

00006014 <MessageBuffer_readString>:

size_t MessageBuffer_readString(MessageBuffer* self, const char** value) {
    6014:	b580      	push	{r7, lr}
    6016:	b084      	sub	sp, #16
    6018:	af00      	add	r7, sp, #0
    601a:	6078      	str	r0, [r7, #4]
    601c:	6039      	str	r1, [r7, #0]
    char* ptr = (char*)(self->_buffer + self->_rpos);
    601e:	687b      	ldr	r3, [r7, #4]
    6020:	681a      	ldr	r2, [r3, #0]
    6022:	687b      	ldr	r3, [r7, #4]
    6024:	68db      	ldr	r3, [r3, #12]
    6026:	18d3      	adds	r3, r2, r3
    6028:	60fb      	str	r3, [r7, #12]
    size_t len = strlen(ptr) + 1;
    602a:	68fb      	ldr	r3, [r7, #12]
    602c:	1c18      	adds	r0, r3, #0
    602e:	f001 f815 	bl	705c <strlen>
    6032:	1c03      	adds	r3, r0, #0
    6034:	3301      	adds	r3, #1
    6036:	60bb      	str	r3, [r7, #8]
    if (MessageBuffer_availableToRead(self) < len) {
    6038:	687b      	ldr	r3, [r7, #4]
    603a:	1c18      	adds	r0, r3, #0
    603c:	f7ff ffd2 	bl	5fe4 <MessageBuffer_availableToRead>
    6040:	1c02      	adds	r2, r0, #0
    6042:	68bb      	ldr	r3, [r7, #8]
    6044:	429a      	cmp	r2, r3
    6046:	d20a      	bcs.n	605e <MessageBuffer_readString+0x4a>
        if (value) {
    6048:	683b      	ldr	r3, [r7, #0]
    604a:	2b00      	cmp	r3, #0
    604c:	d002      	beq.n	6054 <MessageBuffer_readString+0x40>
            *value = "";
    604e:	683b      	ldr	r3, [r7, #0]
    6050:	4a0b      	ldr	r2, [pc, #44]	; (6080 <MessageBuffer_readString+0x6c>)
    6052:	601a      	str	r2, [r3, #0]
        }
        self->_error = true;
    6054:	687b      	ldr	r3, [r7, #4]
    6056:	2201      	movs	r2, #1
    6058:	741a      	strb	r2, [r3, #16]
        return 0;
    605a:	2300      	movs	r3, #0
    605c:	e00c      	b.n	6078 <MessageBuffer_readString+0x64>
    }
    if (value) {
    605e:	683b      	ldr	r3, [r7, #0]
    6060:	2b00      	cmp	r3, #0
    6062:	d002      	beq.n	606a <MessageBuffer_readString+0x56>
        *value = ptr;
    6064:	683b      	ldr	r3, [r7, #0]
    6066:	68fa      	ldr	r2, [r7, #12]
    6068:	601a      	str	r2, [r3, #0]
    }
    self->_rpos += len;
    606a:	687b      	ldr	r3, [r7, #4]
    606c:	68da      	ldr	r2, [r3, #12]
    606e:	68bb      	ldr	r3, [r7, #8]
    6070:	18d2      	adds	r2, r2, r3
    6072:	687b      	ldr	r3, [r7, #4]
    6074:	60da      	str	r2, [r3, #12]
    return len;
    6076:	68bb      	ldr	r3, [r7, #8]
}
    6078:	1c18      	adds	r0, r3, #0
    607a:	46bd      	mov	sp, r7
    607c:	b004      	add	sp, #16
    607e:	bd80      	pop	{r7, pc}
    6080:	0000871c 	.word	0x0000871c

00006084 <MessageBuffer_readBinary>:

size_t MessageBuffer_readBinary(MessageBuffer* self, buffer_t* value) {
    6084:	b580      	push	{r7, lr}
    6086:	b084      	sub	sp, #16
    6088:	af00      	add	r7, sp, #0
    608a:	6078      	str	r0, [r7, #4]
    608c:	6039      	str	r1, [r7, #0]
    uint16_t len;
    if (!MessageBuffer_readUInt16(self, &len)) {
    608e:	687a      	ldr	r2, [r7, #4]
    6090:	1c3b      	adds	r3, r7, #0
    6092:	330e      	adds	r3, #14
    6094:	1c10      	adds	r0, r2, #0
    6096:	1c19      	adds	r1, r3, #0
    6098:	f000 f88a 	bl	61b0 <MessageBuffer_readUInt16>
    609c:	1c03      	adds	r3, r0, #0
    609e:	2b00      	cmp	r3, #0
    60a0:	d10a      	bne.n	60b8 <MessageBuffer_readBinary+0x34>
        if (value) {
    60a2:	683b      	ldr	r3, [r7, #0]
    60a4:	2b00      	cmp	r3, #0
    60a6:	d005      	beq.n	60b4 <MessageBuffer_readBinary+0x30>
            memset(value, 0, sizeof(buffer_t));
    60a8:	683b      	ldr	r3, [r7, #0]
    60aa:	1c18      	adds	r0, r3, #0
    60ac:	2100      	movs	r1, #0
    60ae:	2208      	movs	r2, #8
    60b0:	f000 ff7e 	bl	6fb0 <memset>
        }
        return 0;
    60b4:	2300      	movs	r3, #0
    60b6:	e00b      	b.n	60d0 <MessageBuffer_readBinary+0x4c>
    }
    return (sizeof(len) + MessageBuffer_readFixedBuffer(self, value, len));
    60b8:	1c3b      	adds	r3, r7, #0
    60ba:	330e      	adds	r3, #14
    60bc:	881b      	ldrh	r3, [r3, #0]
    60be:	6879      	ldr	r1, [r7, #4]
    60c0:	683a      	ldr	r2, [r7, #0]
    60c2:	1c08      	adds	r0, r1, #0
    60c4:	1c11      	adds	r1, r2, #0
    60c6:	1c1a      	adds	r2, r3, #0
    60c8:	f000 f806 	bl	60d8 <MessageBuffer_readFixedBuffer>
    60cc:	1c03      	adds	r3, r0, #0
    60ce:	3302      	adds	r3, #2
}
    60d0:	1c18      	adds	r0, r3, #0
    60d2:	46bd      	mov	sp, r7
    60d4:	b004      	add	sp, #16
    60d6:	bd80      	pop	{r7, pc}

000060d8 <MessageBuffer_readFixedBuffer>:

size_t MessageBuffer_readFixedBuffer(MessageBuffer* self, buffer_t* value, unsigned len) {
    60d8:	b580      	push	{r7, lr}
    60da:	b084      	sub	sp, #16
    60dc:	af00      	add	r7, sp, #0
    60de:	60f8      	str	r0, [r7, #12]
    60e0:	60b9      	str	r1, [r7, #8]
    60e2:	607a      	str	r2, [r7, #4]
    if (MessageBuffer_availableToRead(self) < len) {
    60e4:	68fb      	ldr	r3, [r7, #12]
    60e6:	1c18      	adds	r0, r3, #0
    60e8:	f7ff ff7c 	bl	5fe4 <MessageBuffer_availableToRead>
    60ec:	1c02      	adds	r2, r0, #0
    60ee:	687b      	ldr	r3, [r7, #4]
    60f0:	429a      	cmp	r2, r3
    60f2:	d20d      	bcs.n	6110 <MessageBuffer_readFixedBuffer+0x38>
        if (value) {
    60f4:	68bb      	ldr	r3, [r7, #8]
    60f6:	2b00      	cmp	r3, #0
    60f8:	d005      	beq.n	6106 <MessageBuffer_readFixedBuffer+0x2e>
            memset(value, 0, sizeof(buffer_t));
    60fa:	68bb      	ldr	r3, [r7, #8]
    60fc:	1c18      	adds	r0, r3, #0
    60fe:	2100      	movs	r1, #0
    6100:	2208      	movs	r2, #8
    6102:	f000 ff55 	bl	6fb0 <memset>
        }
        self->_error = true;
    6106:	68fb      	ldr	r3, [r7, #12]
    6108:	2201      	movs	r2, #1
    610a:	741a      	strb	r2, [r3, #16]
        return 0;
    610c:	2300      	movs	r3, #0
    610e:	e013      	b.n	6138 <MessageBuffer_readFixedBuffer+0x60>
    }
    if (value) {
    6110:	68bb      	ldr	r3, [r7, #8]
    6112:	2b00      	cmp	r3, #0
    6114:	d009      	beq.n	612a <MessageBuffer_readFixedBuffer+0x52>
        value->data = self->_buffer + self->_rpos;
    6116:	68fb      	ldr	r3, [r7, #12]
    6118:	681a      	ldr	r2, [r3, #0]
    611a:	68fb      	ldr	r3, [r7, #12]
    611c:	68db      	ldr	r3, [r3, #12]
    611e:	18d2      	adds	r2, r2, r3
    6120:	68bb      	ldr	r3, [r7, #8]
    6122:	601a      	str	r2, [r3, #0]
        value->length = len;
    6124:	68bb      	ldr	r3, [r7, #8]
    6126:	687a      	ldr	r2, [r7, #4]
    6128:	605a      	str	r2, [r3, #4]
    }
    self->_rpos += len;
    612a:	68fb      	ldr	r3, [r7, #12]
    612c:	68da      	ldr	r2, [r3, #12]
    612e:	687b      	ldr	r3, [r7, #4]
    6130:	18d2      	adds	r2, r2, r3
    6132:	68fb      	ldr	r3, [r7, #12]
    6134:	60da      	str	r2, [r3, #12]
    return len;
    6136:	687b      	ldr	r3, [r7, #4]
}
    6138:	1c18      	adds	r0, r3, #0
    613a:	46bd      	mov	sp, r7
    613c:	b004      	add	sp, #16
    613e:	bd80      	pop	{r7, pc}

00006140 <MessageBuffer_readBool>:

size_t MessageBuffer_readBool(MessageBuffer* self, bool* value) {
    6140:	b580      	push	{r7, lr}
    6142:	b084      	sub	sp, #16
    6144:	af00      	add	r7, sp, #0
    6146:	6078      	str	r0, [r7, #4]
    6148:	6039      	str	r1, [r7, #0]
    uint8_t raw_value;
    if (!MessageBuffer_readUInt8(self, &raw_value)) {
    614a:	687a      	ldr	r2, [r7, #4]
    614c:	1c3b      	adds	r3, r7, #0
    614e:	330f      	adds	r3, #15
    6150:	1c10      	adds	r0, r2, #0
    6152:	1c19      	adds	r1, r3, #0
    6154:	f000 f81a 	bl	618c <MessageBuffer_readUInt8>
    6158:	1c03      	adds	r3, r0, #0
    615a:	2b00      	cmp	r3, #0
    615c:	d107      	bne.n	616e <MessageBuffer_readBool+0x2e>
        if (value) {
    615e:	683b      	ldr	r3, [r7, #0]
    6160:	2b00      	cmp	r3, #0
    6162:	d002      	beq.n	616a <MessageBuffer_readBool+0x2a>
            *value = false;
    6164:	683b      	ldr	r3, [r7, #0]
    6166:	2200      	movs	r2, #0
    6168:	701a      	strb	r2, [r3, #0]
        }
        return 0;
    616a:	2300      	movs	r3, #0
    616c:	e009      	b.n	6182 <MessageBuffer_readBool+0x42>
    }
    *value = (raw_value != 0);
    616e:	1c3b      	adds	r3, r7, #0
    6170:	330f      	adds	r3, #15
    6172:	781b      	ldrb	r3, [r3, #0]
    6174:	1e5a      	subs	r2, r3, #1
    6176:	4193      	sbcs	r3, r2
    6178:	b2db      	uxtb	r3, r3
    617a:	1c1a      	adds	r2, r3, #0
    617c:	683b      	ldr	r3, [r7, #0]
    617e:	701a      	strb	r2, [r3, #0]
    return 1;
    6180:	2301      	movs	r3, #1
}
    6182:	1c18      	adds	r0, r3, #0
    6184:	46bd      	mov	sp, r7
    6186:	b004      	add	sp, #16
    6188:	bd80      	pop	{r7, pc}
    618a:	46c0      	nop			; (mov r8, r8)

0000618c <MessageBuffer_readUInt8>:

size_t MessageBuffer_readInt64(MessageBuffer* self, int64_t* value) {
    return MessageBuffer_read(self, value, sizeof(int64_t));
}

size_t MessageBuffer_readUInt8(MessageBuffer* self, uint8_t* value) {
    618c:	b580      	push	{r7, lr}
    618e:	b082      	sub	sp, #8
    6190:	af00      	add	r7, sp, #0
    6192:	6078      	str	r0, [r7, #4]
    6194:	6039      	str	r1, [r7, #0]
    return MessageBuffer_read(self, value, sizeof(uint8_t));
    6196:	687a      	ldr	r2, [r7, #4]
    6198:	683b      	ldr	r3, [r7, #0]
    619a:	1c10      	adds	r0, r2, #0
    619c:	1c19      	adds	r1, r3, #0
    619e:	2201      	movs	r2, #1
    61a0:	f000 f82a 	bl	61f8 <MessageBuffer_read>
    61a4:	1c03      	adds	r3, r0, #0
}
    61a6:	1c18      	adds	r0, r3, #0
    61a8:	46bd      	mov	sp, r7
    61aa:	b002      	add	sp, #8
    61ac:	bd80      	pop	{r7, pc}
    61ae:	46c0      	nop			; (mov r8, r8)

000061b0 <MessageBuffer_readUInt16>:

size_t MessageBuffer_readUInt16(MessageBuffer* self, uint16_t* value) {
    61b0:	b580      	push	{r7, lr}
    61b2:	b082      	sub	sp, #8
    61b4:	af00      	add	r7, sp, #0
    61b6:	6078      	str	r0, [r7, #4]
    61b8:	6039      	str	r1, [r7, #0]
    return MessageBuffer_read(self, value, sizeof(uint16_t));
    61ba:	687a      	ldr	r2, [r7, #4]
    61bc:	683b      	ldr	r3, [r7, #0]
    61be:	1c10      	adds	r0, r2, #0
    61c0:	1c19      	adds	r1, r3, #0
    61c2:	2202      	movs	r2, #2
    61c4:	f000 f818 	bl	61f8 <MessageBuffer_read>
    61c8:	1c03      	adds	r3, r0, #0
}
    61ca:	1c18      	adds	r0, r3, #0
    61cc:	46bd      	mov	sp, r7
    61ce:	b002      	add	sp, #8
    61d0:	bd80      	pop	{r7, pc}
    61d2:	46c0      	nop			; (mov r8, r8)

000061d4 <MessageBuffer_readUInt32>:

size_t MessageBuffer_readUInt32(MessageBuffer* self, uint32_t* value) {
    61d4:	b580      	push	{r7, lr}
    61d6:	b082      	sub	sp, #8
    61d8:	af00      	add	r7, sp, #0
    61da:	6078      	str	r0, [r7, #4]
    61dc:	6039      	str	r1, [r7, #0]
    return MessageBuffer_read(self, value, sizeof(uint32_t));
    61de:	687a      	ldr	r2, [r7, #4]
    61e0:	683b      	ldr	r3, [r7, #0]
    61e2:	1c10      	adds	r0, r2, #0
    61e4:	1c19      	adds	r1, r3, #0
    61e6:	2204      	movs	r2, #4
    61e8:	f000 f806 	bl	61f8 <MessageBuffer_read>
    61ec:	1c03      	adds	r3, r0, #0
}
    61ee:	1c18      	adds	r0, r3, #0
    61f0:	46bd      	mov	sp, r7
    61f2:	b002      	add	sp, #8
    61f4:	bd80      	pop	{r7, pc}
    61f6:	46c0      	nop			; (mov r8, r8)

000061f8 <MessageBuffer_read>:

size_t MessageBuffer_readFloat(MessageBuffer* self, float* value) {
    return MessageBuffer_read(self, value, sizeof(float));
}

size_t MessageBuffer_read(MessageBuffer* self, void* data, size_t size) {
    61f8:	b580      	push	{r7, lr}
    61fa:	b084      	sub	sp, #16
    61fc:	af00      	add	r7, sp, #0
    61fe:	60f8      	str	r0, [r7, #12]
    6200:	60b9      	str	r1, [r7, #8]
    6202:	607a      	str	r2, [r7, #4]
    if (MessageBuffer_availableToRead(self) < size) {
    6204:	68fb      	ldr	r3, [r7, #12]
    6206:	1c18      	adds	r0, r3, #0
    6208:	f7ff feec 	bl	5fe4 <MessageBuffer_availableToRead>
    620c:	1c02      	adds	r2, r0, #0
    620e:	687b      	ldr	r3, [r7, #4]
    6210:	429a      	cmp	r2, r3
    6212:	d20b      	bcs.n	622c <MessageBuffer_read+0x34>
        memset(data, 0, size);
    6214:	68ba      	ldr	r2, [r7, #8]
    6216:	687b      	ldr	r3, [r7, #4]
    6218:	1c10      	adds	r0, r2, #0
    621a:	2100      	movs	r1, #0
    621c:	1c1a      	adds	r2, r3, #0
    621e:	f000 fec7 	bl	6fb0 <memset>
        self->_error = true;
    6222:	68fb      	ldr	r3, [r7, #12]
    6224:	2201      	movs	r2, #1
    6226:	741a      	strb	r2, [r3, #16]
        return 0;
    6228:	2300      	movs	r3, #0
    622a:	e015      	b.n	6258 <MessageBuffer_read+0x60>
    }
    if (data) {
    622c:	68bb      	ldr	r3, [r7, #8]
    622e:	2b00      	cmp	r3, #0
    6230:	d00b      	beq.n	624a <MessageBuffer_read+0x52>
        memcpy(data, self->_buffer + self->_rpos, size);
    6232:	68fb      	ldr	r3, [r7, #12]
    6234:	681a      	ldr	r2, [r3, #0]
    6236:	68fb      	ldr	r3, [r7, #12]
    6238:	68db      	ldr	r3, [r3, #12]
    623a:	18d2      	adds	r2, r2, r3
    623c:	68b9      	ldr	r1, [r7, #8]
    623e:	687b      	ldr	r3, [r7, #4]
    6240:	1c08      	adds	r0, r1, #0
    6242:	1c11      	adds	r1, r2, #0
    6244:	1c1a      	adds	r2, r3, #0
    6246:	f000 fef8 	bl	703a <memcpy>
    }
    self->_rpos += size;
    624a:	68fb      	ldr	r3, [r7, #12]
    624c:	68da      	ldr	r2, [r3, #12]
    624e:	687b      	ldr	r3, [r7, #4]
    6250:	18d2      	adds	r2, r2, r3
    6252:	68fb      	ldr	r3, [r7, #12]
    6254:	60da      	str	r2, [r3, #12]
    return size;
    6256:	687b      	ldr	r3, [r7, #4]
}
    6258:	1c18      	adds	r0, r3, #0
    625a:	46bd      	mov	sp, r7
    625c:	b004      	add	sp, #16
    625e:	bd80      	pop	{r7, pc}

00006260 <rpc_crc8_reset>:
#ifdef __cplusplus
extern "C" {
#endif

static inline
void rpc_crc8_reset(uint8_t* crc) {
    6260:	b580      	push	{r7, lr}
    6262:	b082      	sub	sp, #8
    6264:	af00      	add	r7, sp, #0
    6266:	6078      	str	r0, [r7, #4]
  *crc = 0;
    6268:	687b      	ldr	r3, [r7, #4]
    626a:	2200      	movs	r2, #0
    626c:	701a      	strb	r2, [r3, #0]
}
    626e:	46bd      	mov	sp, r7
    6270:	b002      	add	sp, #8
    6272:	bd80      	pop	{r7, pc}

00006274 <rpc_crc8_update>:

static inline
void rpc_crc8_update(uint8_t* crc, uint8_t data) {
    6274:	b580      	push	{r7, lr}
    6276:	b082      	sub	sp, #8
    6278:	af00      	add	r7, sp, #0
    627a:	6078      	str	r0, [r7, #4]
    627c:	1c0a      	adds	r2, r1, #0
    627e:	1cfb      	adds	r3, r7, #3
    6280:	701a      	strb	r2, [r3, #0]
    b = (b << 1) ^ ((b & 0x80) ? 0x07 : 0);
  }
  *crc = b;
#else
  extern const uint8_t RPC_CRC8_TABLE[256];
  *crc = RPC_CRC8_TABLE[*crc ^ data];
    6282:	687b      	ldr	r3, [r7, #4]
    6284:	781a      	ldrb	r2, [r3, #0]
    6286:	1cfb      	adds	r3, r7, #3
    6288:	781b      	ldrb	r3, [r3, #0]
    628a:	4053      	eors	r3, r2
    628c:	b2db      	uxtb	r3, r3
    628e:	4a03      	ldr	r2, [pc, #12]	; (629c <rpc_crc8_update+0x28>)
    6290:	5cd2      	ldrb	r2, [r2, r3]
    6292:	687b      	ldr	r3, [r7, #4]
    6294:	701a      	strb	r2, [r3, #0]
#endif
}
    6296:	46bd      	mov	sp, r7
    6298:	b002      	add	sp, #8
    629a:	bd80      	pop	{r7, pc}
    629c:	000087fc 	.word	0x000087fc

000062a0 <RpcUartFraming_init>:
  bool      escapeXonXoff;
} RpcUartFraming;

static RpcUartFraming _self;

void RpcUartFraming_init(void) {
    62a0:	b580      	push	{r7, lr}
    62a2:	af00      	add	r7, sp, #0
  memset(&_self, 0, sizeof(_self));
    62a4:	4b07      	ldr	r3, [pc, #28]	; (62c4 <RpcUartFraming_init+0x24>)
    62a6:	1c18      	adds	r0, r3, #0
    62a8:	2100      	movs	r1, #0
    62aa:	2227      	movs	r2, #39	; 0x27
    62ac:	f000 fe80 	bl	6fb0 <memset>
  _self.state = STATE_BEG;
    62b0:	4a04      	ldr	r2, [pc, #16]	; (62c4 <RpcUartFraming_init+0x24>)
    62b2:	2323      	movs	r3, #35	; 0x23
    62b4:	2100      	movs	r1, #0
    62b6:	54d1      	strb	r1, [r2, r3]
  _self.escapeXonXoff = true;
    62b8:	4a02      	ldr	r2, [pc, #8]	; (62c4 <RpcUartFraming_init+0x24>)
    62ba:	2326      	movs	r3, #38	; 0x26
    62bc:	2101      	movs	r1, #1
    62be:	54d1      	strb	r1, [r2, r3]
}
    62c0:	46bd      	mov	sp, r7
    62c2:	bd80      	pop	{r7, pc}
    62c4:	20000290 	.word	0x20000290

000062c8 <RpcUartFraming_hasPacketData>:

static
bool RpcUartFraming_hasPacketData(void) {
    62c8:	b580      	push	{r7, lr}
    62ca:	af00      	add	r7, sp, #0
  return _self.buffer.count > 1;
    62cc:	4a05      	ldr	r2, [pc, #20]	; (62e4 <RpcUartFraming_hasPacketData+0x1c>)
    62ce:	2322      	movs	r3, #34	; 0x22
    62d0:	5cd3      	ldrb	r3, [r2, r3]
    62d2:	2201      	movs	r2, #1
    62d4:	429a      	cmp	r2, r3
    62d6:	419b      	sbcs	r3, r3
    62d8:	425b      	negs	r3, r3
    62da:	b2db      	uxtb	r3, r3
}
    62dc:	1c18      	adds	r0, r3, #0
    62de:	46bd      	mov	sp, r7
    62e0:	bd80      	pop	{r7, pc}
    62e2:	46c0      	nop			; (mov r8, r8)
    62e4:	20000290 	.word	0x20000290

000062e8 <RpcUartFraming_processInput>:

static
void RpcUartFraming_processInput(void) {
    62e8:	b580      	push	{r7, lr}
    62ea:	b082      	sub	sp, #8
    62ec:	af00      	add	r7, sp, #0
  if (_self.state == STATE_END && _self.buffer.count > 0) { return; }
    62ee:	4a4f      	ldr	r2, [pc, #316]	; (642c <RpcUartFraming_processInput+0x144>)
    62f0:	2323      	movs	r3, #35	; 0x23
    62f2:	5cd3      	ldrb	r3, [r2, r3]
    62f4:	2b03      	cmp	r3, #3
    62f6:	d000      	beq.n	62fa <RpcUartFraming_processInput+0x12>
    62f8:	e084      	b.n	6404 <RpcUartFraming_processInput+0x11c>
    62fa:	4a4c      	ldr	r2, [pc, #304]	; (642c <RpcUartFraming_processInput+0x144>)
    62fc:	2322      	movs	r3, #34	; 0x22
    62fe:	5cd3      	ldrb	r3, [r2, r3]
    6300:	2b00      	cmp	r3, #0
    6302:	d100      	bne.n	6306 <RpcUartFraming_processInput+0x1e>
    6304:	e07e      	b.n	6404 <RpcUartFraming_processInput+0x11c>
    6306:	e08d      	b.n	6424 <RpcUartFraming_processInput+0x13c>

  while (rpc_uart_available() && _self.buffer.count < sizeof(_self.buffer.data)) {
    uint8_t data = rpc_uart_read();
    6308:	f7ff fbac 	bl	5a64 <rpc_uart_read>
    630c:	1c02      	adds	r2, r0, #0
    630e:	1dfb      	adds	r3, r7, #7
    6310:	701a      	strb	r2, [r3, #0]
    switch (_self.state) {
    6312:	4a46      	ldr	r2, [pc, #280]	; (642c <RpcUartFraming_processInput+0x144>)
    6314:	2323      	movs	r3, #35	; 0x23
    6316:	5cd3      	ldrb	r3, [r2, r3]
    6318:	2b01      	cmp	r3, #1
    631a:	d011      	beq.n	6340 <RpcUartFraming_processInput+0x58>
    631c:	dc02      	bgt.n	6324 <RpcUartFraming_processInput+0x3c>
    631e:	2b00      	cmp	r3, #0
    6320:	d005      	beq.n	632e <RpcUartFraming_processInput+0x46>
    6322:	e074      	b.n	640e <RpcUartFraming_processInput+0x126>
    6324:	2b02      	cmp	r3, #2
    6326:	d03c      	beq.n	63a2 <RpcUartFraming_processInput+0xba>
    6328:	2b03      	cmp	r3, #3
    632a:	d062      	beq.n	63f2 <RpcUartFraming_processInput+0x10a>
    632c:	e06f      	b.n	640e <RpcUartFraming_processInput+0x126>
      case STATE_BEG:
        if (data == BEG) {
    632e:	1dfb      	adds	r3, r7, #7
    6330:	781b      	ldrb	r3, [r3, #0]
    6332:	2baa      	cmp	r3, #170	; 0xaa
    6334:	d168      	bne.n	6408 <RpcUartFraming_processInput+0x120>
          _self.state = STATE_DATA;
    6336:	4a3d      	ldr	r2, [pc, #244]	; (642c <RpcUartFraming_processInput+0x144>)
    6338:	2323      	movs	r3, #35	; 0x23
    633a:	2101      	movs	r1, #1
    633c:	54d1      	strb	r1, [r2, r3]
        }
        break;
    633e:	e063      	b.n	6408 <RpcUartFraming_processInput+0x120>
      case STATE_DATA:
        if (data == ESC) {
    6340:	1dfb      	adds	r3, r7, #7
    6342:	781b      	ldrb	r3, [r3, #0]
    6344:	2bcc      	cmp	r3, #204	; 0xcc
    6346:	d104      	bne.n	6352 <RpcUartFraming_processInput+0x6a>
          _self.state = STATE_ESC;
    6348:	4a38      	ldr	r2, [pc, #224]	; (642c <RpcUartFraming_processInput+0x144>)
    634a:	2323      	movs	r3, #35	; 0x23
    634c:	2102      	movs	r1, #2
    634e:	54d1      	strb	r1, [r2, r3]
        } else {
          _self.buffer.data[_self.buffer.write++] = data;
          _self.buffer.write %= sizeof(_self.buffer.data);
          _self.buffer.count++;
        }
        break;
    6350:	e05d      	b.n	640e <RpcUartFraming_processInput+0x126>
        }
        break;
      case STATE_DATA:
        if (data == ESC) {
          _self.state = STATE_ESC;
        } else if (data == END) {
    6352:	1dfb      	adds	r3, r7, #7
    6354:	781b      	ldrb	r3, [r3, #0]
    6356:	2bbb      	cmp	r3, #187	; 0xbb
    6358:	d104      	bne.n	6364 <RpcUartFraming_processInput+0x7c>
          _self.state = STATE_END;
    635a:	4a34      	ldr	r2, [pc, #208]	; (642c <RpcUartFraming_processInput+0x144>)
    635c:	2323      	movs	r3, #35	; 0x23
    635e:	2103      	movs	r1, #3
    6360:	54d1      	strb	r1, [r2, r3]
          return;
    6362:	e05f      	b.n	6424 <RpcUartFraming_processInput+0x13c>
        } else {
          _self.buffer.data[_self.buffer.write++] = data;
    6364:	4a31      	ldr	r2, [pc, #196]	; (642c <RpcUartFraming_processInput+0x144>)
    6366:	2321      	movs	r3, #33	; 0x21
    6368:	5cd3      	ldrb	r3, [r2, r3]
    636a:	1c1a      	adds	r2, r3, #0
    636c:	492f      	ldr	r1, [pc, #188]	; (642c <RpcUartFraming_processInput+0x144>)
    636e:	1df8      	adds	r0, r7, #7
    6370:	7800      	ldrb	r0, [r0, #0]
    6372:	5488      	strb	r0, [r1, r2]
    6374:	3301      	adds	r3, #1
    6376:	b2d9      	uxtb	r1, r3
    6378:	4a2c      	ldr	r2, [pc, #176]	; (642c <RpcUartFraming_processInput+0x144>)
    637a:	2321      	movs	r3, #33	; 0x21
    637c:	54d1      	strb	r1, [r2, r3]
          _self.buffer.write %= sizeof(_self.buffer.data);
    637e:	4a2b      	ldr	r2, [pc, #172]	; (642c <RpcUartFraming_processInput+0x144>)
    6380:	2321      	movs	r3, #33	; 0x21
    6382:	5cd2      	ldrb	r2, [r2, r3]
    6384:	231f      	movs	r3, #31
    6386:	4013      	ands	r3, r2
    6388:	b2d9      	uxtb	r1, r3
    638a:	4a28      	ldr	r2, [pc, #160]	; (642c <RpcUartFraming_processInput+0x144>)
    638c:	2321      	movs	r3, #33	; 0x21
    638e:	54d1      	strb	r1, [r2, r3]
          _self.buffer.count++;
    6390:	4a26      	ldr	r2, [pc, #152]	; (642c <RpcUartFraming_processInput+0x144>)
    6392:	2322      	movs	r3, #34	; 0x22
    6394:	5cd3      	ldrb	r3, [r2, r3]
    6396:	3301      	adds	r3, #1
    6398:	b2d9      	uxtb	r1, r3
    639a:	4a24      	ldr	r2, [pc, #144]	; (642c <RpcUartFraming_processInput+0x144>)
    639c:	2322      	movs	r3, #34	; 0x22
    639e:	54d1      	strb	r1, [r2, r3]
        }
        break;
    63a0:	e035      	b.n	640e <RpcUartFraming_processInput+0x126>
      case STATE_ESC:
        data ^= 0xFF;
    63a2:	1dfb      	adds	r3, r7, #7
    63a4:	1dfa      	adds	r2, r7, #7
    63a6:	7812      	ldrb	r2, [r2, #0]
    63a8:	43d2      	mvns	r2, r2
    63aa:	701a      	strb	r2, [r3, #0]
        _self.buffer.data[_self.buffer.write++] = data;
    63ac:	4a1f      	ldr	r2, [pc, #124]	; (642c <RpcUartFraming_processInput+0x144>)
    63ae:	2321      	movs	r3, #33	; 0x21
    63b0:	5cd3      	ldrb	r3, [r2, r3]
    63b2:	1c1a      	adds	r2, r3, #0
    63b4:	491d      	ldr	r1, [pc, #116]	; (642c <RpcUartFraming_processInput+0x144>)
    63b6:	1df8      	adds	r0, r7, #7
    63b8:	7800      	ldrb	r0, [r0, #0]
    63ba:	5488      	strb	r0, [r1, r2]
    63bc:	3301      	adds	r3, #1
    63be:	b2d9      	uxtb	r1, r3
    63c0:	4a1a      	ldr	r2, [pc, #104]	; (642c <RpcUartFraming_processInput+0x144>)
    63c2:	2321      	movs	r3, #33	; 0x21
    63c4:	54d1      	strb	r1, [r2, r3]
        _self.buffer.write %= sizeof(_self.buffer.data);
    63c6:	4a19      	ldr	r2, [pc, #100]	; (642c <RpcUartFraming_processInput+0x144>)
    63c8:	2321      	movs	r3, #33	; 0x21
    63ca:	5cd2      	ldrb	r2, [r2, r3]
    63cc:	231f      	movs	r3, #31
    63ce:	4013      	ands	r3, r2
    63d0:	b2d9      	uxtb	r1, r3
    63d2:	4a16      	ldr	r2, [pc, #88]	; (642c <RpcUartFraming_processInput+0x144>)
    63d4:	2321      	movs	r3, #33	; 0x21
    63d6:	54d1      	strb	r1, [r2, r3]
        _self.buffer.count++;
    63d8:	4a14      	ldr	r2, [pc, #80]	; (642c <RpcUartFraming_processInput+0x144>)
    63da:	2322      	movs	r3, #34	; 0x22
    63dc:	5cd3      	ldrb	r3, [r2, r3]
    63de:	3301      	adds	r3, #1
    63e0:	b2d9      	uxtb	r1, r3
    63e2:	4a12      	ldr	r2, [pc, #72]	; (642c <RpcUartFraming_processInput+0x144>)
    63e4:	2322      	movs	r3, #34	; 0x22
    63e6:	54d1      	strb	r1, [r2, r3]
        _self.state = STATE_DATA;
    63e8:	4a10      	ldr	r2, [pc, #64]	; (642c <RpcUartFraming_processInput+0x144>)
    63ea:	2323      	movs	r3, #35	; 0x23
    63ec:	2101      	movs	r1, #1
    63ee:	54d1      	strb	r1, [r2, r3]
        break;
    63f0:	e00d      	b.n	640e <RpcUartFraming_processInput+0x126>
      case STATE_END:
        if (data == BEG) {
    63f2:	1dfb      	adds	r3, r7, #7
    63f4:	781b      	ldrb	r3, [r3, #0]
    63f6:	2baa      	cmp	r3, #170	; 0xaa
    63f8:	d108      	bne.n	640c <RpcUartFraming_processInput+0x124>
          _self.state = STATE_DATA;
    63fa:	4a0c      	ldr	r2, [pc, #48]	; (642c <RpcUartFraming_processInput+0x144>)
    63fc:	2323      	movs	r3, #35	; 0x23
    63fe:	2101      	movs	r1, #1
    6400:	54d1      	strb	r1, [r2, r3]
        }
        break;
    6402:	e003      	b.n	640c <RpcUartFraming_processInput+0x124>

static
void RpcUartFraming_processInput(void) {
  if (_self.state == STATE_END && _self.buffer.count > 0) { return; }

  while (rpc_uart_available() && _self.buffer.count < sizeof(_self.buffer.data)) {
    6404:	46c0      	nop			; (mov r8, r8)
    6406:	e002      	b.n	640e <RpcUartFraming_processInput+0x126>
    switch (_self.state) {
      case STATE_BEG:
        if (data == BEG) {
          _self.state = STATE_DATA;
        }
        break;
    6408:	46c0      	nop			; (mov r8, r8)
    640a:	e000      	b.n	640e <RpcUartFraming_processInput+0x126>
        break;
      case STATE_END:
        if (data == BEG) {
          _self.state = STATE_DATA;
        }
        break;
    640c:	46c0      	nop			; (mov r8, r8)

static
void RpcUartFraming_processInput(void) {
  if (_self.state == STATE_END && _self.buffer.count > 0) { return; }

  while (rpc_uart_available() && _self.buffer.count < sizeof(_self.buffer.data)) {
    640e:	f7ff fb21 	bl	5a54 <rpc_uart_available>
    6412:	1c03      	adds	r3, r0, #0
    6414:	2b00      	cmp	r3, #0
    6416:	d005      	beq.n	6424 <RpcUartFraming_processInput+0x13c>
    6418:	4a04      	ldr	r2, [pc, #16]	; (642c <RpcUartFraming_processInput+0x144>)
    641a:	2322      	movs	r3, #34	; 0x22
    641c:	5cd3      	ldrb	r3, [r2, r3]
    641e:	2b1f      	cmp	r3, #31
    6420:	d800      	bhi.n	6424 <RpcUartFraming_processInput+0x13c>
    6422:	e771      	b.n	6308 <RpcUartFraming_processInput+0x20>
          _self.state = STATE_DATA;
        }
        break;
    }
  }
}
    6424:	46bd      	mov	sp, r7
    6426:	b002      	add	sp, #8
    6428:	bd80      	pop	{r7, pc}
    642a:	46c0      	nop			; (mov r8, r8)
    642c:	20000290 	.word	0x20000290

00006430 <RpcUartFraming_writeByte>:

static
size_t RpcUartFraming_writeByte(uint8_t data) {
    6430:	b580      	push	{r7, lr}
    6432:	b082      	sub	sp, #8
    6434:	af00      	add	r7, sp, #0
    6436:	1c02      	adds	r2, r0, #0
    6438:	1dfb      	adds	r3, r7, #7
    643a:	701a      	strb	r2, [r3, #0]
  rpc_crc8_update(&_self.wcrc, data);
    643c:	4a18      	ldr	r2, [pc, #96]	; (64a0 <RpcUartFraming_writeByte+0x70>)
    643e:	1dfb      	adds	r3, r7, #7
    6440:	781b      	ldrb	r3, [r3, #0]
    6442:	1c10      	adds	r0, r2, #0
    6444:	1c19      	adds	r1, r3, #0
    6446:	f7ff ff15 	bl	6274 <rpc_crc8_update>
  if (data == BEG || data == END || data == ESC ||
    644a:	1dfb      	adds	r3, r7, #7
    644c:	781b      	ldrb	r3, [r3, #0]
    644e:	2baa      	cmp	r3, #170	; 0xaa
    6450:	d014      	beq.n	647c <RpcUartFraming_writeByte+0x4c>
    6452:	1dfb      	adds	r3, r7, #7
    6454:	781b      	ldrb	r3, [r3, #0]
    6456:	2bbb      	cmp	r3, #187	; 0xbb
    6458:	d010      	beq.n	647c <RpcUartFraming_writeByte+0x4c>
    645a:	1dfb      	adds	r3, r7, #7
    645c:	781b      	ldrb	r3, [r3, #0]
    645e:	2bcc      	cmp	r3, #204	; 0xcc
    6460:	d00c      	beq.n	647c <RpcUartFraming_writeByte+0x4c>
      (_self.escapeXonXoff && (data == XON || data == XOFF))
    6462:	4a10      	ldr	r2, [pc, #64]	; (64a4 <RpcUartFraming_writeByte+0x74>)
    6464:	2326      	movs	r3, #38	; 0x26
    6466:	5cd3      	ldrb	r3, [r2, r3]
}

static
size_t RpcUartFraming_writeByte(uint8_t data) {
  rpc_crc8_update(&_self.wcrc, data);
  if (data == BEG || data == END || data == ESC ||
    6468:	2b00      	cmp	r3, #0
    646a:	d00f      	beq.n	648c <RpcUartFraming_writeByte+0x5c>
      (_self.escapeXonXoff && (data == XON || data == XOFF))
    646c:	1dfb      	adds	r3, r7, #7
    646e:	781b      	ldrb	r3, [r3, #0]
    6470:	2b11      	cmp	r3, #17
    6472:	d003      	beq.n	647c <RpcUartFraming_writeByte+0x4c>
    6474:	1dfb      	adds	r3, r7, #7
    6476:	781b      	ldrb	r3, [r3, #0]
    6478:	2b13      	cmp	r3, #19
    647a:	d107      	bne.n	648c <RpcUartFraming_writeByte+0x5c>
  ) {
    rpc_uart_write(ESC);
    647c:	20cc      	movs	r0, #204	; 0xcc
    647e:	f7ff faff 	bl	5a80 <rpc_uart_write>
    data ^= 0xFF;
    6482:	1dfb      	adds	r3, r7, #7
    6484:	1dfa      	adds	r2, r7, #7
    6486:	7812      	ldrb	r2, [r2, #0]
    6488:	43d2      	mvns	r2, r2
    648a:	701a      	strb	r2, [r3, #0]
  }
  return rpc_uart_write(data);
    648c:	1dfb      	adds	r3, r7, #7
    648e:	781b      	ldrb	r3, [r3, #0]
    6490:	1c18      	adds	r0, r3, #0
    6492:	f7ff faf5 	bl	5a80 <rpc_uart_write>
    6496:	1c03      	adds	r3, r0, #0
}
    6498:	1c18      	adds	r0, r3, #0
    649a:	46bd      	mov	sp, r7
    649c:	b002      	add	sp, #8
    649e:	bd80      	pop	{r7, pc}
    64a0:	200002b5 	.word	0x200002b5
    64a4:	20000290 	.word	0x20000290

000064a8 <RpcUartFraming_beginPacket>:


void RpcUartFraming_beginPacket(void) {
    64a8:	b580      	push	{r7, lr}
    64aa:	af00      	add	r7, sp, #0
  rpc_crc8_reset(&_self.wcrc);
    64ac:	4b04      	ldr	r3, [pc, #16]	; (64c0 <RpcUartFraming_beginPacket+0x18>)
    64ae:	1c18      	adds	r0, r3, #0
    64b0:	f7ff fed6 	bl	6260 <rpc_crc8_reset>
  rpc_uart_write(BEG);
    64b4:	20aa      	movs	r0, #170	; 0xaa
    64b6:	f7ff fae3 	bl	5a80 <rpc_uart_write>
}
    64ba:	46bd      	mov	sp, r7
    64bc:	bd80      	pop	{r7, pc}
    64be:	46c0      	nop			; (mov r8, r8)
    64c0:	200002b5 	.word	0x200002b5

000064c4 <RpcUartFraming_endPacket>:

void RpcUartFraming_endPacket(void) {
    64c4:	b580      	push	{r7, lr}
    64c6:	af00      	add	r7, sp, #0
  RpcUartFraming_writeByte(_self.wcrc);
    64c8:	4a06      	ldr	r2, [pc, #24]	; (64e4 <RpcUartFraming_endPacket+0x20>)
    64ca:	2325      	movs	r3, #37	; 0x25
    64cc:	5cd3      	ldrb	r3, [r2, r3]
    64ce:	1c18      	adds	r0, r3, #0
    64d0:	f7ff ffae 	bl	6430 <RpcUartFraming_writeByte>
  rpc_uart_write(END);
    64d4:	20bb      	movs	r0, #187	; 0xbb
    64d6:	f7ff fad3 	bl	5a80 <rpc_uart_write>
  rpc_uart_flush();
    64da:	f7ff fae1 	bl	5aa0 <rpc_uart_flush>
}
    64de:	46bd      	mov	sp, r7
    64e0:	bd80      	pop	{r7, pc}
    64e2:	46c0      	nop			; (mov r8, r8)
    64e4:	20000290 	.word	0x20000290

000064e8 <RpcUartFraming_finishedPacket>:

bool RpcUartFraming_finishedPacket(void) {
    64e8:	b580      	push	{r7, lr}
    64ea:	af00      	add	r7, sp, #0
  return _self.state == STATE_END && !RpcUartFraming_hasPacketData();
    64ec:	4a08      	ldr	r2, [pc, #32]	; (6510 <RpcUartFraming_finishedPacket+0x28>)
    64ee:	2323      	movs	r3, #35	; 0x23
    64f0:	5cd3      	ldrb	r3, [r2, r3]
    64f2:	2b03      	cmp	r3, #3
    64f4:	d106      	bne.n	6504 <RpcUartFraming_finishedPacket+0x1c>
    64f6:	f7ff fee7 	bl	62c8 <RpcUartFraming_hasPacketData>
    64fa:	1c03      	adds	r3, r0, #0
    64fc:	2b00      	cmp	r3, #0
    64fe:	d101      	bne.n	6504 <RpcUartFraming_finishedPacket+0x1c>
    6500:	2301      	movs	r3, #1
    6502:	e000      	b.n	6506 <RpcUartFraming_finishedPacket+0x1e>
    6504:	2300      	movs	r3, #0
    6506:	b2db      	uxtb	r3, r3
}
    6508:	1c18      	adds	r0, r3, #0
    650a:	46bd      	mov	sp, r7
    650c:	bd80      	pop	{r7, pc}
    650e:	46c0      	nop			; (mov r8, r8)
    6510:	20000290 	.word	0x20000290

00006514 <RpcUartFraming_checkPacketCRC>:

bool RpcUartFraming_checkPacketCRC(void) {
    6514:	b580      	push	{r7, lr}
    6516:	b082      	sub	sp, #8
    6518:	af00      	add	r7, sp, #0
  if (!RpcUartFraming_finishedPacket()) { return false; }
    651a:	f7ff ffe5 	bl	64e8 <RpcUartFraming_finishedPacket>
    651e:	1c03      	adds	r3, r0, #0
    6520:	2b00      	cmp	r3, #0
    6522:	d101      	bne.n	6528 <RpcUartFraming_checkPacketCRC+0x14>
    6524:	2300      	movs	r3, #0
    6526:	e032      	b.n	658e <RpcUartFraming_checkPacketCRC+0x7a>
  const uint8_t expected = _self.rcrc;
    6528:	1dfb      	adds	r3, r7, #7
    652a:	491b      	ldr	r1, [pc, #108]	; (6598 <RpcUartFraming_checkPacketCRC+0x84>)
    652c:	2224      	movs	r2, #36	; 0x24
    652e:	5c8a      	ldrb	r2, [r1, r2]
    6530:	701a      	strb	r2, [r3, #0]
  const uint8_t actual = _self.buffer.data[_self.buffer.read++];
    6532:	4a19      	ldr	r2, [pc, #100]	; (6598 <RpcUartFraming_checkPacketCRC+0x84>)
    6534:	2320      	movs	r3, #32
    6536:	5cd3      	ldrb	r3, [r2, r3]
    6538:	1c19      	adds	r1, r3, #0
    653a:	1dba      	adds	r2, r7, #6
    653c:	4816      	ldr	r0, [pc, #88]	; (6598 <RpcUartFraming_checkPacketCRC+0x84>)
    653e:	5c41      	ldrb	r1, [r0, r1]
    6540:	7011      	strb	r1, [r2, #0]
    6542:	3301      	adds	r3, #1
    6544:	b2d9      	uxtb	r1, r3
    6546:	4a14      	ldr	r2, [pc, #80]	; (6598 <RpcUartFraming_checkPacketCRC+0x84>)
    6548:	2320      	movs	r3, #32
    654a:	54d1      	strb	r1, [r2, r3]
  _self.buffer.read %= sizeof(_self.buffer.data);
    654c:	4a12      	ldr	r2, [pc, #72]	; (6598 <RpcUartFraming_checkPacketCRC+0x84>)
    654e:	2320      	movs	r3, #32
    6550:	5cd2      	ldrb	r2, [r2, r3]
    6552:	231f      	movs	r3, #31
    6554:	4013      	ands	r3, r2
    6556:	b2d9      	uxtb	r1, r3
    6558:	4a0f      	ldr	r2, [pc, #60]	; (6598 <RpcUartFraming_checkPacketCRC+0x84>)
    655a:	2320      	movs	r3, #32
    655c:	54d1      	strb	r1, [r2, r3]
  _self.buffer.count--;
    655e:	4a0e      	ldr	r2, [pc, #56]	; (6598 <RpcUartFraming_checkPacketCRC+0x84>)
    6560:	2322      	movs	r3, #34	; 0x22
    6562:	5cd3      	ldrb	r3, [r2, r3]
    6564:	3b01      	subs	r3, #1
    6566:	b2d9      	uxtb	r1, r3
    6568:	4a0b      	ldr	r2, [pc, #44]	; (6598 <RpcUartFraming_checkPacketCRC+0x84>)
    656a:	2322      	movs	r3, #34	; 0x22
    656c:	54d1      	strb	r1, [r2, r3]
  rpc_crc8_reset(&_self.rcrc);
    656e:	4b0b      	ldr	r3, [pc, #44]	; (659c <RpcUartFraming_checkPacketCRC+0x88>)
    6570:	1c18      	adds	r0, r3, #0
    6572:	f7ff fe75 	bl	6260 <rpc_crc8_reset>
  _self.state = STATE_BEG;
    6576:	4a08      	ldr	r2, [pc, #32]	; (6598 <RpcUartFraming_checkPacketCRC+0x84>)
    6578:	2323      	movs	r3, #35	; 0x23
    657a:	2100      	movs	r1, #0
    657c:	54d1      	strb	r1, [r2, r3]
  return actual == expected;
    657e:	1dba      	adds	r2, r7, #6
    6580:	1dfb      	adds	r3, r7, #7
    6582:	7812      	ldrb	r2, [r2, #0]
    6584:	781b      	ldrb	r3, [r3, #0]
    6586:	1ad3      	subs	r3, r2, r3
    6588:	425a      	negs	r2, r3
    658a:	4153      	adcs	r3, r2
    658c:	b2db      	uxtb	r3, r3
}
    658e:	1c18      	adds	r0, r3, #0
    6590:	46bd      	mov	sp, r7
    6592:	b002      	add	sp, #8
    6594:	bd80      	pop	{r7, pc}
    6596:	46c0      	nop			; (mov r8, r8)
    6598:	20000290 	.word	0x20000290
    659c:	200002b4 	.word	0x200002b4

000065a0 <RpcUartFraming_write>:

size_t RpcUartFraming_write(const uint8_t *buffer, size_t size) {
    65a0:	b580      	push	{r7, lr}
    65a2:	b084      	sub	sp, #16
    65a4:	af00      	add	r7, sp, #0
    65a6:	6078      	str	r0, [r7, #4]
    65a8:	6039      	str	r1, [r7, #0]
  size_t n = 0;
    65aa:	2300      	movs	r3, #0
    65ac:	60fb      	str	r3, [r7, #12]
  while (size--) {
    65ae:	e00d      	b.n	65cc <RpcUartFraming_write+0x2c>
    if (RpcUartFraming_writeByte(*buffer++)) n++;
    65b0:	687b      	ldr	r3, [r7, #4]
    65b2:	781b      	ldrb	r3, [r3, #0]
    65b4:	687a      	ldr	r2, [r7, #4]
    65b6:	3201      	adds	r2, #1
    65b8:	607a      	str	r2, [r7, #4]
    65ba:	1c18      	adds	r0, r3, #0
    65bc:	f7ff ff38 	bl	6430 <RpcUartFraming_writeByte>
    65c0:	1c03      	adds	r3, r0, #0
    65c2:	2b00      	cmp	r3, #0
    65c4:	d00c      	beq.n	65e0 <RpcUartFraming_write+0x40>
    65c6:	68fb      	ldr	r3, [r7, #12]
    65c8:	3301      	adds	r3, #1
    65ca:	60fb      	str	r3, [r7, #12]
  return actual == expected;
}

size_t RpcUartFraming_write(const uint8_t *buffer, size_t size) {
  size_t n = 0;
  while (size--) {
    65cc:	683b      	ldr	r3, [r7, #0]
    65ce:	1e5a      	subs	r2, r3, #1
    65d0:	4193      	sbcs	r3, r2
    65d2:	b2db      	uxtb	r3, r3
    65d4:	683a      	ldr	r2, [r7, #0]
    65d6:	3a01      	subs	r2, #1
    65d8:	603a      	str	r2, [r7, #0]
    65da:	2b00      	cmp	r3, #0
    65dc:	d1e8      	bne.n	65b0 <RpcUartFraming_write+0x10>
    65de:	e000      	b.n	65e2 <RpcUartFraming_write+0x42>
    if (RpcUartFraming_writeByte(*buffer++)) n++;
    else break;
    65e0:	46c0      	nop			; (mov r8, r8)
  }
  return n;
    65e2:	68fb      	ldr	r3, [r7, #12]
}
    65e4:	1c18      	adds	r0, r3, #0
    65e6:	46bd      	mov	sp, r7
    65e8:	b004      	add	sp, #16
    65ea:	bd80      	pop	{r7, pc}

000065ec <RpcUartFraming_available>:

int RpcUartFraming_available(void) {
    65ec:	b580      	push	{r7, lr}
    65ee:	af00      	add	r7, sp, #0
  RpcUartFraming_processInput();
    65f0:	f7ff fe7a 	bl	62e8 <RpcUartFraming_processInput>
  return RpcUartFraming_hasPacketData() ? (_self.buffer.count - 1) : 0;
    65f4:	f7ff fe68 	bl	62c8 <RpcUartFraming_hasPacketData>
    65f8:	1c03      	adds	r3, r0, #0
    65fa:	2b00      	cmp	r3, #0
    65fc:	d004      	beq.n	6608 <RpcUartFraming_available+0x1c>
    65fe:	4a04      	ldr	r2, [pc, #16]	; (6610 <RpcUartFraming_available+0x24>)
    6600:	2322      	movs	r3, #34	; 0x22
    6602:	5cd3      	ldrb	r3, [r2, r3]
    6604:	3b01      	subs	r3, #1
    6606:	e000      	b.n	660a <RpcUartFraming_available+0x1e>
    6608:	2300      	movs	r3, #0
}
    660a:	1c18      	adds	r0, r3, #0
    660c:	46bd      	mov	sp, r7
    660e:	bd80      	pop	{r7, pc}
    6610:	20000290 	.word	0x20000290

00006614 <RpcUartFraming_read>:

int RpcUartFraming_read(void) {
    6614:	b580      	push	{r7, lr}
    6616:	b082      	sub	sp, #8
    6618:	af00      	add	r7, sp, #0
  RpcUartFraming_processInput();
    661a:	f7ff fe65 	bl	62e8 <RpcUartFraming_processInput>
  if (_self.buffer.count <= 1) {
    661e:	4a19      	ldr	r2, [pc, #100]	; (6684 <RpcUartFraming_read+0x70>)
    6620:	2322      	movs	r3, #34	; 0x22
    6622:	5cd3      	ldrb	r3, [r2, r3]
    6624:	2b01      	cmp	r3, #1
    6626:	d802      	bhi.n	662e <RpcUartFraming_read+0x1a>
    return -1;
    6628:	2301      	movs	r3, #1
    662a:	425b      	negs	r3, r3
    662c:	e026      	b.n	667c <RpcUartFraming_read+0x68>
  }
  uint8_t data = _self.buffer.data[_self.buffer.read++];
    662e:	4a15      	ldr	r2, [pc, #84]	; (6684 <RpcUartFraming_read+0x70>)
    6630:	2320      	movs	r3, #32
    6632:	5cd3      	ldrb	r3, [r2, r3]
    6634:	1c19      	adds	r1, r3, #0
    6636:	1dfa      	adds	r2, r7, #7
    6638:	4812      	ldr	r0, [pc, #72]	; (6684 <RpcUartFraming_read+0x70>)
    663a:	5c41      	ldrb	r1, [r0, r1]
    663c:	7011      	strb	r1, [r2, #0]
    663e:	3301      	adds	r3, #1
    6640:	b2d9      	uxtb	r1, r3
    6642:	4a10      	ldr	r2, [pc, #64]	; (6684 <RpcUartFraming_read+0x70>)
    6644:	2320      	movs	r3, #32
    6646:	54d1      	strb	r1, [r2, r3]
  _self.buffer.read %= sizeof(_self.buffer.data);
    6648:	4a0e      	ldr	r2, [pc, #56]	; (6684 <RpcUartFraming_read+0x70>)
    664a:	2320      	movs	r3, #32
    664c:	5cd2      	ldrb	r2, [r2, r3]
    664e:	231f      	movs	r3, #31
    6650:	4013      	ands	r3, r2
    6652:	b2d9      	uxtb	r1, r3
    6654:	4a0b      	ldr	r2, [pc, #44]	; (6684 <RpcUartFraming_read+0x70>)
    6656:	2320      	movs	r3, #32
    6658:	54d1      	strb	r1, [r2, r3]
  _self.buffer.count--;
    665a:	4a0a      	ldr	r2, [pc, #40]	; (6684 <RpcUartFraming_read+0x70>)
    665c:	2322      	movs	r3, #34	; 0x22
    665e:	5cd3      	ldrb	r3, [r2, r3]
    6660:	3b01      	subs	r3, #1
    6662:	b2d9      	uxtb	r1, r3
    6664:	4a07      	ldr	r2, [pc, #28]	; (6684 <RpcUartFraming_read+0x70>)
    6666:	2322      	movs	r3, #34	; 0x22
    6668:	54d1      	strb	r1, [r2, r3]

  rpc_crc8_update(&_self.rcrc, data);
    666a:	4a07      	ldr	r2, [pc, #28]	; (6688 <RpcUartFraming_read+0x74>)
    666c:	1dfb      	adds	r3, r7, #7
    666e:	781b      	ldrb	r3, [r3, #0]
    6670:	1c10      	adds	r0, r2, #0
    6672:	1c19      	adds	r1, r3, #0
    6674:	f7ff fdfe 	bl	6274 <rpc_crc8_update>
  return data;
    6678:	1dfb      	adds	r3, r7, #7
    667a:	781b      	ldrb	r3, [r3, #0]
}
    667c:	1c18      	adds	r0, r3, #0
    667e:	46bd      	mov	sp, r7
    6680:	b002      	add	sp, #8
    6682:	bd80      	pop	{r7, pc}
    6684:	20000290 	.word	0x20000290
    6688:	200002b4 	.word	0x200002b4

0000668c <rpc_recv_msg>:

static uint8_t  inputData[RPC_INPUT_BUFFER];
static unsigned inputDataLen;

bool rpc_recv_msg(MessageBuffer* buff, uint32_t timeout)
{
    668c:	b590      	push	{r4, r7, lr}
    668e:	b085      	sub	sp, #20
    6690:	af00      	add	r7, sp, #0
    6692:	6078      	str	r0, [r7, #4]
    6694:	6039      	str	r1, [r7, #0]
  MessageBuffer_reset(buff);
    6696:	687b      	ldr	r3, [r7, #4]
    6698:	1c18      	adds	r0, r3, #0
    669a:	f7ff fc71 	bl	5f80 <MessageBuffer_reset>
  const uint32_t tstart = rpc_system_millis();
    669e:	f7ff fa19 	bl	5ad4 <rpc_system_millis>
    66a2:	1c03      	adds	r3, r0, #0
    66a4:	60fb      	str	r3, [r7, #12]
  do {
    while (RpcUartFraming_available()) {
    66a6:	e00b      	b.n	66c0 <rpc_recv_msg+0x34>
      // TODO: boundary check
      inputData[inputDataLen++] = RpcUartFraming_read();
    66a8:	4b1f      	ldr	r3, [pc, #124]	; (6728 <rpc_recv_msg+0x9c>)
    66aa:	681c      	ldr	r4, [r3, #0]
    66ac:	f7ff ffb2 	bl	6614 <RpcUartFraming_read>
    66b0:	1c03      	adds	r3, r0, #0
    66b2:	b2da      	uxtb	r2, r3
    66b4:	4b1d      	ldr	r3, [pc, #116]	; (672c <rpc_recv_msg+0xa0>)
    66b6:	551a      	strb	r2, [r3, r4]
    66b8:	1c62      	adds	r2, r4, #1
    66ba:	4b1b      	ldr	r3, [pc, #108]	; (6728 <rpc_recv_msg+0x9c>)
    66bc:	601a      	str	r2, [r3, #0]
    66be:	e000      	b.n	66c2 <rpc_recv_msg+0x36>
bool rpc_recv_msg(MessageBuffer* buff, uint32_t timeout)
{
  MessageBuffer_reset(buff);
  const uint32_t tstart = rpc_system_millis();
  do {
    while (RpcUartFraming_available()) {
    66c0:	46c0      	nop			; (mov r8, r8)
    66c2:	f7ff ff93 	bl	65ec <RpcUartFraming_available>
    66c6:	1c03      	adds	r3, r0, #0
    66c8:	2b00      	cmp	r3, #0
    66ca:	d1ed      	bne.n	66a8 <rpc_recv_msg+0x1c>
      // TODO: boundary check
      inputData[inputDataLen++] = RpcUartFraming_read();
    }

    if (RpcUartFraming_finishedPacket()) {
    66cc:	f7ff ff0c 	bl	64e8 <RpcUartFraming_finishedPacket>
    66d0:	1c03      	adds	r3, r0, #0
    66d2:	2b00      	cmp	r3, #0
    66d4:	d01b      	beq.n	670e <rpc_recv_msg+0x82>
      unsigned packetSize = inputDataLen;
    66d6:	4b14      	ldr	r3, [pc, #80]	; (6728 <rpc_recv_msg+0x9c>)
    66d8:	681b      	ldr	r3, [r3, #0]
    66da:	60bb      	str	r3, [r7, #8]
      inputDataLen = 0;
    66dc:	4b12      	ldr	r3, [pc, #72]	; (6728 <rpc_recv_msg+0x9c>)
    66de:	2200      	movs	r2, #0
    66e0:	601a      	str	r2, [r3, #0]

      //TRACE_HEX(">>", inputData, packetSize);
      if (RpcUartFraming_checkPacketCRC()) {
    66e2:	f7ff ff17 	bl	6514 <RpcUartFraming_checkPacketCRC>
    66e6:	1c03      	adds	r3, r0, #0
    66e8:	2b00      	cmp	r3, #0
    66ea:	d010      	beq.n	670e <rpc_recv_msg+0x82>
        MessageBuffer_setBuffer(buff, inputData, sizeof(inputData));
    66ec:	6879      	ldr	r1, [r7, #4]
    66ee:	4a0f      	ldr	r2, [pc, #60]	; (672c <rpc_recv_msg+0xa0>)
    66f0:	2380      	movs	r3, #128	; 0x80
    66f2:	011b      	lsls	r3, r3, #4
    66f4:	1c08      	adds	r0, r1, #0
    66f6:	1c11      	adds	r1, r2, #0
    66f8:	1c1a      	adds	r2, r3, #0
    66fa:	f7ff fc53 	bl	5fa4 <MessageBuffer_setBuffer>
        MessageBuffer_setWritten(buff, packetSize);
    66fe:	687a      	ldr	r2, [r7, #4]
    6700:	68bb      	ldr	r3, [r7, #8]
    6702:	1c10      	adds	r0, r2, #0
    6704:	1c19      	adds	r1, r3, #0
    6706:	f7ff fc61 	bl	5fcc <MessageBuffer_setWritten>
        return true;
    670a:	2301      	movs	r3, #1
    670c:	e008      	b.n	6720 <rpc_recv_msg+0x94>
      } else {
        //LOG("NCP message CRC error");
      }
    }
  } while (rpc_system_millis() - tstart < timeout);
    670e:	f7ff f9e1 	bl	5ad4 <rpc_system_millis>
    6712:	1c02      	adds	r2, r0, #0
    6714:	68fb      	ldr	r3, [r7, #12]
    6716:	1ad2      	subs	r2, r2, r3
    6718:	683b      	ldr	r3, [r7, #0]
    671a:	429a      	cmp	r2, r3
    671c:	d3d0      	bcc.n	66c0 <rpc_recv_msg+0x34>
  return false;
    671e:	2300      	movs	r3, #0
}
    6720:	1c18      	adds	r0, r3, #0
    6722:	46bd      	mov	sp, r7
    6724:	b005      	add	sp, #20
    6726:	bd90      	pop	{r4, r7, pc}
    6728:	20000ab8 	.word	0x20000ab8
    672c:	200002b8 	.word	0x200002b8

00006730 <rpc_set_status>:

void rpc_set_timeout(uint32_t ms) {
  _rpc_timeout_override = ms;
}

void rpc_set_status(RpcStatus status) {
    6730:	b580      	push	{r7, lr}
    6732:	b082      	sub	sp, #8
    6734:	af00      	add	r7, sp, #0
    6736:	1c02      	adds	r2, r0, #0
    6738:	1dfb      	adds	r3, r7, #7
    673a:	701a      	strb	r2, [r3, #0]
  _rpc_status = status;
    673c:	4b03      	ldr	r3, [pc, #12]	; (674c <rpc_set_status+0x1c>)
    673e:	1dfa      	adds	r2, r7, #7
    6740:	7812      	ldrb	r2, [r2, #0]
    6742:	701a      	strb	r2, [r3, #0]
}
    6744:	46bd      	mov	sp, r7
    6746:	b002      	add	sp, #8
    6748:	bd80      	pop	{r7, pc}
    674a:	46c0      	nop			; (mov r8, r8)
    674c:	20000bb2 	.word	0x20000bb2

00006750 <rpc_handle_msg>:
  return "unknown";
}

static
bool rpc_handle_msg(MessageBuffer* buff)
{
    6750:	b580      	push	{r7, lr}
    6752:	b084      	sub	sp, #16
    6754:	af00      	add	r7, sp, #0
    6756:	6078      	str	r0, [r7, #4]
  uint16_t op;
  MessageBuffer_readUInt16(buff, &op);
    6758:	687a      	ldr	r2, [r7, #4]
    675a:	1c3b      	adds	r3, r7, #0
    675c:	330e      	adds	r3, #14
    675e:	1c10      	adds	r0, r2, #0
    6760:	1c19      	adds	r1, r3, #0
    6762:	f7ff fd25 	bl	61b0 <MessageBuffer_readUInt16>
  if (op == RPC_OP_INVOKE || op == RPC_OP_ONEWAY) {
    6766:	1c3b      	adds	r3, r7, #0
    6768:	330e      	adds	r3, #14
    676a:	881a      	ldrh	r2, [r3, #0]
    676c:	4b21      	ldr	r3, [pc, #132]	; (67f4 <rpc_handle_msg+0xa4>)
    676e:	429a      	cmp	r2, r3
    6770:	d005      	beq.n	677e <rpc_handle_msg+0x2e>
    6772:	1c3b      	adds	r3, r7, #0
    6774:	330e      	adds	r3, #14
    6776:	881a      	ldrh	r2, [r3, #0]
    6778:	4b1f      	ldr	r3, [pc, #124]	; (67f8 <rpc_handle_msg+0xa8>)
    677a:	429a      	cmp	r2, r3
    677c:	d133      	bne.n	67e6 <rpc_handle_msg+0x96>
      uint16_t id; uint16_t seq;
      MessageBuffer_readUInt16(buff, &id);
    677e:	687a      	ldr	r2, [r7, #4]
    6780:	1c3b      	adds	r3, r7, #0
    6782:	330c      	adds	r3, #12
    6784:	1c10      	adds	r0, r2, #0
    6786:	1c19      	adds	r1, r3, #0
    6788:	f7ff fd12 	bl	61b0 <MessageBuffer_readUInt16>
      if (op == RPC_OP_INVOKE) {
    678c:	1c3b      	adds	r3, r7, #0
    678e:	330e      	adds	r3, #14
    6790:	881a      	ldrh	r2, [r3, #0]
    6792:	4b18      	ldr	r3, [pc, #96]	; (67f4 <rpc_handle_msg+0xa4>)
    6794:	429a      	cmp	r2, r3
    6796:	d11d      	bne.n	67d4 <rpc_handle_msg+0x84>
        MessageBuffer_readUInt16(buff, &seq);
    6798:	687a      	ldr	r2, [r7, #4]
    679a:	1c3b      	adds	r3, r7, #0
    679c:	330a      	adds	r3, #10
    679e:	1c10      	adds	r0, r2, #0
    67a0:	1c19      	adds	r1, r3, #0
    67a2:	f7ff fd05 	bl	61b0 <MessageBuffer_readUInt16>

        MessageWriter_begin();
    67a6:	f7ff fba9 	bl	5efc <MessageWriter_begin>
        MessageWriter_writeUInt16(RPC_OP_RESULT);
    67aa:	4b14      	ldr	r3, [pc, #80]	; (67fc <rpc_handle_msg+0xac>)
    67ac:	1c18      	adds	r0, r3, #0
    67ae:	f7ff fb87 	bl	5ec0 <MessageWriter_writeUInt16>
        MessageWriter_writeUInt16(seq);
    67b2:	1c3b      	adds	r3, r7, #0
    67b4:	330a      	adds	r3, #10
    67b6:	881b      	ldrh	r3, [r3, #0]
    67b8:	1c18      	adds	r0, r3, #0
    67ba:	f7ff fb81 	bl	5ec0 <MessageWriter_writeUInt16>
        rpc_invoke_handler(id, buff);
    67be:	1c3b      	adds	r3, r7, #0
    67c0:	330c      	adds	r3, #12
    67c2:	881a      	ldrh	r2, [r3, #0]
    67c4:	687b      	ldr	r3, [r7, #4]
    67c6:	1c10      	adds	r0, r2, #0
    67c8:	1c19      	adds	r1, r3, #0
    67ca:	f000 faaf 	bl	6d2c <rpc_invoke_handler>
        MessageWriter_end();
    67ce:	f7ff fb9d 	bl	5f0c <MessageWriter_end>
static
bool rpc_handle_msg(MessageBuffer* buff)
{
  uint16_t op;
  MessageBuffer_readUInt16(buff, &op);
  if (op == RPC_OP_INVOKE || op == RPC_OP_ONEWAY) {
    67d2:	e00a      	b.n	67ea <rpc_handle_msg+0x9a>
        MessageWriter_writeUInt16(RPC_OP_RESULT);
        MessageWriter_writeUInt16(seq);
        rpc_invoke_handler(id, buff);
        MessageWriter_end();
      } else {
        rpc_invoke_handler(id, buff);
    67d4:	1c3b      	adds	r3, r7, #0
    67d6:	330c      	adds	r3, #12
    67d8:	881a      	ldrh	r2, [r3, #0]
    67da:	687b      	ldr	r3, [r7, #4]
    67dc:	1c10      	adds	r0, r2, #0
    67de:	1c19      	adds	r1, r3, #0
    67e0:	f000 faa4 	bl	6d2c <rpc_invoke_handler>
static
bool rpc_handle_msg(MessageBuffer* buff)
{
  uint16_t op;
  MessageBuffer_readUInt16(buff, &op);
  if (op == RPC_OP_INVOKE || op == RPC_OP_ONEWAY) {
    67e4:	e001      	b.n	67ea <rpc_handle_msg+0x9a>
        MessageWriter_end();
      } else {
        rpc_invoke_handler(id, buff);
      }
  } else {
      return false;
    67e6:	2300      	movs	r3, #0
    67e8:	e000      	b.n	67ec <rpc_handle_msg+0x9c>
  }

  return true;
    67ea:	2301      	movs	r3, #1
}
    67ec:	1c18      	adds	r0, r3, #0
    67ee:	46bd      	mov	sp, r7
    67f0:	b004      	add	sp, #16
    67f2:	bd80      	pop	{r7, pc}
    67f4:	000067bc 	.word	0x000067bc
    67f8:	00001cf3 	.word	0x00001cf3
    67fc:	0000a512 	.word	0x0000a512

00006800 <rpc_wait_result>:

RpcStatus rpc_wait_result(uint16_t expected_seq, MessageBuffer* buff, uint32_t timeout)
{
    6800:	b580      	push	{r7, lr}
    6802:	b086      	sub	sp, #24
    6804:	af00      	add	r7, sp, #0
    6806:	60b9      	str	r1, [r7, #8]
    6808:	607a      	str	r2, [r7, #4]
    680a:	1c3b      	adds	r3, r7, #0
    680c:	330e      	adds	r3, #14
    680e:	1c02      	adds	r2, r0, #0
    6810:	801a      	strh	r2, [r3, #0]
  if (_rpc_timeout_override) {
    6812:	4b28      	ldr	r3, [pc, #160]	; (68b4 <rpc_wait_result+0xb4>)
    6814:	681b      	ldr	r3, [r3, #0]
    6816:	2b00      	cmp	r3, #0
    6818:	d002      	beq.n	6820 <rpc_wait_result+0x20>
    timeout = _rpc_timeout_override;
    681a:	4b26      	ldr	r3, [pc, #152]	; (68b4 <rpc_wait_result+0xb4>)
    681c:	681b      	ldr	r3, [r3, #0]
    681e:	607b      	str	r3, [r7, #4]
  }
  uint8_t status = RPC_STATUS_ERROR_TIMEOUT;
    6820:	1c3b      	adds	r3, r7, #0
    6822:	3317      	adds	r3, #23
    6824:	2211      	movs	r2, #17
    6826:	701a      	strb	r2, [r3, #0]
  // TODO: timeout should decrease with time
  while (rpc_recv_msg(buff, timeout)) {
    6828:	e033      	b.n	6892 <rpc_wait_result+0x92>
    uint16_t op = 0;
    682a:	1c3b      	adds	r3, r7, #0
    682c:	3314      	adds	r3, #20
    682e:	2200      	movs	r2, #0
    6830:	801a      	strh	r2, [r3, #0]
    MessageBuffer_readUInt16(buff, &op);
    6832:	68ba      	ldr	r2, [r7, #8]
    6834:	1c3b      	adds	r3, r7, #0
    6836:	3314      	adds	r3, #20
    6838:	1c10      	adds	r0, r2, #0
    683a:	1c19      	adds	r1, r3, #0
    683c:	f7ff fcb8 	bl	61b0 <MessageBuffer_readUInt16>
    if (op == RPC_OP_RESULT) {
    6840:	1c3b      	adds	r3, r7, #0
    6842:	3314      	adds	r3, #20
    6844:	881a      	ldrh	r2, [r3, #0]
    6846:	4b1c      	ldr	r3, [pc, #112]	; (68b8 <rpc_wait_result+0xb8>)
    6848:	429a      	cmp	r2, r3
    684a:	d11a      	bne.n	6882 <rpc_wait_result+0x82>
      uint16_t seq = 0;
    684c:	1c3b      	adds	r3, r7, #0
    684e:	3312      	adds	r3, #18
    6850:	2200      	movs	r2, #0
    6852:	801a      	strh	r2, [r3, #0]
      MessageBuffer_readUInt16(buff, &seq);
    6854:	68ba      	ldr	r2, [r7, #8]
    6856:	1c3b      	adds	r3, r7, #0
    6858:	3312      	adds	r3, #18
    685a:	1c10      	adds	r0, r2, #0
    685c:	1c19      	adds	r1, r3, #0
    685e:	f7ff fca7 	bl	61b0 <MessageBuffer_readUInt16>
      if (seq == expected_seq) {
    6862:	1c3b      	adds	r3, r7, #0
    6864:	3312      	adds	r3, #18
    6866:	881b      	ldrh	r3, [r3, #0]
    6868:	1c3a      	adds	r2, r7, #0
    686a:	320e      	adds	r2, #14
    686c:	8812      	ldrh	r2, [r2, #0]
    686e:	429a      	cmp	r2, r3
    6870:	d10f      	bne.n	6892 <rpc_wait_result+0x92>
        MessageBuffer_readUInt8(buff, &status);
    6872:	68ba      	ldr	r2, [r7, #8]
    6874:	1c3b      	adds	r3, r7, #0
    6876:	3317      	adds	r3, #23
    6878:	1c10      	adds	r0, r2, #0
    687a:	1c19      	adds	r1, r3, #0
    687c:	f7ff fc86 	bl	618c <MessageBuffer_readUInt8>
    6880:	e010      	b.n	68a4 <rpc_wait_result+0xa4>
        // not our reply => skip it
        continue;
      }
    }
    // process unexpected messages
    MessageBuffer_rewind(buff);
    6882:	68bb      	ldr	r3, [r7, #8]
    6884:	1c18      	adds	r0, r3, #0
    6886:	f7ff fb6d 	bl	5f64 <MessageBuffer_rewind>
    rpc_handle_msg(buff);
    688a:	68bb      	ldr	r3, [r7, #8]
    688c:	1c18      	adds	r0, r3, #0
    688e:	f7ff ff5f 	bl	6750 <rpc_handle_msg>
  if (_rpc_timeout_override) {
    timeout = _rpc_timeout_override;
  }
  uint8_t status = RPC_STATUS_ERROR_TIMEOUT;
  // TODO: timeout should decrease with time
  while (rpc_recv_msg(buff, timeout)) {
    6892:	68ba      	ldr	r2, [r7, #8]
    6894:	687b      	ldr	r3, [r7, #4]
    6896:	1c10      	adds	r0, r2, #0
    6898:	1c19      	adds	r1, r3, #0
    689a:	f7ff fef7 	bl	668c <rpc_recv_msg>
    689e:	1c03      	adds	r3, r0, #0
    68a0:	2b00      	cmp	r3, #0
    68a2:	d1c2      	bne.n	682a <rpc_wait_result+0x2a>
    }
    // process unexpected messages
    MessageBuffer_rewind(buff);
    rpc_handle_msg(buff);
  }
  return (RpcStatus)status;
    68a4:	1c3b      	adds	r3, r7, #0
    68a6:	3317      	adds	r3, #23
    68a8:	781b      	ldrb	r3, [r3, #0]
}
    68aa:	1c18      	adds	r0, r3, #0
    68ac:	46bd      	mov	sp, r7
    68ae:	b006      	add	sp, #24
    68b0:	bd80      	pop	{r7, pc}
    68b2:	46c0      	nop			; (mov r8, r8)
    68b4:	20000abc 	.word	0x20000abc
    68b8:	0000a512 	.word	0x0000a512

000068bc <rpc_run>:

void rpc_run(void) {
    68bc:	b580      	push	{r7, lr}
    68be:	b086      	sub	sp, #24
    68c0:	af00      	add	r7, sp, #0
  MessageBuffer buff;
  MessageBuffer_init(&buff, NULL, 0);
    68c2:	1d3b      	adds	r3, r7, #4
    68c4:	1c18      	adds	r0, r3, #0
    68c6:	2100      	movs	r1, #0
    68c8:	2200      	movs	r2, #0
    68ca:	f7ff fb37 	bl	5f3c <MessageBuffer_init>
  while (rpc_recv_msg(&buff, 0)) {
    68ce:	e003      	b.n	68d8 <rpc_run+0x1c>
    rpc_handle_msg(&buff);
    68d0:	1d3b      	adds	r3, r7, #4
    68d2:	1c18      	adds	r0, r3, #0
    68d4:	f7ff ff3c 	bl	6750 <rpc_handle_msg>
}

void rpc_run(void) {
  MessageBuffer buff;
  MessageBuffer_init(&buff, NULL, 0);
  while (rpc_recv_msg(&buff, 0)) {
    68d8:	1d3b      	adds	r3, r7, #4
    68da:	1c18      	adds	r0, r3, #0
    68dc:	2100      	movs	r1, #0
    68de:	f7ff fed5 	bl	668c <rpc_recv_msg>
    68e2:	1c03      	adds	r3, r0, #0
    68e4:	2b00      	cmp	r3, #0
    68e6:	d1f3      	bne.n	68d0 <rpc_run+0x14>
    rpc_handle_msg(&buff);
  }
}
    68e8:	46bd      	mov	sp, r7
    68ea:	b006      	add	sp, #24
    68ec:	bd80      	pop	{r7, pc}
    68ee:	46c0      	nop			; (mov r8, r8)

000068f0 <rpc_mcu_reboot_impl>:
#if !defined(RPC_DISABLE_WEAK_IMPL)

#include "BlynkRpc.h"

RPC_ATTR_WEAK
bool rpc_mcu_reboot_impl(void) {
    68f0:	b580      	push	{r7, lr}
    68f2:	af00      	add	r7, sp, #0
  return false;
    68f4:	2300      	movs	r3, #0
}
    68f6:	1c18      	adds	r0, r3, #0
    68f8:	46bd      	mov	sp, r7
    68fa:	bd80      	pop	{r7, pc}

000068fc <rpc_client_otaUpdateAvailable_impl>:
void rpc_client_processEvent_impl(uint8_t event) {

}

RPC_ATTR_WEAK
bool rpc_client_otaUpdateAvailable_impl(const char* filename, uint32_t filesize, const char* fw_type, const char* fw_ver, const char* fw_build) {
    68fc:	b580      	push	{r7, lr}
    68fe:	b084      	sub	sp, #16
    6900:	af00      	add	r7, sp, #0
    6902:	60f8      	str	r0, [r7, #12]
    6904:	60b9      	str	r1, [r7, #8]
    6906:	607a      	str	r2, [r7, #4]
    6908:	603b      	str	r3, [r7, #0]
  return false;
    690a:	2300      	movs	r3, #0
}
    690c:	1c18      	adds	r0, r3, #0
    690e:	46bd      	mov	sp, r7
    6910:	b004      	add	sp, #16
    6912:	bd80      	pop	{r7, pc}

00006914 <rpc_client_otaUpdateWrite_impl>:

RPC_ATTR_WEAK
bool rpc_client_otaUpdateWrite_impl(uint32_t offset, buffer_t chunk, uint32_t crc32) {
    6914:	b580      	push	{r7, lr}
    6916:	b084      	sub	sp, #16
    6918:	af00      	add	r7, sp, #0
    691a:	60f8      	str	r0, [r7, #12]
    691c:	1d38      	adds	r0, r7, #4
    691e:	6001      	str	r1, [r0, #0]
    6920:	6042      	str	r2, [r0, #4]
    6922:	603b      	str	r3, [r7, #0]
  return false;
    6924:	2300      	movs	r3, #0
}
    6926:	1c18      	adds	r0, r3, #0
    6928:	46bd      	mov	sp, r7
    692a:	b004      	add	sp, #16
    692c:	bd80      	pop	{r7, pc}
    692e:	46c0      	nop			; (mov r8, r8)

00006930 <rpc_client_otaUpdateFinish_impl>:

RPC_ATTR_WEAK
bool rpc_client_otaUpdateFinish_impl(void) {
    6930:	b580      	push	{r7, lr}
    6932:	af00      	add	r7, sp, #0
  return false;
    6934:	2300      	movs	r3, #0
}
    6936:	1c18      	adds	r0, r3, #0
    6938:	46bd      	mov	sp, r7
    693a:	bd80      	pop	{r7, pc}

0000693c <rpc_client_otaUpdateCancel_impl>:

RPC_ATTR_WEAK
void rpc_client_otaUpdateCancel_impl(void) {
    693c:	b580      	push	{r7, lr}
    693e:	af00      	add	r7, sp, #0

}
    6940:	46bd      	mov	sp, r7
    6942:	bd80      	pop	{r7, pc}

00006944 <rpc_mcu_ping_handler>:


void rpc_mcu_ping_impl(void);

static
void rpc_mcu_ping_handler(MessageBuffer* _rpc_buff) {
    6944:	b580      	push	{r7, lr}
    6946:	b082      	sub	sp, #8
    6948:	af00      	add	r7, sp, #0
    694a:	6078      	str	r0, [r7, #4]
  (void)_rpc_buff;


  MessageWriter_writeUInt8(RPC_STATUS_OK);
    694c:	2000      	movs	r0, #0
    694e:	f7ff faa7 	bl	5ea0 <MessageWriter_writeUInt8>
}
    6952:	46bd      	mov	sp, r7
    6954:	b002      	add	sp, #8
    6956:	bd80      	pop	{r7, pc}

00006958 <rpc_mcu_reboot_handler>:


bool rpc_mcu_reboot_impl(void);

static
void rpc_mcu_reboot_handler(MessageBuffer* _rpc_buff) {
    6958:	b590      	push	{r4, r7, lr}
    695a:	b085      	sub	sp, #20
    695c:	af00      	add	r7, sp, #0
    695e:	6078      	str	r0, [r7, #4]
  (void)_rpc_buff;

  /* Call the actual function */
  bool _rpc_ret_val = rpc_mcu_reboot_impl();
    6960:	1c3c      	adds	r4, r7, #0
    6962:	340f      	adds	r4, #15
    6964:	f7ff ffc4 	bl	68f0 <rpc_mcu_reboot_impl>
    6968:	1c03      	adds	r3, r0, #0
    696a:	7023      	strb	r3, [r4, #0]

  MessageWriter_writeUInt8(RPC_STATUS_OK);
    696c:	2000      	movs	r0, #0
    696e:	f7ff fa97 	bl	5ea0 <MessageWriter_writeUInt8>
  /* Serialize outputs */
  MessageWriter_writeBool(_rpc_ret_val);
    6972:	1c3b      	adds	r3, r7, #0
    6974:	330f      	adds	r3, #15
    6976:	781b      	ldrb	r3, [r3, #0]
    6978:	1c18      	adds	r0, r3, #0
    697a:	f7ff fa7d 	bl	5e78 <MessageWriter_writeBool>
}
    697e:	46bd      	mov	sp, r7
    6980:	b005      	add	sp, #20
    6982:	bd90      	pop	{r4, r7, pc}

00006984 <rpc_mcu_hasUID_handler>:


bool rpc_mcu_hasUID_impl(uint16_t uid);

static
void rpc_mcu_hasUID_handler(MessageBuffer* _rpc_buff) {
    6984:	b590      	push	{r4, r7, lr}
    6986:	b085      	sub	sp, #20
    6988:	af00      	add	r7, sp, #0
    698a:	6078      	str	r0, [r7, #4]
  /* Deserialize arguments */
  uint16_t uid; MessageBuffer_readUInt16(_rpc_buff, &uid);
    698c:	687a      	ldr	r2, [r7, #4]
    698e:	1c3b      	adds	r3, r7, #0
    6990:	330c      	adds	r3, #12
    6992:	1c10      	adds	r0, r2, #0
    6994:	1c19      	adds	r1, r3, #0
    6996:	f7ff fc0b 	bl	61b0 <MessageBuffer_readUInt16>

  if (MessageBuffer_getError(_rpc_buff) || MessageBuffer_availableToRead(_rpc_buff)) {
    699a:	687b      	ldr	r3, [r7, #4]
    699c:	1c18      	adds	r0, r3, #0
    699e:	f7ff fb2f 	bl	6000 <MessageBuffer_getError>
    69a2:	1c03      	adds	r3, r0, #0
    69a4:	2b00      	cmp	r3, #0
    69a6:	d106      	bne.n	69b6 <rpc_mcu_hasUID_handler+0x32>
    69a8:	687b      	ldr	r3, [r7, #4]
    69aa:	1c18      	adds	r0, r3, #0
    69ac:	f7ff fb1a 	bl	5fe4 <MessageBuffer_availableToRead>
    69b0:	1c03      	adds	r3, r0, #0
    69b2:	2b00      	cmp	r3, #0
    69b4:	d003      	beq.n	69be <rpc_mcu_hasUID_handler+0x3a>
    MessageWriter_writeUInt8(RPC_STATUS_ERROR_ARGS_R);
    69b6:	2015      	movs	r0, #21
    69b8:	f7ff fa72 	bl	5ea0 <MessageWriter_writeUInt8>
    69bc:	e012      	b.n	69e4 <rpc_mcu_hasUID_handler+0x60>
    return;
  }

  /* Call the actual function */
  bool _rpc_ret_val = rpc_mcu_hasUID_impl(uid);
    69be:	1c3b      	adds	r3, r7, #0
    69c0:	330c      	adds	r3, #12
    69c2:	881b      	ldrh	r3, [r3, #0]
    69c4:	1c3c      	adds	r4, r7, #0
    69c6:	340f      	adds	r4, #15
    69c8:	1c18      	adds	r0, r3, #0
    69ca:	f000 f9cb 	bl	6d64 <rpc_mcu_hasUID_impl>
    69ce:	1c03      	adds	r3, r0, #0
    69d0:	7023      	strb	r3, [r4, #0]

  MessageWriter_writeUInt8(RPC_STATUS_OK);
    69d2:	2000      	movs	r0, #0
    69d4:	f7ff fa64 	bl	5ea0 <MessageWriter_writeUInt8>
  /* Serialize outputs */
  MessageWriter_writeBool(_rpc_ret_val);
    69d8:	1c3b      	adds	r3, r7, #0
    69da:	330f      	adds	r3, #15
    69dc:	781b      	ldrb	r3, [r3, #0]
    69de:	1c18      	adds	r0, r3, #0
    69e0:	f7ff fa4a 	bl	5e78 <MessageWriter_writeBool>
}
    69e4:	46bd      	mov	sp, r7
    69e6:	b005      	add	sp, #20
    69e8:	bd90      	pop	{r4, r7, pc}
    69ea:	46c0      	nop			; (mov r8, r8)

000069ec <rpc_client_blynkVPinChange_handler>:


void rpc_client_blynkVPinChange_impl(uint16_t vpin, buffer_t param);

static
void rpc_client_blynkVPinChange_handler(MessageBuffer* _rpc_buff) {
    69ec:	b580      	push	{r7, lr}
    69ee:	b086      	sub	sp, #24
    69f0:	af00      	add	r7, sp, #0
    69f2:	6078      	str	r0, [r7, #4]
  /* Deserialize arguments */
  uint16_t vpin; MessageBuffer_readUInt16(_rpc_buff, &vpin);
    69f4:	687a      	ldr	r2, [r7, #4]
    69f6:	1c3b      	adds	r3, r7, #0
    69f8:	3316      	adds	r3, #22
    69fa:	1c10      	adds	r0, r2, #0
    69fc:	1c19      	adds	r1, r3, #0
    69fe:	f7ff fbd7 	bl	61b0 <MessageBuffer_readUInt16>
  buffer_t param; MessageBuffer_readBinary(_rpc_buff, &param);
    6a02:	687a      	ldr	r2, [r7, #4]
    6a04:	1c3b      	adds	r3, r7, #0
    6a06:	330c      	adds	r3, #12
    6a08:	1c10      	adds	r0, r2, #0
    6a0a:	1c19      	adds	r1, r3, #0
    6a0c:	f7ff fb3a 	bl	6084 <MessageBuffer_readBinary>

  if (MessageBuffer_getError(_rpc_buff) || MessageBuffer_availableToRead(_rpc_buff)) {
    6a10:	687b      	ldr	r3, [r7, #4]
    6a12:	1c18      	adds	r0, r3, #0
    6a14:	f7ff faf4 	bl	6000 <MessageBuffer_getError>
    6a18:	1c03      	adds	r3, r0, #0
    6a1a:	2b00      	cmp	r3, #0
    6a1c:	d110      	bne.n	6a40 <rpc_client_blynkVPinChange_handler+0x54>
    6a1e:	687b      	ldr	r3, [r7, #4]
    6a20:	1c18      	adds	r0, r3, #0
    6a22:	f7ff fadf 	bl	5fe4 <MessageBuffer_availableToRead>
    6a26:	1c03      	adds	r3, r0, #0
    6a28:	2b00      	cmp	r3, #0
    6a2a:	d109      	bne.n	6a40 <rpc_client_blynkVPinChange_handler+0x54>
    return;
  }

  /* Call the actual function */
  rpc_client_blynkVPinChange_impl(vpin, param);
    6a2c:	1c3b      	adds	r3, r7, #0
    6a2e:	3316      	adds	r3, #22
    6a30:	881a      	ldrh	r2, [r3, #0]
    6a32:	1c3b      	adds	r3, r7, #0
    6a34:	330c      	adds	r3, #12
    6a36:	1c10      	adds	r0, r2, #0
    6a38:	6819      	ldr	r1, [r3, #0]
    6a3a:	685a      	ldr	r2, [r3, #4]
    6a3c:	f7ff f90e 	bl	5c5c <rpc_client_blynkVPinChange_impl>

}
    6a40:	46bd      	mov	sp, r7
    6a42:	b006      	add	sp, #24
    6a44:	bd80      	pop	{r7, pc}
    6a46:	46c0      	nop			; (mov r8, r8)

00006a48 <rpc_client_blynkStateChange_handler>:


void rpc_client_blynkStateChange_impl(uint8_t state);

static
void rpc_client_blynkStateChange_handler(MessageBuffer* _rpc_buff) {
    6a48:	b580      	push	{r7, lr}
    6a4a:	b084      	sub	sp, #16
    6a4c:	af00      	add	r7, sp, #0
    6a4e:	6078      	str	r0, [r7, #4]
  /* Deserialize arguments */
  uint8_t state; MessageBuffer_readUInt8(_rpc_buff, &state);
    6a50:	687a      	ldr	r2, [r7, #4]
    6a52:	1c3b      	adds	r3, r7, #0
    6a54:	330f      	adds	r3, #15
    6a56:	1c10      	adds	r0, r2, #0
    6a58:	1c19      	adds	r1, r3, #0
    6a5a:	f7ff fb97 	bl	618c <MessageBuffer_readUInt8>

  if (MessageBuffer_getError(_rpc_buff) || MessageBuffer_availableToRead(_rpc_buff)) {
    6a5e:	687b      	ldr	r3, [r7, #4]
    6a60:	1c18      	adds	r0, r3, #0
    6a62:	f7ff facd 	bl	6000 <MessageBuffer_getError>
    6a66:	1c03      	adds	r3, r0, #0
    6a68:	2b00      	cmp	r3, #0
    6a6a:	d10c      	bne.n	6a86 <rpc_client_blynkStateChange_handler+0x3e>
    6a6c:	687b      	ldr	r3, [r7, #4]
    6a6e:	1c18      	adds	r0, r3, #0
    6a70:	f7ff fab8 	bl	5fe4 <MessageBuffer_availableToRead>
    6a74:	1c03      	adds	r3, r0, #0
    6a76:	2b00      	cmp	r3, #0
    6a78:	d105      	bne.n	6a86 <rpc_client_blynkStateChange_handler+0x3e>
    return;
  }

  /* Call the actual function */
  rpc_client_blynkStateChange_impl(state);
    6a7a:	1c3b      	adds	r3, r7, #0
    6a7c:	330f      	adds	r3, #15
    6a7e:	781b      	ldrb	r3, [r3, #0]
    6a80:	1c18      	adds	r0, r3, #0
    6a82:	f7ff f8ff 	bl	5c84 <rpc_client_blynkStateChange_impl>

}
    6a86:	46bd      	mov	sp, r7
    6a88:	b004      	add	sp, #16
    6a8a:	bd80      	pop	{r7, pc}

00006a8c <rpc_client_processEvent_handler>:


void rpc_client_processEvent_impl(uint8_t event);

static
void rpc_client_processEvent_handler(MessageBuffer* _rpc_buff) {
    6a8c:	b580      	push	{r7, lr}
    6a8e:	b084      	sub	sp, #16
    6a90:	af00      	add	r7, sp, #0
    6a92:	6078      	str	r0, [r7, #4]
  /* Deserialize arguments */
  uint8_t event; MessageBuffer_readUInt8(_rpc_buff, &event);
    6a94:	687a      	ldr	r2, [r7, #4]
    6a96:	1c3b      	adds	r3, r7, #0
    6a98:	330f      	adds	r3, #15
    6a9a:	1c10      	adds	r0, r2, #0
    6a9c:	1c19      	adds	r1, r3, #0
    6a9e:	f7ff fb75 	bl	618c <MessageBuffer_readUInt8>

  if (MessageBuffer_getError(_rpc_buff) || MessageBuffer_availableToRead(_rpc_buff)) {
    6aa2:	687b      	ldr	r3, [r7, #4]
    6aa4:	1c18      	adds	r0, r3, #0
    6aa6:	f7ff faab 	bl	6000 <MessageBuffer_getError>
    6aaa:	1c03      	adds	r3, r0, #0
    6aac:	2b00      	cmp	r3, #0
    6aae:	d10c      	bne.n	6aca <rpc_client_processEvent_handler+0x3e>
    6ab0:	687b      	ldr	r3, [r7, #4]
    6ab2:	1c18      	adds	r0, r3, #0
    6ab4:	f7ff fa96 	bl	5fe4 <MessageBuffer_availableToRead>
    6ab8:	1c03      	adds	r3, r0, #0
    6aba:	2b00      	cmp	r3, #0
    6abc:	d105      	bne.n	6aca <rpc_client_processEvent_handler+0x3e>
    return;
  }

  /* Call the actual function */
  rpc_client_processEvent_impl(event);
    6abe:	1c3b      	adds	r3, r7, #0
    6ac0:	330f      	adds	r3, #15
    6ac2:	781b      	ldrb	r3, [r3, #0]
    6ac4:	1c18      	adds	r0, r3, #0
    6ac6:	f7ff f8f1 	bl	5cac <rpc_client_processEvent_impl>

}
    6aca:	46bd      	mov	sp, r7
    6acc:	b004      	add	sp, #16
    6ace:	bd80      	pop	{r7, pc}

00006ad0 <rpc_client_otaUpdateAvailable_handler>:


bool rpc_client_otaUpdateAvailable_impl(const char* filename, uint32_t filesize, const char* fw_type, const char* fw_ver, const char* fw_build);

static
void rpc_client_otaUpdateAvailable_handler(MessageBuffer* _rpc_buff) {
    6ad0:	b5b0      	push	{r4, r5, r7, lr}
    6ad2:	b08a      	sub	sp, #40	; 0x28
    6ad4:	af02      	add	r7, sp, #8
    6ad6:	6078      	str	r0, [r7, #4]
  /* Deserialize arguments */
  const char* filename; MessageBuffer_readString(_rpc_buff, &filename);
    6ad8:	687a      	ldr	r2, [r7, #4]
    6ada:	1c3b      	adds	r3, r7, #0
    6adc:	3318      	adds	r3, #24
    6ade:	1c10      	adds	r0, r2, #0
    6ae0:	1c19      	adds	r1, r3, #0
    6ae2:	f7ff fa97 	bl	6014 <MessageBuffer_readString>
  uint32_t filesize; MessageBuffer_readUInt32(_rpc_buff, &filesize);
    6ae6:	687a      	ldr	r2, [r7, #4]
    6ae8:	1c3b      	adds	r3, r7, #0
    6aea:	3314      	adds	r3, #20
    6aec:	1c10      	adds	r0, r2, #0
    6aee:	1c19      	adds	r1, r3, #0
    6af0:	f7ff fb70 	bl	61d4 <MessageBuffer_readUInt32>
  const char* fw_type; MessageBuffer_readString(_rpc_buff, &fw_type);
    6af4:	687a      	ldr	r2, [r7, #4]
    6af6:	1c3b      	adds	r3, r7, #0
    6af8:	3310      	adds	r3, #16
    6afa:	1c10      	adds	r0, r2, #0
    6afc:	1c19      	adds	r1, r3, #0
    6afe:	f7ff fa89 	bl	6014 <MessageBuffer_readString>
  const char* fw_ver; MessageBuffer_readString(_rpc_buff, &fw_ver);
    6b02:	687a      	ldr	r2, [r7, #4]
    6b04:	1c3b      	adds	r3, r7, #0
    6b06:	330c      	adds	r3, #12
    6b08:	1c10      	adds	r0, r2, #0
    6b0a:	1c19      	adds	r1, r3, #0
    6b0c:	f7ff fa82 	bl	6014 <MessageBuffer_readString>
  const char* fw_build; MessageBuffer_readString(_rpc_buff, &fw_build);
    6b10:	687a      	ldr	r2, [r7, #4]
    6b12:	1c3b      	adds	r3, r7, #0
    6b14:	3308      	adds	r3, #8
    6b16:	1c10      	adds	r0, r2, #0
    6b18:	1c19      	adds	r1, r3, #0
    6b1a:	f7ff fa7b 	bl	6014 <MessageBuffer_readString>

  if (MessageBuffer_getError(_rpc_buff) || MessageBuffer_availableToRead(_rpc_buff)) {
    6b1e:	687b      	ldr	r3, [r7, #4]
    6b20:	1c18      	adds	r0, r3, #0
    6b22:	f7ff fa6d 	bl	6000 <MessageBuffer_getError>
    6b26:	1c03      	adds	r3, r0, #0
    6b28:	2b00      	cmp	r3, #0
    6b2a:	d106      	bne.n	6b3a <rpc_client_otaUpdateAvailable_handler+0x6a>
    6b2c:	687b      	ldr	r3, [r7, #4]
    6b2e:	1c18      	adds	r0, r3, #0
    6b30:	f7ff fa58 	bl	5fe4 <MessageBuffer_availableToRead>
    6b34:	1c03      	adds	r3, r0, #0
    6b36:	2b00      	cmp	r3, #0
    6b38:	d003      	beq.n	6b42 <rpc_client_otaUpdateAvailable_handler+0x72>
    MessageWriter_writeUInt8(RPC_STATUS_ERROR_ARGS_R);
    6b3a:	2015      	movs	r0, #21
    6b3c:	f7ff f9b0 	bl	5ea0 <MessageWriter_writeUInt8>
    6b40:	e014      	b.n	6b6c <rpc_client_otaUpdateAvailable_handler+0x9c>
    return;
  }

  /* Call the actual function */
  bool _rpc_ret_val = rpc_client_otaUpdateAvailable_impl(filename, filesize, fw_type, fw_ver, fw_build);
    6b42:	69b8      	ldr	r0, [r7, #24]
    6b44:	6979      	ldr	r1, [r7, #20]
    6b46:	693a      	ldr	r2, [r7, #16]
    6b48:	68fb      	ldr	r3, [r7, #12]
    6b4a:	68bd      	ldr	r5, [r7, #8]
    6b4c:	1c3c      	adds	r4, r7, #0
    6b4e:	341f      	adds	r4, #31
    6b50:	9500      	str	r5, [sp, #0]
    6b52:	f7ff fed3 	bl	68fc <rpc_client_otaUpdateAvailable_impl>
    6b56:	1c03      	adds	r3, r0, #0
    6b58:	7023      	strb	r3, [r4, #0]

  MessageWriter_writeUInt8(RPC_STATUS_OK);
    6b5a:	2000      	movs	r0, #0
    6b5c:	f7ff f9a0 	bl	5ea0 <MessageWriter_writeUInt8>
  /* Serialize outputs */
  MessageWriter_writeBool(_rpc_ret_val);
    6b60:	1c3b      	adds	r3, r7, #0
    6b62:	331f      	adds	r3, #31
    6b64:	781b      	ldrb	r3, [r3, #0]
    6b66:	1c18      	adds	r0, r3, #0
    6b68:	f7ff f986 	bl	5e78 <MessageWriter_writeBool>
}
    6b6c:	46bd      	mov	sp, r7
    6b6e:	b008      	add	sp, #32
    6b70:	bdb0      	pop	{r4, r5, r7, pc}
    6b72:	46c0      	nop			; (mov r8, r8)

00006b74 <rpc_client_otaUpdateWrite_handler>:


bool rpc_client_otaUpdateWrite_impl(uint32_t offset, buffer_t chunk, uint32_t crc32);

static
void rpc_client_otaUpdateWrite_handler(MessageBuffer* _rpc_buff) {
    6b74:	b5b0      	push	{r4, r5, r7, lr}
    6b76:	b088      	sub	sp, #32
    6b78:	af00      	add	r7, sp, #0
    6b7a:	6078      	str	r0, [r7, #4]
  /* Deserialize arguments */
  uint32_t offset; MessageBuffer_readUInt32(_rpc_buff, &offset);
    6b7c:	687a      	ldr	r2, [r7, #4]
    6b7e:	1c3b      	adds	r3, r7, #0
    6b80:	3318      	adds	r3, #24
    6b82:	1c10      	adds	r0, r2, #0
    6b84:	1c19      	adds	r1, r3, #0
    6b86:	f7ff fb25 	bl	61d4 <MessageBuffer_readUInt32>
  buffer_t chunk; MessageBuffer_readBinary(_rpc_buff, &chunk);
    6b8a:	687a      	ldr	r2, [r7, #4]
    6b8c:	1c3b      	adds	r3, r7, #0
    6b8e:	3310      	adds	r3, #16
    6b90:	1c10      	adds	r0, r2, #0
    6b92:	1c19      	adds	r1, r3, #0
    6b94:	f7ff fa76 	bl	6084 <MessageBuffer_readBinary>
  uint32_t crc32; MessageBuffer_readUInt32(_rpc_buff, &crc32);
    6b98:	687a      	ldr	r2, [r7, #4]
    6b9a:	1c3b      	adds	r3, r7, #0
    6b9c:	330c      	adds	r3, #12
    6b9e:	1c10      	adds	r0, r2, #0
    6ba0:	1c19      	adds	r1, r3, #0
    6ba2:	f7ff fb17 	bl	61d4 <MessageBuffer_readUInt32>

  if (MessageBuffer_getError(_rpc_buff) || MessageBuffer_availableToRead(_rpc_buff)) {
    6ba6:	687b      	ldr	r3, [r7, #4]
    6ba8:	1c18      	adds	r0, r3, #0
    6baa:	f7ff fa29 	bl	6000 <MessageBuffer_getError>
    6bae:	1c03      	adds	r3, r0, #0
    6bb0:	2b00      	cmp	r3, #0
    6bb2:	d106      	bne.n	6bc2 <rpc_client_otaUpdateWrite_handler+0x4e>
    6bb4:	687b      	ldr	r3, [r7, #4]
    6bb6:	1c18      	adds	r0, r3, #0
    6bb8:	f7ff fa14 	bl	5fe4 <MessageBuffer_availableToRead>
    6bbc:	1c03      	adds	r3, r0, #0
    6bbe:	2b00      	cmp	r3, #0
    6bc0:	d003      	beq.n	6bca <rpc_client_otaUpdateWrite_handler+0x56>
    MessageWriter_writeUInt8(RPC_STATUS_ERROR_ARGS_R);
    6bc2:	2015      	movs	r0, #21
    6bc4:	f7ff f96c 	bl	5ea0 <MessageWriter_writeUInt8>
    6bc8:	e016      	b.n	6bf8 <rpc_client_otaUpdateWrite_handler+0x84>
    return;
  }

  /* Call the actual function */
  bool _rpc_ret_val = rpc_client_otaUpdateWrite_impl(offset, chunk, crc32);
    6bca:	69ba      	ldr	r2, [r7, #24]
    6bcc:	68fd      	ldr	r5, [r7, #12]
    6bce:	1c3c      	adds	r4, r7, #0
    6bd0:	341f      	adds	r4, #31
    6bd2:	1c3b      	adds	r3, r7, #0
    6bd4:	3310      	adds	r3, #16
    6bd6:	1c10      	adds	r0, r2, #0
    6bd8:	6819      	ldr	r1, [r3, #0]
    6bda:	685a      	ldr	r2, [r3, #4]
    6bdc:	1c2b      	adds	r3, r5, #0
    6bde:	f7ff fe99 	bl	6914 <rpc_client_otaUpdateWrite_impl>
    6be2:	1c03      	adds	r3, r0, #0
    6be4:	7023      	strb	r3, [r4, #0]

  MessageWriter_writeUInt8(RPC_STATUS_OK);
    6be6:	2000      	movs	r0, #0
    6be8:	f7ff f95a 	bl	5ea0 <MessageWriter_writeUInt8>
  /* Serialize outputs */
  MessageWriter_writeBool(_rpc_ret_val);
    6bec:	1c3b      	adds	r3, r7, #0
    6bee:	331f      	adds	r3, #31
    6bf0:	781b      	ldrb	r3, [r3, #0]
    6bf2:	1c18      	adds	r0, r3, #0
    6bf4:	f7ff f940 	bl	5e78 <MessageWriter_writeBool>
}
    6bf8:	46bd      	mov	sp, r7
    6bfa:	b008      	add	sp, #32
    6bfc:	bdb0      	pop	{r4, r5, r7, pc}
    6bfe:	46c0      	nop			; (mov r8, r8)

00006c00 <rpc_client_otaUpdateFinish_handler>:


bool rpc_client_otaUpdateFinish_impl(void);

static
void rpc_client_otaUpdateFinish_handler(MessageBuffer* _rpc_buff) {
    6c00:	b590      	push	{r4, r7, lr}
    6c02:	b085      	sub	sp, #20
    6c04:	af00      	add	r7, sp, #0
    6c06:	6078      	str	r0, [r7, #4]
  (void)_rpc_buff;

  /* Call the actual function */
  bool _rpc_ret_val = rpc_client_otaUpdateFinish_impl();
    6c08:	1c3c      	adds	r4, r7, #0
    6c0a:	340f      	adds	r4, #15
    6c0c:	f7ff fe90 	bl	6930 <rpc_client_otaUpdateFinish_impl>
    6c10:	1c03      	adds	r3, r0, #0
    6c12:	7023      	strb	r3, [r4, #0]

  MessageWriter_writeUInt8(RPC_STATUS_OK);
    6c14:	2000      	movs	r0, #0
    6c16:	f7ff f943 	bl	5ea0 <MessageWriter_writeUInt8>
  /* Serialize outputs */
  MessageWriter_writeBool(_rpc_ret_val);
    6c1a:	1c3b      	adds	r3, r7, #0
    6c1c:	330f      	adds	r3, #15
    6c1e:	781b      	ldrb	r3, [r3, #0]
    6c20:	1c18      	adds	r0, r3, #0
    6c22:	f7ff f929 	bl	5e78 <MessageWriter_writeBool>
}
    6c26:	46bd      	mov	sp, r7
    6c28:	b005      	add	sp, #20
    6c2a:	bd90      	pop	{r4, r7, pc}

00006c2c <rpc_client_otaUpdateCancel_handler>:


void rpc_client_otaUpdateCancel_impl(void);

static
void rpc_client_otaUpdateCancel_handler(MessageBuffer* _rpc_buff) {
    6c2c:	b580      	push	{r7, lr}
    6c2e:	b082      	sub	sp, #8
    6c30:	af00      	add	r7, sp, #0
    6c32:	6078      	str	r0, [r7, #4]
  (void)_rpc_buff;

  /* Call the actual function */
  rpc_client_otaUpdateCancel_impl();
    6c34:	f7ff fe82 	bl	693c <rpc_client_otaUpdateCancel_impl>

  MessageWriter_writeUInt8(RPC_STATUS_OK);
    6c38:	2000      	movs	r0, #0
    6c3a:	f7ff f931 	bl	5ea0 <MessageWriter_writeUInt8>
}
    6c3e:	46bd      	mov	sp, r7
    6c40:	b002      	add	sp, #8
    6c42:	bd80      	pop	{r7, pc}

00006c44 <rpc_find_uid_handler>:
 *      Author: DengS1
 */

# include "BlynkRpcClient.h"

rpc_handler_t rpc_find_uid_handler(uint16_t uid) {
    6c44:	b580      	push	{r7, lr}
    6c46:	b082      	sub	sp, #8
    6c48:	af00      	add	r7, sp, #0
    6c4a:	1c02      	adds	r2, r0, #0
    6c4c:	1dbb      	adds	r3, r7, #6
    6c4e:	801a      	strh	r2, [r3, #0]
  switch (uid) {
    6c50:	1dbb      	adds	r3, r7, #6
    6c52:	881b      	ldrh	r3, [r3, #0]
    6c54:	4a22      	ldr	r2, [pc, #136]	; (6ce0 <rpc_find_uid_handler+0x9c>)
    6c56:	4293      	cmp	r3, r2
    6c58:	d031      	beq.n	6cbe <rpc_find_uid_handler+0x7a>
    6c5a:	4a21      	ldr	r2, [pc, #132]	; (6ce0 <rpc_find_uid_handler+0x9c>)
    6c5c:	4293      	cmp	r3, r2
    6c5e:	dc12      	bgt.n	6c86 <rpc_find_uid_handler+0x42>
    6c60:	22c1      	movs	r2, #193	; 0xc1
    6c62:	0052      	lsls	r2, r2, #1
    6c64:	4293      	cmp	r3, r2
    6c66:	d024      	beq.n	6cb2 <rpc_find_uid_handler+0x6e>
    6c68:	22c1      	movs	r2, #193	; 0xc1
    6c6a:	0052      	lsls	r2, r2, #1
    6c6c:	4293      	cmp	r3, r2
    6c6e:	dc03      	bgt.n	6c78 <rpc_find_uid_handler+0x34>
    6c70:	4a1c      	ldr	r2, [pc, #112]	; (6ce4 <rpc_find_uid_handler+0xa0>)
    6c72:	4293      	cmp	r3, r2
    6c74:	d01b      	beq.n	6cae <rpc_find_uid_handler+0x6a>
    6c76:	e02e      	b.n	6cd6 <rpc_find_uid_handler+0x92>
    6c78:	4a1b      	ldr	r2, [pc, #108]	; (6ce8 <rpc_find_uid_handler+0xa4>)
    6c7a:	4293      	cmp	r3, r2
    6c7c:	d01b      	beq.n	6cb6 <rpc_find_uid_handler+0x72>
    6c7e:	4a1b      	ldr	r2, [pc, #108]	; (6cec <rpc_find_uid_handler+0xa8>)
    6c80:	4293      	cmp	r3, r2
    6c82:	d01a      	beq.n	6cba <rpc_find_uid_handler+0x76>
    6c84:	e027      	b.n	6cd6 <rpc_find_uid_handler+0x92>
    6c86:	4a1a      	ldr	r2, [pc, #104]	; (6cf0 <rpc_find_uid_handler+0xac>)
    6c88:	4293      	cmp	r3, r2
    6c8a:	d01e      	beq.n	6cca <rpc_find_uid_handler+0x86>
    6c8c:	4a18      	ldr	r2, [pc, #96]	; (6cf0 <rpc_find_uid_handler+0xac>)
    6c8e:	4293      	cmp	r3, r2
    6c90:	dc06      	bgt.n	6ca0 <rpc_find_uid_handler+0x5c>
    6c92:	4a18      	ldr	r2, [pc, #96]	; (6cf4 <rpc_find_uid_handler+0xb0>)
    6c94:	4293      	cmp	r3, r2
    6c96:	d014      	beq.n	6cc2 <rpc_find_uid_handler+0x7e>
    6c98:	4a17      	ldr	r2, [pc, #92]	; (6cf8 <rpc_find_uid_handler+0xb4>)
    6c9a:	4293      	cmp	r3, r2
    6c9c:	d013      	beq.n	6cc6 <rpc_find_uid_handler+0x82>
    6c9e:	e01a      	b.n	6cd6 <rpc_find_uid_handler+0x92>
    6ca0:	4a16      	ldr	r2, [pc, #88]	; (6cfc <rpc_find_uid_handler+0xb8>)
    6ca2:	4293      	cmp	r3, r2
    6ca4:	d013      	beq.n	6cce <rpc_find_uid_handler+0x8a>
    6ca6:	4a16      	ldr	r2, [pc, #88]	; (6d00 <rpc_find_uid_handler+0xbc>)
    6ca8:	4293      	cmp	r3, r2
    6caa:	d012      	beq.n	6cd2 <rpc_find_uid_handler+0x8e>
    6cac:	e013      	b.n	6cd6 <rpc_find_uid_handler+0x92>
  case RPC_UID_MCU_PING:                  return rpc_mcu_ping_handler;
    6cae:	4b15      	ldr	r3, [pc, #84]	; (6d04 <rpc_find_uid_handler+0xc0>)
    6cb0:	e012      	b.n	6cd8 <rpc_find_uid_handler+0x94>
  case RPC_UID_MCU_REBOOT:                return rpc_mcu_reboot_handler;
    6cb2:	4b15      	ldr	r3, [pc, #84]	; (6d08 <rpc_find_uid_handler+0xc4>)
    6cb4:	e010      	b.n	6cd8 <rpc_find_uid_handler+0x94>
  case RPC_UID_MCU_HASUID:                return rpc_mcu_hasUID_handler;
    6cb6:	4b15      	ldr	r3, [pc, #84]	; (6d0c <rpc_find_uid_handler+0xc8>)
    6cb8:	e00e      	b.n	6cd8 <rpc_find_uid_handler+0x94>

  case RPC_UID_CLIENT_BLYNKSTATECHANGE:   return rpc_client_blynkStateChange_handler;
    6cba:	4b15      	ldr	r3, [pc, #84]	; (6d10 <rpc_find_uid_handler+0xcc>)
    6cbc:	e00c      	b.n	6cd8 <rpc_find_uid_handler+0x94>
  case RPC_UID_CLIENT_BLYNKVPINCHANGE:    return rpc_client_blynkVPinChange_handler;
    6cbe:	4b15      	ldr	r3, [pc, #84]	; (6d14 <rpc_find_uid_handler+0xd0>)
    6cc0:	e00a      	b.n	6cd8 <rpc_find_uid_handler+0x94>

  case RPC_UID_CLIENT_PROCESSEVENT:       return rpc_client_processEvent_handler;
    6cc2:	4b15      	ldr	r3, [pc, #84]	; (6d18 <rpc_find_uid_handler+0xd4>)
    6cc4:	e008      	b.n	6cd8 <rpc_find_uid_handler+0x94>
  case RPC_UID_CLIENT_OTAUPDATEAVAILABLE: return rpc_client_otaUpdateAvailable_handler;
    6cc6:	4b15      	ldr	r3, [pc, #84]	; (6d1c <rpc_find_uid_handler+0xd8>)
    6cc8:	e006      	b.n	6cd8 <rpc_find_uid_handler+0x94>
  case RPC_UID_CLIENT_OTAUPDATEWRITE:     return rpc_client_otaUpdateWrite_handler;
    6cca:	4b15      	ldr	r3, [pc, #84]	; (6d20 <rpc_find_uid_handler+0xdc>)
    6ccc:	e004      	b.n	6cd8 <rpc_find_uid_handler+0x94>
  case RPC_UID_CLIENT_OTAUPDATEFINISH:    return rpc_client_otaUpdateFinish_handler;
    6cce:	4b15      	ldr	r3, [pc, #84]	; (6d24 <rpc_find_uid_handler+0xe0>)
    6cd0:	e002      	b.n	6cd8 <rpc_find_uid_handler+0x94>
  case RPC_UID_CLIENT_OTAUPDATECANCEL:    return rpc_client_otaUpdateCancel_handler;
    6cd2:	4b15      	ldr	r3, [pc, #84]	; (6d28 <rpc_find_uid_handler+0xe4>)
    6cd4:	e000      	b.n	6cd8 <rpc_find_uid_handler+0x94>

  default: return NULL;
    6cd6:	2300      	movs	r3, #0
  }
}
    6cd8:	1c18      	adds	r0, r3, #0
    6cda:	46bd      	mov	sp, r7
    6cdc:	b002      	add	sp, #8
    6cde:	bd80      	pop	{r7, pc}
    6ce0:	00000412 	.word	0x00000412
    6ce4:	00000181 	.word	0x00000181
    6ce8:	00000183 	.word	0x00000183
    6cec:	00000411 	.word	0x00000411
    6cf0:	00000442 	.word	0x00000442
    6cf4:	00000421 	.word	0x00000421
    6cf8:	00000441 	.word	0x00000441
    6cfc:	00000443 	.word	0x00000443
    6d00:	00000444 	.word	0x00000444
    6d04:	00006945 	.word	0x00006945
    6d08:	00006959 	.word	0x00006959
    6d0c:	00006985 	.word	0x00006985
    6d10:	00006a49 	.word	0x00006a49
    6d14:	000069ed 	.word	0x000069ed
    6d18:	00006a8d 	.word	0x00006a8d
    6d1c:	00006ad1 	.word	0x00006ad1
    6d20:	00006b75 	.word	0x00006b75
    6d24:	00006c01 	.word	0x00006c01
    6d28:	00006c2d 	.word	0x00006c2d

00006d2c <rpc_invoke_handler>:

RpcStatus rpc_invoke_handler(uint16_t uid, MessageBuffer* buff) {
    6d2c:	b580      	push	{r7, lr}
    6d2e:	b084      	sub	sp, #16
    6d30:	af00      	add	r7, sp, #0
    6d32:	1c02      	adds	r2, r0, #0
    6d34:	6039      	str	r1, [r7, #0]
    6d36:	1dbb      	adds	r3, r7, #6
    6d38:	801a      	strh	r2, [r3, #0]
  rpc_handler_t handler = rpc_find_uid_handler(uid);
    6d3a:	1dbb      	adds	r3, r7, #6
    6d3c:	881b      	ldrh	r3, [r3, #0]
    6d3e:	1c18      	adds	r0, r3, #0
    6d40:	f7ff ff80 	bl	6c44 <rpc_find_uid_handler>
    6d44:	1c03      	adds	r3, r0, #0
    6d46:	60fb      	str	r3, [r7, #12]
  if (handler) {
    6d48:	68fb      	ldr	r3, [r7, #12]
    6d4a:	2b00      	cmp	r3, #0
    6d4c:	d005      	beq.n	6d5a <rpc_invoke_handler+0x2e>
    handler(buff);
    6d4e:	683a      	ldr	r2, [r7, #0]
    6d50:	68fb      	ldr	r3, [r7, #12]
    6d52:	1c10      	adds	r0, r2, #0
    6d54:	4798      	blx	r3
    return RPC_STATUS_OK;
    6d56:	2300      	movs	r3, #0
    6d58:	e000      	b.n	6d5c <rpc_invoke_handler+0x30>
  } else {
    return RPC_STATUS_ERROR_UID;
    6d5a:	2313      	movs	r3, #19
  }
}
    6d5c:	1c18      	adds	r0, r3, #0
    6d5e:	46bd      	mov	sp, r7
    6d60:	b004      	add	sp, #16
    6d62:	bd80      	pop	{r7, pc}

00006d64 <rpc_mcu_hasUID_impl>:

bool rpc_mcu_hasUID_impl(uint16_t uid) {
    6d64:	b580      	push	{r7, lr}
    6d66:	b082      	sub	sp, #8
    6d68:	af00      	add	r7, sp, #0
    6d6a:	1c02      	adds	r2, r0, #0
    6d6c:	1dbb      	adds	r3, r7, #6
    6d6e:	801a      	strh	r2, [r3, #0]
  return rpc_find_uid_handler(uid) != NULL;
    6d70:	1dbb      	adds	r3, r7, #6
    6d72:	881b      	ldrh	r3, [r3, #0]
    6d74:	1c18      	adds	r0, r3, #0
    6d76:	f7ff ff65 	bl	6c44 <rpc_find_uid_handler>
    6d7a:	1c03      	adds	r3, r0, #0
    6d7c:	1e5a      	subs	r2, r3, #1
    6d7e:	4193      	sbcs	r3, r2
    6d80:	b2db      	uxtb	r3, r3
}
    6d82:	1c18      	adds	r0, r3, #0
    6d84:	46bd      	mov	sp, r7
    6d86:	b002      	add	sp, #8
    6d88:	bd80      	pop	{r7, pc}
    6d8a:	46c0      	nop			; (mov r8, r8)

00006d8c <exit>:
    6d8c:	b538      	push	{r3, r4, r5, lr}
    6d8e:	1c05      	adds	r5, r0, #0
    6d90:	f001 fc04 	bl	859c <__destroy_global_chain>
    6d94:	f001 fbe8 	bl	8568 <__fini_cpp>
    6d98:	4c08      	ldr	r4, [pc, #32]	; (6dbc <exit+0x30>)
    6d9a:	6823      	ldr	r3, [r4, #0]
    6d9c:	2b00      	cmp	r3, #0
    6d9e:	d002      	beq.n	6da6 <exit+0x1a>
    6da0:	4798      	blx	r3
    6da2:	2000      	movs	r0, #0
    6da4:	6020      	str	r0, [r4, #0]
    6da6:	4c06      	ldr	r4, [pc, #24]	; (6dc0 <exit+0x34>)
    6da8:	6821      	ldr	r1, [r4, #0]
    6daa:	2900      	cmp	r1, #0
    6dac:	d002      	beq.n	6db4 <exit+0x28>
    6dae:	4788      	blx	r1
    6db0:	2200      	movs	r2, #0
    6db2:	6022      	str	r2, [r4, #0]
    6db4:	1c28      	adds	r0, r5, #0
    6db6:	f7fe fb51 	bl	545c <_ExitProcess>
    6dba:	bd38      	pop	{r3, r4, r5, pc}
    6dbc:	20000ac0 	.word	0x20000ac0
    6dc0:	20000ac4 	.word	0x20000ac4

00006dc4 <__strtoul>:
    6dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    6dc6:	b087      	sub	sp, #28
    6dc8:	9105      	str	r1, [sp, #20]
    6dca:	9301      	str	r3, [sp, #4]
    6dcc:	990d      	ldr	r1, [sp, #52]	; 0x34
    6dce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6dd0:	9200      	str	r2, [sp, #0]
    6dd2:	2200      	movs	r2, #0
    6dd4:	600a      	str	r2, [r1, #0]
    6dd6:	1c07      	adds	r7, r0, #0
    6dd8:	601a      	str	r2, [r3, #0]
    6dda:	4290      	cmp	r0, r2
    6ddc:	db16      	blt.n	6e0c <__strtoul+0x48>
    6dde:	2801      	cmp	r0, #1
    6de0:	d014      	beq.n	6e0c <__strtoul+0x48>
    6de2:	2824      	cmp	r0, #36	; 0x24
    6de4:	dc12      	bgt.n	6e0c <__strtoul+0x48>
    6de6:	9805      	ldr	r0, [sp, #20]
    6de8:	4290      	cmp	r0, r2
    6dea:	dd07      	ble.n	6dfc <__strtoul+0x38>
    6dec:	9c00      	ldr	r4, [sp, #0]
    6dee:	9801      	ldr	r0, [sp, #4]
    6df0:	1c11      	adds	r1, r2, #0
    6df2:	47a0      	blx	r4
    6df4:	2601      	movs	r6, #1
    6df6:	1c04      	adds	r4, r0, #0
    6df8:	1c35      	adds	r5, r6, #0
    6dfa:	e002      	b.n	6e02 <__strtoul+0x3e>
    6dfc:	1c14      	adds	r4, r2, #0
    6dfe:	1c16      	adds	r6, r2, #0
    6e00:	2540      	movs	r5, #64	; 0x40
    6e02:	2200      	movs	r2, #0
    6e04:	9203      	str	r2, [sp, #12]
    6e06:	4297      	cmp	r7, r2
    6e08:	d009      	beq.n	6e1e <__strtoul+0x5a>
    6e0a:	e002      	b.n	6e12 <__strtoul+0x4e>
    6e0c:	1c14      	adds	r4, r2, #0
    6e0e:	1c16      	adds	r6, r2, #0
    6e10:	2540      	movs	r5, #64	; 0x40
    6e12:	2101      	movs	r1, #1
    6e14:	4248      	negs	r0, r1
    6e16:	1c39      	adds	r1, r7, #0
    6e18:	f7fb f966 	bl	20e8 <__aeabi_uidiv>
    6e1c:	9003      	str	r0, [sp, #12]
    6e1e:	2300      	movs	r3, #0
    6e20:	9302      	str	r3, [sp, #8]
    6e22:	9304      	str	r3, [sp, #16]
    6e24:	9805      	ldr	r0, [sp, #20]
    6e26:	4286      	cmp	r6, r0
    6e28:	dd00      	ble.n	6e2c <__strtoul+0x68>
    6e2a:	e09e      	b.n	6f6a <__strtoul+0x1a6>
    6e2c:	1c62      	adds	r2, r4, #1
    6e2e:	d100      	bne.n	6e32 <__strtoul+0x6e>
    6e30:	e09b      	b.n	6f6a <__strtoul+0x1a6>
    6e32:	2260      	movs	r2, #96	; 0x60
    6e34:	4215      	tst	r5, r2
    6e36:	d000      	beq.n	6e3a <__strtoul+0x76>
    6e38:	e097      	b.n	6f6a <__strtoul+0x1a6>
    6e3a:	1e68      	subs	r0, r5, #1
    6e3c:	280f      	cmp	r0, #15
    6e3e:	d8f1      	bhi.n	6e24 <__strtoul+0x60>
    6e40:	f7fb f93e 	bl	20c0 <__gnu_thumb1_case_sqi>
    6e44:	3ff02e08 	.word	0x3ff02e08
    6e48:	52f0f0f0 	.word	0x52f0f0f0
    6e4c:	f0f0f0f0 	.word	0xf0f0f0f0
    6e50:	52f0f0f0 	.word	0x52f0f0f0
    6e54:	1c20      	adds	r0, r4, #0
    6e56:	f001 f95f 	bl	8118 <isspace>
    6e5a:	1e02      	subs	r2, r0, #0
    6e5c:	d009      	beq.n	6e72 <__strtoul+0xae>
    6e5e:	2100      	movs	r1, #0
    6e60:	9c00      	ldr	r4, [sp, #0]
    6e62:	9801      	ldr	r0, [sp, #4]
    6e64:	1c0a      	adds	r2, r1, #0
    6e66:	47a0      	blx	r4
    6e68:	1c04      	adds	r4, r0, #0
    6e6a:	9804      	ldr	r0, [sp, #16]
    6e6c:	3001      	adds	r0, #1
    6e6e:	9004      	str	r0, [sp, #16]
    6e70:	e7d8      	b.n	6e24 <__strtoul+0x60>
    6e72:	2c2b      	cmp	r4, #43	; 0x2b
    6e74:	d107      	bne.n	6e86 <__strtoul+0xc2>
    6e76:	9d00      	ldr	r5, [sp, #0]
    6e78:	9801      	ldr	r0, [sp, #4]
    6e7a:	1c11      	adds	r1, r2, #0
    6e7c:	47a8      	blx	r5
    6e7e:	3601      	adds	r6, #1
    6e80:	1c04      	adds	r4, r0, #0
    6e82:	2502      	movs	r5, #2
    6e84:	e7ce      	b.n	6e24 <__strtoul+0x60>
    6e86:	2502      	movs	r5, #2
    6e88:	2c2d      	cmp	r4, #45	; 0x2d
    6e8a:	d1cb      	bne.n	6e24 <__strtoul+0x60>
    6e8c:	1c11      	adds	r1, r2, #0
    6e8e:	9801      	ldr	r0, [sp, #4]
    6e90:	9b00      	ldr	r3, [sp, #0]
    6e92:	4798      	blx	r3
    6e94:	990d      	ldr	r1, [sp, #52]	; 0x34
    6e96:	2201      	movs	r2, #1
    6e98:	3601      	adds	r6, #1
    6e9a:	1c04      	adds	r4, r0, #0
    6e9c:	600a      	str	r2, [r1, #0]
    6e9e:	e7c1      	b.n	6e24 <__strtoul+0x60>
    6ea0:	2f00      	cmp	r7, #0
    6ea2:	d002      	beq.n	6eaa <__strtoul+0xe6>
    6ea4:	2508      	movs	r5, #8
    6ea6:	2f10      	cmp	r7, #16
    6ea8:	d1bc      	bne.n	6e24 <__strtoul+0x60>
    6eaa:	2508      	movs	r5, #8
    6eac:	2c30      	cmp	r4, #48	; 0x30
    6eae:	d1b9      	bne.n	6e24 <__strtoul+0x60>
    6eb0:	2100      	movs	r1, #0
    6eb2:	9c00      	ldr	r4, [sp, #0]
    6eb4:	9801      	ldr	r0, [sp, #4]
    6eb6:	1c0a      	adds	r2, r1, #0
    6eb8:	47a0      	blx	r4
    6eba:	3601      	adds	r6, #1
    6ebc:	1c04      	adds	r4, r0, #0
    6ebe:	2504      	movs	r5, #4
    6ec0:	e7b0      	b.n	6e24 <__strtoul+0x60>
    6ec2:	2c58      	cmp	r4, #88	; 0x58
    6ec4:	d001      	beq.n	6eca <__strtoul+0x106>
    6ec6:	2c78      	cmp	r4, #120	; 0x78
    6ec8:	d109      	bne.n	6ede <__strtoul+0x11a>
    6eca:	2100      	movs	r1, #0
    6ecc:	9801      	ldr	r0, [sp, #4]
    6ece:	1c0a      	adds	r2, r1, #0
    6ed0:	9b00      	ldr	r3, [sp, #0]
    6ed2:	4798      	blx	r3
    6ed4:	3601      	adds	r6, #1
    6ed6:	1c04      	adds	r4, r0, #0
    6ed8:	2508      	movs	r5, #8
    6eda:	2710      	movs	r7, #16
    6edc:	e7a2      	b.n	6e24 <__strtoul+0x60>
    6ede:	2510      	movs	r5, #16
    6ee0:	2f00      	cmp	r7, #0
    6ee2:	d19f      	bne.n	6e24 <__strtoul+0x60>
    6ee4:	2708      	movs	r7, #8
    6ee6:	e79d      	b.n	6e24 <__strtoul+0x60>
    6ee8:	2f00      	cmp	r7, #0
    6eea:	d100      	bne.n	6eee <__strtoul+0x12a>
    6eec:	270a      	movs	r7, #10
    6eee:	9803      	ldr	r0, [sp, #12]
    6ef0:	2800      	cmp	r0, #0
    6ef2:	d105      	bne.n	6f00 <__strtoul+0x13c>
    6ef4:	2201      	movs	r2, #1
    6ef6:	4250      	negs	r0, r2
    6ef8:	1c39      	adds	r1, r7, #0
    6efa:	f7fb f8f5 	bl	20e8 <__aeabi_uidiv>
    6efe:	9003      	str	r0, [sp, #12]
    6f00:	1c20      	adds	r0, r4, #0
    6f02:	3830      	subs	r0, #48	; 0x30
    6f04:	2809      	cmp	r0, #9
    6f06:	d802      	bhi.n	6f0e <__strtoul+0x14a>
    6f08:	42b8      	cmp	r0, r7
    6f0a:	db11      	blt.n	6f30 <__strtoul+0x16c>
    6f0c:	e00b      	b.n	6f26 <__strtoul+0x162>
    6f0e:	1c20      	adds	r0, r4, #0
    6f10:	f001 f8f2 	bl	80f8 <isalpha>
    6f14:	2800      	cmp	r0, #0
    6f16:	d006      	beq.n	6f26 <__strtoul+0x162>
    6f18:	1c20      	adds	r0, r4, #0
    6f1a:	f001 f91d 	bl	8158 <toupper>
    6f1e:	1c01      	adds	r1, r0, #0
    6f20:	3936      	subs	r1, #54	; 0x36
    6f22:	42b9      	cmp	r1, r7
    6f24:	dd03      	ble.n	6f2e <__strtoul+0x16a>
    6f26:	2d10      	cmp	r5, #16
    6f28:	d11d      	bne.n	6f66 <__strtoul+0x1a2>
    6f2a:	2520      	movs	r5, #32
    6f2c:	e77a      	b.n	6e24 <__strtoul+0x60>
    6f2e:	3837      	subs	r0, #55	; 0x37
    6f30:	9d02      	ldr	r5, [sp, #8]
    6f32:	9c03      	ldr	r4, [sp, #12]
    6f34:	2301      	movs	r3, #1
    6f36:	42a5      	cmp	r5, r4
    6f38:	d801      	bhi.n	6f3e <__strtoul+0x17a>
    6f3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6f3c:	681b      	ldr	r3, [r3, #0]
    6f3e:	9a02      	ldr	r2, [sp, #8]
    6f40:	b2c5      	uxtb	r5, r0
    6f42:	437a      	muls	r2, r7
    6f44:	43d1      	mvns	r1, r2
    6f46:	428d      	cmp	r5, r1
    6f48:	d900      	bls.n	6f4c <__strtoul+0x188>
    6f4a:	2301      	movs	r3, #1
    6f4c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    6f4e:	1880      	adds	r0, r0, r2
    6f50:	2100      	movs	r1, #0
    6f52:	6023      	str	r3, [r4, #0]
    6f54:	9002      	str	r0, [sp, #8]
    6f56:	9d00      	ldr	r5, [sp, #0]
    6f58:	9801      	ldr	r0, [sp, #4]
    6f5a:	1c0a      	adds	r2, r1, #0
    6f5c:	47a8      	blx	r5
    6f5e:	3601      	adds	r6, #1
    6f60:	1c04      	adds	r4, r0, #0
    6f62:	2510      	movs	r5, #16
    6f64:	e75e      	b.n	6e24 <__strtoul+0x60>
    6f66:	2540      	movs	r5, #64	; 0x40
    6f68:	e75c      	b.n	6e24 <__strtoul+0x60>
    6f6a:	2734      	movs	r7, #52	; 0x34
    6f6c:	403d      	ands	r5, r7
    6f6e:	d103      	bne.n	6f78 <__strtoul+0x1b4>
    6f70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6f72:	9502      	str	r5, [sp, #8]
    6f74:	601d      	str	r5, [r3, #0]
    6f76:	e004      	b.n	6f82 <__strtoul+0x1be>
    6f78:	9d04      	ldr	r5, [sp, #16]
    6f7a:	3e01      	subs	r6, #1
    6f7c:	990c      	ldr	r1, [sp, #48]	; 0x30
    6f7e:	1976      	adds	r6, r6, r5
    6f80:	600e      	str	r6, [r1, #0]
    6f82:	1c21      	adds	r1, r4, #0
    6f84:	9801      	ldr	r0, [sp, #4]
    6f86:	2201      	movs	r2, #1
    6f88:	9c00      	ldr	r4, [sp, #0]
    6f8a:	47a0      	blx	r4
    6f8c:	9802      	ldr	r0, [sp, #8]
    6f8e:	b007      	add	sp, #28
    6f90:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006f92 <strchr>:
    6f92:	b500      	push	{lr}
    6f94:	b2c9      	uxtb	r1, r1
    6f96:	7803      	ldrb	r3, [r0, #0]
    6f98:	1c42      	adds	r2, r0, #1
    6f9a:	2b00      	cmp	r3, #0
    6f9c:	d003      	beq.n	6fa6 <strchr+0x14>
    6f9e:	428b      	cmp	r3, r1
    6fa0:	d005      	beq.n	6fae <strchr+0x1c>
    6fa2:	1c10      	adds	r0, r2, #0
    6fa4:	e7f7      	b.n	6f96 <strchr+0x4>
    6fa6:	424b      	negs	r3, r1
    6fa8:	4159      	adcs	r1, r3
    6faa:	4249      	negs	r1, r1
    6fac:	4008      	ands	r0, r1
    6fae:	bd00      	pop	{pc}

00006fb0 <memset>:
    6fb0:	b510      	push	{r4, lr}
    6fb2:	1c04      	adds	r4, r0, #0
    6fb4:	f000 f802 	bl	6fbc <__fill_mem>
    6fb8:	1c20      	adds	r0, r4, #0
    6fba:	bd10      	pop	{r4, pc}

00006fbc <__fill_mem>:
    6fbc:	b530      	push	{r4, r5, lr}
    6fbe:	b2c9      	uxtb	r1, r1
    6fc0:	1c03      	adds	r3, r0, #0
    6fc2:	2a1f      	cmp	r2, #31
    6fc4:	d931      	bls.n	702a <__fill_mem+0x6e>
    6fc6:	4244      	negs	r4, r0
    6fc8:	2303      	movs	r3, #3
    6fca:	4023      	ands	r3, r4
    6fcc:	d005      	beq.n	6fda <__fill_mem+0x1e>
    6fce:	1ad2      	subs	r2, r2, r3
    6fd0:	18c5      	adds	r5, r0, r3
    6fd2:	7001      	strb	r1, [r0, #0]
    6fd4:	3001      	adds	r0, #1
    6fd6:	42a8      	cmp	r0, r5
    6fd8:	d1fb      	bne.n	6fd2 <__fill_mem+0x16>
    6fda:	2900      	cmp	r1, #0
    6fdc:	d005      	beq.n	6fea <__fill_mem+0x2e>
    6fde:	060d      	lsls	r5, r1, #24
    6fe0:	040c      	lsls	r4, r1, #16
    6fe2:	432c      	orrs	r4, r5
    6fe4:	020b      	lsls	r3, r1, #8
    6fe6:	4321      	orrs	r1, r4
    6fe8:	4319      	orrs	r1, r3
    6fea:	0954      	lsrs	r4, r2, #5
    6fec:	1c03      	adds	r3, r0, #0
    6fee:	2c00      	cmp	r4, #0
    6ff0:	d00e      	beq.n	7010 <__fill_mem+0x54>
    6ff2:	1c25      	adds	r5, r4, #0
    6ff4:	3d01      	subs	r5, #1
    6ff6:	6019      	str	r1, [r3, #0]
    6ff8:	6059      	str	r1, [r3, #4]
    6ffa:	6099      	str	r1, [r3, #8]
    6ffc:	60d9      	str	r1, [r3, #12]
    6ffe:	6119      	str	r1, [r3, #16]
    7000:	6159      	str	r1, [r3, #20]
    7002:	6199      	str	r1, [r3, #24]
    7004:	61d9      	str	r1, [r3, #28]
    7006:	3320      	adds	r3, #32
    7008:	2d00      	cmp	r5, #0
    700a:	d1f3      	bne.n	6ff4 <__fill_mem+0x38>
    700c:	0163      	lsls	r3, r4, #5
    700e:	18c3      	adds	r3, r0, r3
    7010:	06d0      	lsls	r0, r2, #27
    7012:	0f40      	lsrs	r0, r0, #29
    7014:	d007      	beq.n	7026 <__fill_mem+0x6a>
    7016:	1c04      	adds	r4, r0, #0
    7018:	1c1d      	adds	r5, r3, #0
    701a:	3c01      	subs	r4, #1
    701c:	c502      	stmia	r5!, {r1}
    701e:	2c00      	cmp	r4, #0
    7020:	d1fb      	bne.n	701a <__fill_mem+0x5e>
    7022:	0080      	lsls	r0, r0, #2
    7024:	181b      	adds	r3, r3, r0
    7026:	2403      	movs	r4, #3
    7028:	4022      	ands	r2, r4
    702a:	189d      	adds	r5, r3, r2
    702c:	2a00      	cmp	r2, #0
    702e:	d003      	beq.n	7038 <__fill_mem+0x7c>
    7030:	7019      	strb	r1, [r3, #0]
    7032:	3301      	adds	r3, #1
    7034:	42ab      	cmp	r3, r5
    7036:	d1fb      	bne.n	7030 <__fill_mem+0x74>
    7038:	bd30      	pop	{r4, r5, pc}

0000703a <memcpy>:
    703a:	b510      	push	{r4, lr}
    703c:	2300      	movs	r3, #0
    703e:	4293      	cmp	r3, r2
    7040:	d003      	beq.n	704a <memcpy+0x10>
    7042:	5ccc      	ldrb	r4, [r1, r3]
    7044:	54c4      	strb	r4, [r0, r3]
    7046:	3301      	adds	r3, #1
    7048:	e7f9      	b.n	703e <memcpy+0x4>
    704a:	bd10      	pop	{r4, pc}

0000704c <strcpy>:
    704c:	b500      	push	{lr}
    704e:	2300      	movs	r3, #0
    7050:	5cca      	ldrb	r2, [r1, r3]
    7052:	54c2      	strb	r2, [r0, r3]
    7054:	3301      	adds	r3, #1
    7056:	2a00      	cmp	r2, #0
    7058:	d1fa      	bne.n	7050 <strcpy+0x4>
    705a:	bd00      	pop	{pc}

0000705c <strlen>:
    705c:	b500      	push	{lr}
    705e:	1e43      	subs	r3, r0, #1
    7060:	3301      	adds	r3, #1
    7062:	781a      	ldrb	r2, [r3, #0]
    7064:	2a00      	cmp	r2, #0
    7066:	d1fb      	bne.n	7060 <strlen+0x4>
    7068:	1a18      	subs	r0, r3, r0
    706a:	bd00      	pop	{pc}

0000706c <long2str.isra.0>:
    706c:	b5f0      	push	{r4, r5, r6, r7, lr}
    706e:	b089      	sub	sp, #36	; 0x24
    7070:	9001      	str	r0, [sp, #4]
    7072:	1c1f      	adds	r7, r3, #0
    7074:	ab0e      	add	r3, sp, #56	; 0x38
    7076:	9103      	str	r1, [sp, #12]
    7078:	9207      	str	r2, [sp, #28]
    707a:	9002      	str	r0, [sp, #8]
    707c:	781a      	ldrb	r2, [r3, #0]
    707e:	1c08      	adds	r0, r1, #0
    7080:	9901      	ldr	r1, [sp, #4]
    7082:	ac0f      	add	r4, sp, #60	; 0x3c
    7084:	3801      	subs	r0, #1
    7086:	2600      	movs	r6, #0
    7088:	9204      	str	r2, [sp, #16]
    708a:	7825      	ldrb	r5, [r4, #0]
    708c:	7006      	strb	r6, [r0, #0]
    708e:	42b1      	cmp	r1, r6
    7090:	d117      	bne.n	70c2 <long2str.isra.0+0x56>
    7092:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7094:	42b3      	cmp	r3, r6
    7096:	d114      	bne.n	70c2 <long2str.isra.0+0x56>
    7098:	9b04      	ldr	r3, [sp, #16]
    709a:	2b00      	cmp	r3, #0
    709c:	d001      	beq.n	70a2 <long2str.isra.0+0x36>
    709e:	2d6f      	cmp	r5, #111	; 0x6f
    70a0:	d02f      	beq.n	7102 <long2str.isra.0+0x96>
    70a2:	2d64      	cmp	r5, #100	; 0x64
    70a4:	d002      	beq.n	70ac <long2str.isra.0+0x40>
    70a6:	2d69      	cmp	r5, #105	; 0x69
    70a8:	d000      	beq.n	70ac <long2str.isra.0+0x40>
    70aa:	e0a8      	b.n	71fe <long2str.isra.0+0x192>
    70ac:	2f02      	cmp	r7, #2
    70ae:	d102      	bne.n	70b6 <long2str.isra.0+0x4a>
    70b0:	9803      	ldr	r0, [sp, #12]
    70b2:	3802      	subs	r0, #2
    70b4:	e09f      	b.n	71f6 <long2str.isra.0+0x18a>
    70b6:	2f01      	cmp	r7, #1
    70b8:	d000      	beq.n	70bc <long2str.isra.0+0x50>
    70ba:	e0a0      	b.n	71fe <long2str.isra.0+0x192>
    70bc:	9803      	ldr	r0, [sp, #12]
    70be:	3802      	subs	r0, #2
    70c0:	e094      	b.n	71ec <long2str.isra.0+0x180>
    70c2:	2d69      	cmp	r5, #105	; 0x69
    70c4:	d00e      	beq.n	70e4 <long2str.isra.0+0x78>
    70c6:	d804      	bhi.n	70d2 <long2str.isra.0+0x66>
    70c8:	2d58      	cmp	r5, #88	; 0x58
    70ca:	d016      	beq.n	70fa <long2str.isra.0+0x8e>
    70cc:	2d64      	cmp	r5, #100	; 0x64
    70ce:	d11c      	bne.n	710a <long2str.isra.0+0x9e>
    70d0:	e008      	b.n	70e4 <long2str.isra.0+0x78>
    70d2:	2d75      	cmp	r5, #117	; 0x75
    70d4:	d004      	beq.n	70e0 <long2str.isra.0+0x74>
    70d6:	2d78      	cmp	r5, #120	; 0x78
    70d8:	d00f      	beq.n	70fa <long2str.isra.0+0x8e>
    70da:	2d6f      	cmp	r5, #111	; 0x6f
    70dc:	d115      	bne.n	710a <long2str.isra.0+0x9e>
    70de:	e010      	b.n	7102 <long2str.isra.0+0x96>
    70e0:	2700      	movs	r7, #0
    70e2:	e012      	b.n	710a <long2str.isra.0+0x9e>
    70e4:	9a01      	ldr	r2, [sp, #4]
    70e6:	2a00      	cmp	r2, #0
    70e8:	da0f      	bge.n	710a <long2str.isra.0+0x9e>
    70ea:	2480      	movs	r4, #128	; 0x80
    70ec:	0626      	lsls	r6, r4, #24
    70ee:	42b2      	cmp	r2, r6
    70f0:	d00d      	beq.n	710e <long2str.isra.0+0xa2>
    70f2:	4251      	negs	r1, r2
    70f4:	9101      	str	r1, [sp, #4]
    70f6:	9102      	str	r1, [sp, #8]
    70f8:	e009      	b.n	710e <long2str.isra.0+0xa2>
    70fa:	2700      	movs	r7, #0
    70fc:	1c3e      	adds	r6, r7, #0
    70fe:	2410      	movs	r4, #16
    7100:	e007      	b.n	7112 <long2str.isra.0+0xa6>
    7102:	2700      	movs	r7, #0
    7104:	1c3e      	adds	r6, r7, #0
    7106:	2408      	movs	r4, #8
    7108:	e003      	b.n	7112 <long2str.isra.0+0xa6>
    710a:	2600      	movs	r6, #0
    710c:	e000      	b.n	7110 <long2str.isra.0+0xa4>
    710e:	2601      	movs	r6, #1
    7110:	240a      	movs	r4, #10
    7112:	9000      	str	r0, [sp, #0]
    7114:	2000      	movs	r0, #0
    7116:	9006      	str	r0, [sp, #24]
    7118:	9802      	ldr	r0, [sp, #8]
    711a:	1c21      	adds	r1, r4, #0
    711c:	f7fb f828 	bl	2170 <__aeabi_uidivmod>
    7120:	9802      	ldr	r0, [sp, #8]
    7122:	9105      	str	r1, [sp, #20]
    7124:	1c21      	adds	r1, r4, #0
    7126:	f7fa ffdf 	bl	20e8 <__aeabi_uidiv>
    712a:	9a05      	ldr	r2, [sp, #20]
    712c:	9002      	str	r0, [sp, #8]
    712e:	2a09      	cmp	r2, #9
    7130:	d801      	bhi.n	7136 <long2str.isra.0+0xca>
    7132:	3230      	adds	r2, #48	; 0x30
    7134:	e005      	b.n	7142 <long2str.isra.0+0xd6>
    7136:	9a05      	ldr	r2, [sp, #20]
    7138:	3237      	adds	r2, #55	; 0x37
    713a:	2d78      	cmp	r5, #120	; 0x78
    713c:	d101      	bne.n	7142 <long2str.isra.0+0xd6>
    713e:	9a05      	ldr	r2, [sp, #20]
    7140:	3257      	adds	r2, #87	; 0x57
    7142:	9800      	ldr	r0, [sp, #0]
    7144:	9b06      	ldr	r3, [sp, #24]
    7146:	9902      	ldr	r1, [sp, #8]
    7148:	3801      	subs	r0, #1
    714a:	b2d2      	uxtb	r2, r2
    714c:	9000      	str	r0, [sp, #0]
    714e:	7002      	strb	r2, [r0, #0]
    7150:	3301      	adds	r3, #1
    7152:	2900      	cmp	r1, #0
    7154:	d001      	beq.n	715a <long2str.isra.0+0xee>
    7156:	9306      	str	r3, [sp, #24]
    7158:	e7de      	b.n	7118 <long2str.isra.0+0xac>
    715a:	1c01      	adds	r1, r0, #0
    715c:	2c08      	cmp	r4, #8
    715e:	d10b      	bne.n	7178 <long2str.isra.0+0x10c>
    7160:	9804      	ldr	r0, [sp, #16]
    7162:	2800      	cmp	r0, #0
    7164:	d008      	beq.n	7178 <long2str.isra.0+0x10c>
    7166:	2a30      	cmp	r2, #48	; 0x30
    7168:	d006      	beq.n	7178 <long2str.isra.0+0x10c>
    716a:	1c0b      	adds	r3, r1, #0
    716c:	3b01      	subs	r3, #1
    716e:	2230      	movs	r2, #48	; 0x30
    7170:	9300      	str	r3, [sp, #0]
    7172:	701a      	strb	r2, [r3, #0]
    7174:	9b06      	ldr	r3, [sp, #24]
    7176:	3302      	adds	r3, #2
    7178:	9807      	ldr	r0, [sp, #28]
    717a:	2802      	cmp	r0, #2
    717c:	d10f      	bne.n	719e <long2str.isra.0+0x132>
    717e:	2e00      	cmp	r6, #0
    7180:	d101      	bne.n	7186 <long2str.isra.0+0x11a>
    7182:	2f00      	cmp	r7, #0
    7184:	d002      	beq.n	718c <long2str.isra.0+0x120>
    7186:	9910      	ldr	r1, [sp, #64]	; 0x40
    7188:	3901      	subs	r1, #1
    718a:	9110      	str	r1, [sp, #64]	; 0x40
    718c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    718e:	9211      	str	r2, [sp, #68]	; 0x44
    7190:	2c10      	cmp	r4, #16
    7192:	d104      	bne.n	719e <long2str.isra.0+0x132>
    7194:	9804      	ldr	r0, [sp, #16]
    7196:	2800      	cmp	r0, #0
    7198:	d001      	beq.n	719e <long2str.isra.0+0x132>
    719a:	3a02      	subs	r2, #2
    719c:	9211      	str	r2, [sp, #68]	; 0x44
    719e:	9903      	ldr	r1, [sp, #12]
    71a0:	9800      	ldr	r0, [sp, #0]
    71a2:	9a11      	ldr	r2, [sp, #68]	; 0x44
    71a4:	1a09      	subs	r1, r1, r0
    71a6:	1889      	adds	r1, r1, r2
    71a8:	4a16      	ldr	r2, [pc, #88]	; (7204 <long2str.isra.0+0x198>)
    71aa:	4291      	cmp	r1, r2
    71ac:	dc26      	bgt.n	71fc <long2str.isra.0+0x190>
    71ae:	9900      	ldr	r1, [sp, #0]
    71b0:	18ca      	adds	r2, r1, r3
    71b2:	9911      	ldr	r1, [sp, #68]	; 0x44
    71b4:	1a12      	subs	r2, r2, r0
    71b6:	428a      	cmp	r2, r1
    71b8:	da03      	bge.n	71c2 <long2str.isra.0+0x156>
    71ba:	3801      	subs	r0, #1
    71bc:	2230      	movs	r2, #48	; 0x30
    71be:	7002      	strb	r2, [r0, #0]
    71c0:	e7f5      	b.n	71ae <long2str.isra.0+0x142>
    71c2:	2c10      	cmp	r4, #16
    71c4:	d10a      	bne.n	71dc <long2str.isra.0+0x170>
    71c6:	9c04      	ldr	r4, [sp, #16]
    71c8:	2c00      	cmp	r4, #0
    71ca:	d007      	beq.n	71dc <long2str.isra.0+0x170>
    71cc:	9b01      	ldr	r3, [sp, #4]
    71ce:	2b00      	cmp	r3, #0
    71d0:	d004      	beq.n	71dc <long2str.isra.0+0x170>
    71d2:	1e42      	subs	r2, r0, #1
    71d4:	2130      	movs	r1, #48	; 0x30
    71d6:	3802      	subs	r0, #2
    71d8:	7015      	strb	r5, [r2, #0]
    71da:	7001      	strb	r1, [r0, #0]
    71dc:	2e00      	cmp	r6, #0
    71de:	d002      	beq.n	71e6 <long2str.isra.0+0x17a>
    71e0:	3801      	subs	r0, #1
    71e2:	212d      	movs	r1, #45	; 0x2d
    71e4:	e008      	b.n	71f8 <long2str.isra.0+0x18c>
    71e6:	2f01      	cmp	r7, #1
    71e8:	d102      	bne.n	71f0 <long2str.isra.0+0x184>
    71ea:	3801      	subs	r0, #1
    71ec:	212b      	movs	r1, #43	; 0x2b
    71ee:	e003      	b.n	71f8 <long2str.isra.0+0x18c>
    71f0:	2f02      	cmp	r7, #2
    71f2:	d104      	bne.n	71fe <long2str.isra.0+0x192>
    71f4:	3801      	subs	r0, #1
    71f6:	2120      	movs	r1, #32
    71f8:	7001      	strb	r1, [r0, #0]
    71fa:	e000      	b.n	71fe <long2str.isra.0+0x192>
    71fc:	2000      	movs	r0, #0
    71fe:	b009      	add	sp, #36	; 0x24
    7200:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7202:	46c0      	nop			; (mov r8, r8)
    7204:	000001fd 	.word	0x000001fd

00007208 <__pformatter>:
    7208:	b5f0      	push	{r4, r5, r6, r7, lr}
    720a:	4cbb      	ldr	r4, [pc, #748]	; (74f8 <__pformatter+0x2f0>)
    720c:	1c1d      	adds	r5, r3, #0
    720e:	44a5      	add	sp, r4
    7210:	466b      	mov	r3, sp
    7212:	910d      	str	r1, [sp, #52]	; 0x34
    7214:	334a      	adds	r3, #74	; 0x4a
    7216:	2120      	movs	r1, #32
    7218:	2600      	movs	r6, #0
    721a:	900c      	str	r0, [sp, #48]	; 0x30
    721c:	7019      	strb	r1, [r3, #0]
    721e:	920b      	str	r2, [sp, #44]	; 0x2c
    7220:	9605      	str	r6, [sp, #20]
    7222:	980b      	ldr	r0, [sp, #44]	; 0x2c
    7224:	7802      	ldrb	r2, [r0, #0]
    7226:	2a00      	cmp	r2, #0
    7228:	d101      	bne.n	722e <__pformatter+0x26>
    722a:	f000 fc0e 	bl	7a4a <__pformatter+0x842>
    722e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    7230:	2125      	movs	r1, #37	; 0x25
    7232:	f7ff feae 	bl	6f92 <strchr>
    7236:	900e      	str	r0, [sp, #56]	; 0x38
    7238:	2800      	cmp	r0, #0
    723a:	d113      	bne.n	7264 <__pformatter+0x5c>
    723c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    723e:	f7ff ff0d 	bl	705c <strlen>
    7242:	9905      	ldr	r1, [sp, #20]
    7244:	1c02      	adds	r2, r0, #0
    7246:	1808      	adds	r0, r1, r0
    7248:	9005      	str	r0, [sp, #20]
    724a:	2a00      	cmp	r2, #0
    724c:	d101      	bne.n	7252 <__pformatter+0x4a>
    724e:	f000 fbfc 	bl	7a4a <__pformatter+0x842>
    7252:	980d      	ldr	r0, [sp, #52]	; 0x34
    7254:	990b      	ldr	r1, [sp, #44]	; 0x2c
    7256:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    7258:	47b8      	blx	r7
    725a:	2800      	cmp	r0, #0
    725c:	d001      	beq.n	7262 <__pformatter+0x5a>
    725e:	f000 fbf4 	bl	7a4a <__pformatter+0x842>
    7262:	e100      	b.n	7466 <__pformatter+0x25e>
    7264:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    7266:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    7268:	9905      	ldr	r1, [sp, #20]
    726a:	1b3a      	subs	r2, r7, r4
    726c:	188b      	adds	r3, r1, r2
    726e:	9305      	str	r3, [sp, #20]
    7270:	2a00      	cmp	r2, #0
    7272:	d006      	beq.n	7282 <__pformatter+0x7a>
    7274:	980d      	ldr	r0, [sp, #52]	; 0x34
    7276:	990b      	ldr	r1, [sp, #44]	; 0x2c
    7278:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    727a:	47b0      	blx	r6
    727c:	2800      	cmp	r0, #0
    727e:	d100      	bne.n	7282 <__pformatter+0x7a>
    7280:	e0f1      	b.n	7466 <__pformatter+0x25e>
    7282:	980e      	ldr	r0, [sp, #56]	; 0x38
    7284:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    7286:	7847      	ldrb	r7, [r0, #1]
    7288:	3201      	adds	r2, #1
    728a:	1e3b      	subs	r3, r7, #0
    728c:	2b25      	cmp	r3, #37	; 0x25
    728e:	d106      	bne.n	729e <__pformatter+0x96>
    7290:	3002      	adds	r0, #2
    7292:	2200      	movs	r2, #0
    7294:	2101      	movs	r1, #1
    7296:	900b      	str	r0, [sp, #44]	; 0x2c
    7298:	9207      	str	r2, [sp, #28]
    729a:	9106      	str	r1, [sp, #24]
    729c:	e072      	b.n	7384 <__pformatter+0x17c>
    729e:	2700      	movs	r7, #0
    72a0:	2401      	movs	r4, #1
    72a2:	9708      	str	r7, [sp, #32]
    72a4:	970a      	str	r7, [sp, #40]	; 0x28
    72a6:	9406      	str	r4, [sp, #24]
    72a8:	2b2b      	cmp	r3, #43	; 0x2b
    72aa:	d100      	bne.n	72ae <__pformatter+0xa6>
    72ac:	e3c6      	b.n	7a3c <__pformatter+0x834>
    72ae:	dc06      	bgt.n	72be <__pformatter+0xb6>
    72b0:	2b20      	cmp	r3, #32
    72b2:	d00a      	beq.n	72ca <__pformatter+0xc2>
    72b4:	2b23      	cmp	r3, #35	; 0x23
    72b6:	d114      	bne.n	72e2 <__pformatter+0xda>
    72b8:	2101      	movs	r1, #1
    72ba:	9108      	str	r1, [sp, #32]
    72bc:	e3c2      	b.n	7a44 <__pformatter+0x83c>
    72be:	2b2d      	cmp	r3, #45	; 0x2d
    72c0:	d100      	bne.n	72c4 <__pformatter+0xbc>
    72c2:	e3b9      	b.n	7a38 <__pformatter+0x830>
    72c4:	2b30      	cmp	r3, #48	; 0x30
    72c6:	d10c      	bne.n	72e2 <__pformatter+0xda>
    72c8:	e005      	b.n	72d6 <__pformatter+0xce>
    72ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    72cc:	2b01      	cmp	r3, #1
    72ce:	d100      	bne.n	72d2 <__pformatter+0xca>
    72d0:	e3b8      	b.n	7a44 <__pformatter+0x83c>
    72d2:	2602      	movs	r6, #2
    72d4:	e3b3      	b.n	7a3e <__pformatter+0x836>
    72d6:	9b06      	ldr	r3, [sp, #24]
    72d8:	2b00      	cmp	r3, #0
    72da:	d100      	bne.n	72de <__pformatter+0xd6>
    72dc:	e3b2      	b.n	7a44 <__pformatter+0x83c>
    72de:	2402      	movs	r4, #2
    72e0:	e3af      	b.n	7a42 <__pformatter+0x83a>
    72e2:	1c17      	adds	r7, r2, #0
    72e4:	2b2a      	cmp	r3, #42	; 0x2a
    72e6:	d000      	beq.n	72ea <__pformatter+0xe2>
    72e8:	e397      	b.n	7a1a <__pformatter+0x812>
    72ea:	1d28      	adds	r0, r5, #4
    72ec:	682d      	ldr	r5, [r5, #0]
    72ee:	9507      	str	r5, [sp, #28]
    72f0:	2d00      	cmp	r5, #0
    72f2:	da03      	bge.n	72fc <__pformatter+0xf4>
    72f4:	426c      	negs	r4, r5
    72f6:	2100      	movs	r1, #0
    72f8:	9407      	str	r4, [sp, #28]
    72fa:	9106      	str	r1, [sp, #24]
    72fc:	787b      	ldrb	r3, [r7, #1]
    72fe:	3201      	adds	r2, #1
    7300:	1c05      	adds	r5, r0, #0
    7302:	9f07      	ldr	r7, [sp, #28]
    7304:	4e7d      	ldr	r6, [pc, #500]	; (74fc <__pformatter+0x2f4>)
    7306:	42b7      	cmp	r7, r6
    7308:	dd00      	ble.n	730c <__pformatter+0x104>
    730a:	e378      	b.n	79fe <__pformatter+0x7f6>
    730c:	2b2e      	cmp	r3, #46	; 0x2e
    730e:	d000      	beq.n	7312 <__pformatter+0x10a>
    7310:	e0cd      	b.n	74ae <__pformatter+0x2a6>
    7312:	7853      	ldrb	r3, [r2, #1]
    7314:	1c54      	adds	r4, r2, #1
    7316:	2600      	movs	r6, #0
    7318:	2b2a      	cmp	r3, #42	; 0x2a
    731a:	d000      	beq.n	731e <__pformatter+0x116>
    731c:	e0ba      	b.n	7494 <__pformatter+0x28c>
    731e:	682e      	ldr	r6, [r5, #0]
    7320:	7893      	ldrb	r3, [r2, #2]
    7322:	43f1      	mvns	r1, r6
    7324:	0fc8      	lsrs	r0, r1, #31
    7326:	3504      	adds	r5, #4
    7328:	3202      	adds	r2, #2
    732a:	1c1c      	adds	r4, r3, #0
    732c:	3c4c      	subs	r4, #76	; 0x4c
    732e:	2100      	movs	r1, #0
    7330:	2c20      	cmp	r4, #32
    7332:	d800      	bhi.n	7336 <__pformatter+0x12e>
    7334:	e0be      	b.n	74b4 <__pformatter+0x2ac>
    7336:	b2df      	uxtb	r7, r3
    7338:	2b66      	cmp	r3, #102	; 0x66
    733a:	d100      	bne.n	733e <__pformatter+0x136>
    733c:	e0f5      	b.n	752a <__pformatter+0x322>
    733e:	dc00      	bgt.n	7342 <__pformatter+0x13a>
    7340:	e0c2      	b.n	74c8 <__pformatter+0x2c0>
    7342:	2b6f      	cmp	r3, #111	; 0x6f
    7344:	d100      	bne.n	7348 <__pformatter+0x140>
    7346:	e0e5      	b.n	7514 <__pformatter+0x30c>
    7348:	dc00      	bgt.n	734c <__pformatter+0x144>
    734a:	e0cd      	b.n	74e8 <__pformatter+0x2e0>
    734c:	2b73      	cmp	r3, #115	; 0x73
    734e:	d100      	bne.n	7352 <__pformatter+0x14a>
    7350:	e0fb      	b.n	754a <__pformatter+0x342>
    7352:	dd00      	ble.n	7356 <__pformatter+0x14e>
    7354:	e0da      	b.n	750c <__pformatter+0x304>
    7356:	2b70      	cmp	r3, #112	; 0x70
    7358:	d000      	beq.n	735c <__pformatter+0x154>
    735a:	e0ff      	b.n	755c <__pformatter+0x354>
    735c:	2401      	movs	r4, #1
    735e:	2778      	movs	r7, #120	; 0x78
    7360:	2608      	movs	r6, #8
    7362:	2103      	movs	r1, #3
    7364:	9408      	str	r4, [sp, #32]
    7366:	3201      	adds	r2, #1
    7368:	920b      	str	r2, [sp, #44]	; 0x2c
    736a:	2f67      	cmp	r7, #103	; 0x67
    736c:	d900      	bls.n	7370 <__pformatter+0x168>
    736e:	e100      	b.n	7572 <__pformatter+0x36a>
    7370:	2f65      	cmp	r7, #101	; 0x65
    7372:	d300      	bcc.n	7376 <__pformatter+0x16e>
    7374:	e127      	b.n	75c6 <__pformatter+0x3be>
    7376:	2f58      	cmp	r7, #88	; 0x58
    7378:	d100      	bne.n	737c <__pformatter+0x174>
    737a:	e115      	b.n	75a8 <__pformatter+0x3a0>
    737c:	d807      	bhi.n	738e <__pformatter+0x186>
    737e:	2f25      	cmp	r7, #37	; 0x25
    7380:	d000      	beq.n	7384 <__pformatter+0x17c>
    7382:	e0ed      	b.n	7560 <__pformatter+0x358>
    7384:	ac1e      	add	r4, sp, #120	; 0x78
    7386:	7027      	strb	r7, [r4, #0]
    7388:	9509      	str	r5, [sp, #36]	; 0x24
    738a:	2501      	movs	r5, #1
    738c:	e01d      	b.n	73ca <__pformatter+0x1c2>
    738e:	2f63      	cmp	r7, #99	; 0x63
    7390:	d100      	bne.n	7394 <__pformatter+0x18c>
    7392:	e32e      	b.n	79f2 <__pformatter+0x7ea>
    7394:	2f64      	cmp	r7, #100	; 0x64
    7396:	d000      	beq.n	739a <__pformatter+0x192>
    7398:	e331      	b.n	79fe <__pformatter+0x7f6>
    739a:	1d28      	adds	r0, r5, #4
    739c:	9009      	str	r0, [sp, #36]	; 0x24
    739e:	6828      	ldr	r0, [r5, #0]
    73a0:	2903      	cmp	r1, #3
    73a2:	d000      	beq.n	73a6 <__pformatter+0x19e>
    73a4:	e0f7      	b.n	7596 <__pformatter+0x38e>
    73a6:	9a08      	ldr	r2, [sp, #32]
    73a8:	9907      	ldr	r1, [sp, #28]
    73aa:	9200      	str	r2, [sp, #0]
    73ac:	9102      	str	r1, [sp, #8]
    73ae:	9701      	str	r7, [sp, #4]
    73b0:	9603      	str	r6, [sp, #12]
    73b2:	a99e      	add	r1, sp, #632	; 0x278
    73b4:	9a06      	ldr	r2, [sp, #24]
    73b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    73b8:	f7ff fe58 	bl	706c <long2str.isra.0>
    73bc:	1c04      	adds	r4, r0, #0
    73be:	2c00      	cmp	r4, #0
    73c0:	d100      	bne.n	73c4 <__pformatter+0x1bc>
    73c2:	e31c      	b.n	79fe <__pformatter+0x7f6>
    73c4:	4e4e      	ldr	r6, [pc, #312]	; (7500 <__pformatter+0x2f8>)
    73c6:	446e      	add	r6, sp
    73c8:	1b35      	subs	r5, r6, r4
    73ca:	9e06      	ldr	r6, [sp, #24]
    73cc:	2e00      	cmp	r6, #0
    73ce:	d03c      	beq.n	744a <__pformatter+0x242>
    73d0:	2020      	movs	r0, #32
    73d2:	2e02      	cmp	r6, #2
    73d4:	d100      	bne.n	73d8 <__pformatter+0x1d0>
    73d6:	2030      	movs	r0, #48	; 0x30
    73d8:	466b      	mov	r3, sp
    73da:	334a      	adds	r3, #74	; 0x4a
    73dc:	7018      	strb	r0, [r3, #0]
    73de:	7822      	ldrb	r2, [r4, #0]
    73e0:	2a2b      	cmp	r2, #43	; 0x2b
    73e2:	d004      	beq.n	73ee <__pformatter+0x1e6>
    73e4:	2a2d      	cmp	r2, #45	; 0x2d
    73e6:	d002      	beq.n	73ee <__pformatter+0x1e6>
    73e8:	1c2e      	adds	r6, r5, #0
    73ea:	2a20      	cmp	r2, #32
    73ec:	d10b      	bne.n	7406 <__pformatter+0x1fe>
    73ee:	1c2e      	adds	r6, r5, #0
    73f0:	2830      	cmp	r0, #48	; 0x30
    73f2:	d108      	bne.n	7406 <__pformatter+0x1fe>
    73f4:	980d      	ldr	r0, [sp, #52]	; 0x34
    73f6:	1c21      	adds	r1, r4, #0
    73f8:	2201      	movs	r2, #1
    73fa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    73fc:	47b0      	blx	r6
    73fe:	2800      	cmp	r0, #0
    7400:	d031      	beq.n	7466 <__pformatter+0x25e>
    7402:	3401      	adds	r4, #1
    7404:	1e6e      	subs	r6, r5, #1
    7406:	9906      	ldr	r1, [sp, #24]
    7408:	2902      	cmp	r1, #2
    740a:	d10e      	bne.n	742a <__pformatter+0x222>
    740c:	2f61      	cmp	r7, #97	; 0x61
    740e:	d001      	beq.n	7414 <__pformatter+0x20c>
    7410:	2f41      	cmp	r7, #65	; 0x41
    7412:	d10a      	bne.n	742a <__pformatter+0x222>
    7414:	2e01      	cmp	r6, #1
    7416:	dd26      	ble.n	7466 <__pformatter+0x25e>
    7418:	980d      	ldr	r0, [sp, #52]	; 0x34
    741a:	1c21      	adds	r1, r4, #0
    741c:	2202      	movs	r2, #2
    741e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    7420:	47b8      	blx	r7
    7422:	2800      	cmp	r0, #0
    7424:	d01f      	beq.n	7466 <__pformatter+0x25e>
    7426:	3e02      	subs	r6, #2
    7428:	3402      	adds	r4, #2
    742a:	1c2f      	adds	r7, r5, #0
    742c:	9d07      	ldr	r5, [sp, #28]
    742e:	42af      	cmp	r7, r5
    7430:	da09      	bge.n	7446 <__pformatter+0x23e>
    7432:	4669      	mov	r1, sp
    7434:	980d      	ldr	r0, [sp, #52]	; 0x34
    7436:	314a      	adds	r1, #74	; 0x4a
    7438:	2201      	movs	r2, #1
    743a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    743c:	47a8      	blx	r5
    743e:	2800      	cmp	r0, #0
    7440:	d011      	beq.n	7466 <__pformatter+0x25e>
    7442:	3701      	adds	r7, #1
    7444:	e7f2      	b.n	742c <__pformatter+0x224>
    7446:	1c35      	adds	r5, r6, #0
    7448:	e000      	b.n	744c <__pformatter+0x244>
    744a:	1c2f      	adds	r7, r5, #0
    744c:	2d00      	cmp	r5, #0
    744e:	d006      	beq.n	745e <__pformatter+0x256>
    7450:	1c21      	adds	r1, r4, #0
    7452:	980d      	ldr	r0, [sp, #52]	; 0x34
    7454:	1c2a      	adds	r2, r5, #0
    7456:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    7458:	47a0      	blx	r4
    745a:	2800      	cmp	r0, #0
    745c:	d003      	beq.n	7466 <__pformatter+0x25e>
    745e:	9806      	ldr	r0, [sp, #24]
    7460:	2800      	cmp	r0, #0
    7462:	d112      	bne.n	748a <__pformatter+0x282>
    7464:	e00e      	b.n	7484 <__pformatter+0x27c>
    7466:	2201      	movs	r2, #1
    7468:	4253      	negs	r3, r2
    746a:	9305      	str	r3, [sp, #20]
    746c:	e2ed      	b.n	7a4a <__pformatter+0x842>
    746e:	4669      	mov	r1, sp
    7470:	314b      	adds	r1, #75	; 0x4b
    7472:	2420      	movs	r4, #32
    7474:	980d      	ldr	r0, [sp, #52]	; 0x34
    7476:	2201      	movs	r2, #1
    7478:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    747a:	700c      	strb	r4, [r1, #0]
    747c:	4798      	blx	r3
    747e:	2800      	cmp	r0, #0
    7480:	d0f1      	beq.n	7466 <__pformatter+0x25e>
    7482:	3701      	adds	r7, #1
    7484:	9b07      	ldr	r3, [sp, #28]
    7486:	429f      	cmp	r7, r3
    7488:	dbf1      	blt.n	746e <__pformatter+0x266>
    748a:	9a05      	ldr	r2, [sp, #20]
    748c:	19d6      	adds	r6, r2, r7
    748e:	9605      	str	r6, [sp, #20]
    7490:	9d09      	ldr	r5, [sp, #36]	; 0x24
    7492:	e6c6      	b.n	7222 <__pformatter+0x1a>
    7494:	1c1a      	adds	r2, r3, #0
    7496:	3a30      	subs	r2, #48	; 0x30
    7498:	2a09      	cmp	r2, #9
    749a:	d805      	bhi.n	74a8 <__pformatter+0x2a0>
    749c:	230a      	movs	r3, #10
    749e:	4373      	muls	r3, r6
    74a0:	3401      	adds	r4, #1
    74a2:	189e      	adds	r6, r3, r2
    74a4:	7823      	ldrb	r3, [r4, #0]
    74a6:	e7f5      	b.n	7494 <__pformatter+0x28c>
    74a8:	1c22      	adds	r2, r4, #0
    74aa:	2001      	movs	r0, #1
    74ac:	e73d      	b.n	732a <__pformatter+0x122>
    74ae:	2600      	movs	r6, #0
    74b0:	1c30      	adds	r0, r6, #0
    74b2:	e73a      	b.n	732a <__pformatter+0x122>
    74b4:	4f13      	ldr	r7, [pc, #76]	; (7504 <__pformatter+0x2fc>)
    74b6:	5d39      	ldrb	r1, [r7, r4]
    74b8:	4f13      	ldr	r7, [pc, #76]	; (7508 <__pformatter+0x300>)
    74ba:	573c      	ldrsb	r4, [r7, r4]
    74bc:	2c00      	cmp	r4, #0
    74be:	d100      	bne.n	74c2 <__pformatter+0x2ba>
    74c0:	e739      	b.n	7336 <__pformatter+0x12e>
    74c2:	7853      	ldrb	r3, [r2, #1]
    74c4:	3201      	adds	r2, #1
    74c6:	e736      	b.n	7336 <__pformatter+0x12e>
    74c8:	2b58      	cmp	r3, #88	; 0x58
    74ca:	d023      	beq.n	7514 <__pformatter+0x30c>
    74cc:	dc06      	bgt.n	74dc <__pformatter+0x2d4>
    74ce:	2b46      	cmp	r3, #70	; 0x46
    74d0:	d02b      	beq.n	752a <__pformatter+0x322>
    74d2:	2b47      	cmp	r3, #71	; 0x47
    74d4:	d02c      	beq.n	7530 <__pformatter+0x328>
    74d6:	2b45      	cmp	r3, #69	; 0x45
    74d8:	d140      	bne.n	755c <__pformatter+0x354>
    74da:	e02c      	b.n	7536 <__pformatter+0x32e>
    74dc:	2b64      	cmp	r3, #100	; 0x64
    74de:	d019      	beq.n	7514 <__pformatter+0x30c>
    74e0:	dc29      	bgt.n	7536 <__pformatter+0x32e>
    74e2:	2b63      	cmp	r3, #99	; 0x63
    74e4:	d13a      	bne.n	755c <__pformatter+0x354>
    74e6:	e02e      	b.n	7546 <__pformatter+0x33e>
    74e8:	2b69      	cmp	r3, #105	; 0x69
    74ea:	d013      	beq.n	7514 <__pformatter+0x30c>
    74ec:	2b6e      	cmp	r3, #110	; 0x6e
    74ee:	d02f      	beq.n	7550 <__pformatter+0x348>
    74f0:	2b67      	cmp	r3, #103	; 0x67
    74f2:	d133      	bne.n	755c <__pformatter+0x354>
    74f4:	e01c      	b.n	7530 <__pformatter+0x328>
    74f6:	46c0      	nop			; (mov r8, r8)
    74f8:	fffffd84 	.word	0xfffffd84
    74fc:	000001fd 	.word	0x000001fd
    7500:	00000277 	.word	0x00000277
    7504:	00008931 	.word	0x00008931
    7508:	00008910 	.word	0x00008910
    750c:	2b75      	cmp	r3, #117	; 0x75
    750e:	d001      	beq.n	7514 <__pformatter+0x30c>
    7510:	2b78      	cmp	r3, #120	; 0x78
    7512:	d123      	bne.n	755c <__pformatter+0x354>
    7514:	2904      	cmp	r1, #4
    7516:	d021      	beq.n	755c <__pformatter+0x354>
    7518:	2800      	cmp	r0, #0
    751a:	d01d      	beq.n	7558 <__pformatter+0x350>
    751c:	9b06      	ldr	r3, [sp, #24]
    751e:	2b02      	cmp	r3, #2
    7520:	d000      	beq.n	7524 <__pformatter+0x31c>
    7522:	e720      	b.n	7366 <__pformatter+0x15e>
    7524:	2401      	movs	r4, #1
    7526:	9406      	str	r4, [sp, #24]
    7528:	e71d      	b.n	7366 <__pformatter+0x15e>
    752a:	2902      	cmp	r1, #2
    752c:	d106      	bne.n	753c <__pformatter+0x334>
    752e:	e015      	b.n	755c <__pformatter+0x354>
    7530:	2e00      	cmp	r6, #0
    7532:	d100      	bne.n	7536 <__pformatter+0x32e>
    7534:	2601      	movs	r6, #1
    7536:	1e4b      	subs	r3, r1, #1
    7538:	2b01      	cmp	r3, #1
    753a:	d90f      	bls.n	755c <__pformatter+0x354>
    753c:	2800      	cmp	r0, #0
    753e:	d000      	beq.n	7542 <__pformatter+0x33a>
    7540:	e711      	b.n	7366 <__pformatter+0x15e>
    7542:	2606      	movs	r6, #6
    7544:	e70f      	b.n	7366 <__pformatter+0x15e>
    7546:	2800      	cmp	r0, #0
    7548:	d108      	bne.n	755c <__pformatter+0x354>
    754a:	2900      	cmp	r1, #0
    754c:	d106      	bne.n	755c <__pformatter+0x354>
    754e:	e70a      	b.n	7366 <__pformatter+0x15e>
    7550:	2904      	cmp	r1, #4
    7552:	d000      	beq.n	7556 <__pformatter+0x34e>
    7554:	e707      	b.n	7366 <__pformatter+0x15e>
    7556:	e001      	b.n	755c <__pformatter+0x354>
    7558:	2601      	movs	r6, #1
    755a:	e704      	b.n	7366 <__pformatter+0x15e>
    755c:	27ff      	movs	r7, #255	; 0xff
    755e:	e702      	b.n	7366 <__pformatter+0x15e>
    7560:	2f25      	cmp	r7, #37	; 0x25
    7562:	d200      	bcs.n	7566 <__pformatter+0x35e>
    7564:	e24b      	b.n	79fe <__pformatter+0x7f6>
    7566:	1c38      	adds	r0, r7, #0
    7568:	3845      	subs	r0, #69	; 0x45
    756a:	2802      	cmp	r0, #2
    756c:	d900      	bls.n	7570 <__pformatter+0x368>
    756e:	e246      	b.n	79fe <__pformatter+0x7f6>
    7570:	e029      	b.n	75c6 <__pformatter+0x3be>
    7572:	2f6f      	cmp	r7, #111	; 0x6f
    7574:	d018      	beq.n	75a8 <__pformatter+0x3a0>
    7576:	d806      	bhi.n	7586 <__pformatter+0x37e>
    7578:	2f69      	cmp	r7, #105	; 0x69
    757a:	d100      	bne.n	757e <__pformatter+0x376>
    757c:	e70d      	b.n	739a <__pformatter+0x192>
    757e:	2f6e      	cmp	r7, #110	; 0x6e
    7580:	d000      	beq.n	7584 <__pformatter+0x37c>
    7582:	e23c      	b.n	79fe <__pformatter+0x7f6>
    7584:	e222      	b.n	79cc <__pformatter+0x7c4>
    7586:	2f75      	cmp	r7, #117	; 0x75
    7588:	d00e      	beq.n	75a8 <__pformatter+0x3a0>
    758a:	2f78      	cmp	r7, #120	; 0x78
    758c:	d00c      	beq.n	75a8 <__pformatter+0x3a0>
    758e:	2f73      	cmp	r7, #115	; 0x73
    7590:	d000      	beq.n	7594 <__pformatter+0x38c>
    7592:	e234      	b.n	79fe <__pformatter+0x7f6>
    7594:	e1f9      	b.n	798a <__pformatter+0x782>
    7596:	2902      	cmp	r1, #2
    7598:	d101      	bne.n	759e <__pformatter+0x396>
    759a:	b200      	sxth	r0, r0
    759c:	e703      	b.n	73a6 <__pformatter+0x19e>
    759e:	2901      	cmp	r1, #1
    75a0:	d000      	beq.n	75a4 <__pformatter+0x39c>
    75a2:	e700      	b.n	73a6 <__pformatter+0x19e>
    75a4:	b240      	sxtb	r0, r0
    75a6:	e6fe      	b.n	73a6 <__pformatter+0x19e>
    75a8:	1d2c      	adds	r4, r5, #4
    75aa:	9409      	str	r4, [sp, #36]	; 0x24
    75ac:	6828      	ldr	r0, [r5, #0]
    75ae:	2903      	cmp	r1, #3
    75b0:	d100      	bne.n	75b4 <__pformatter+0x3ac>
    75b2:	e6f8      	b.n	73a6 <__pformatter+0x19e>
    75b4:	2902      	cmp	r1, #2
    75b6:	d101      	bne.n	75bc <__pformatter+0x3b4>
    75b8:	b280      	uxth	r0, r0
    75ba:	e6f4      	b.n	73a6 <__pformatter+0x19e>
    75bc:	2901      	cmp	r1, #1
    75be:	d000      	beq.n	75c2 <__pformatter+0x3ba>
    75c0:	e6f1      	b.n	73a6 <__pformatter+0x19e>
    75c2:	b2c0      	uxtb	r0, r0
    75c4:	e6ef      	b.n	73a6 <__pformatter+0x19e>
    75c6:	3507      	adds	r5, #7
    75c8:	2207      	movs	r2, #7
    75ca:	4395      	bics	r5, r2
    75cc:	2904      	cmp	r1, #4
    75ce:	d103      	bne.n	75d8 <__pformatter+0x3d0>
    75d0:	1c2b      	adds	r3, r5, #0
    75d2:	3308      	adds	r3, #8
    75d4:	9309      	str	r3, [sp, #36]	; 0x24
    75d6:	e002      	b.n	75de <__pformatter+0x3d6>
    75d8:	1c29      	adds	r1, r5, #0
    75da:	3108      	adds	r1, #8
    75dc:	9109      	str	r1, [sp, #36]	; 0x24
    75de:	48be      	ldr	r0, [pc, #760]	; (78d8 <__pformatter+0x6d0>)
    75e0:	682c      	ldr	r4, [r5, #0]
    75e2:	686d      	ldr	r5, [r5, #4]
    75e4:	4286      	cmp	r6, r0
    75e6:	dd00      	ble.n	75ea <__pformatter+0x3e2>
    75e8:	e209      	b.n	79fe <__pformatter+0x7f6>
    75ea:	a813      	add	r0, sp, #76	; 0x4c
    75ec:	2200      	movs	r2, #0
    75ee:	214e      	movs	r1, #78	; 0x4e
    75f0:	7002      	strb	r2, [r0, #0]
    75f2:	4469      	add	r1, sp
    75f4:	2320      	movs	r3, #32
    75f6:	aa14      	add	r2, sp, #80	; 0x50
    75f8:	800b      	strh	r3, [r1, #0]
    75fa:	9200      	str	r2, [sp, #0]
    75fc:	1c2b      	adds	r3, r5, #0
    75fe:	1c22      	adds	r2, r4, #0
    7600:	f000 fdbe 	bl	8180 <__num2dec>
    7604:	a815      	add	r0, sp, #84	; 0x54
    7606:	7803      	ldrb	r3, [r0, #0]
    7608:	a914      	add	r1, sp, #80	; 0x50
    760a:	18c9      	adds	r1, r1, r3
    760c:	3105      	adds	r1, #5
    760e:	ab14      	add	r3, sp, #80	; 0x50
    7610:	791a      	ldrb	r2, [r3, #4]
    7612:	2a01      	cmp	r2, #1
    7614:	d909      	bls.n	762a <__pformatter+0x422>
    7616:	3901      	subs	r1, #1
    7618:	7808      	ldrb	r0, [r1, #0]
    761a:	2830      	cmp	r0, #48	; 0x30
    761c:	d105      	bne.n	762a <__pformatter+0x422>
    761e:	8858      	ldrh	r0, [r3, #2]
    7620:	3a01      	subs	r2, #1
    7622:	3001      	adds	r0, #1
    7624:	711a      	strb	r2, [r3, #4]
    7626:	8058      	strh	r0, [r3, #2]
    7628:	e7f1      	b.n	760e <__pformatter+0x406>
    762a:	7959      	ldrb	r1, [r3, #5]
    762c:	2949      	cmp	r1, #73	; 0x49
    762e:	d006      	beq.n	763e <__pformatter+0x436>
    7630:	294e      	cmp	r1, #78	; 0x4e
    7632:	d024      	beq.n	767e <__pformatter+0x476>
    7634:	2930      	cmp	r1, #48	; 0x30
    7636:	d143      	bne.n	76c0 <__pformatter+0x4b8>
    7638:	2400      	movs	r4, #0
    763a:	805c      	strh	r4, [r3, #2]
    763c:	e040      	b.n	76c0 <__pformatter+0x4b8>
    763e:	1c20      	adds	r0, r4, #0
    7640:	1c29      	adds	r1, r5, #0
    7642:	4ba4      	ldr	r3, [pc, #656]	; (78d4 <__pformatter+0x6cc>)
    7644:	4aa2      	ldr	r2, [pc, #648]	; (78d0 <__pformatter+0x6c8>)
    7646:	f7fa fe15 	bl	2274 <__aeabi_dcmplt>
    764a:	2800      	cmp	r0, #0
    764c:	d00c      	beq.n	7668 <__pformatter+0x460>
    764e:	1c38      	adds	r0, r7, #0
    7650:	f000 fd72 	bl	8138 <isupper>
    7654:	2800      	cmp	r0, #0
    7656:	d003      	beq.n	7660 <__pformatter+0x458>
    7658:	48a0      	ldr	r0, [pc, #640]	; (78dc <__pformatter+0x6d4>)
    765a:	49a1      	ldr	r1, [pc, #644]	; (78e0 <__pformatter+0x6d8>)
    765c:	4468      	add	r0, sp
    765e:	e01a      	b.n	7696 <__pformatter+0x48e>
    7660:	489e      	ldr	r0, [pc, #632]	; (78dc <__pformatter+0x6d4>)
    7662:	49a0      	ldr	r1, [pc, #640]	; (78e4 <__pformatter+0x6dc>)
    7664:	4468      	add	r0, sp
    7666:	e016      	b.n	7696 <__pformatter+0x48e>
    7668:	1c38      	adds	r0, r7, #0
    766a:	f000 fd65 	bl	8138 <isupper>
    766e:	2800      	cmp	r0, #0
    7670:	d002      	beq.n	7678 <__pformatter+0x470>
    7672:	a89d      	add	r0, sp, #628	; 0x274
    7674:	499c      	ldr	r1, [pc, #624]	; (78e8 <__pformatter+0x6e0>)
    7676:	e01f      	b.n	76b8 <__pformatter+0x4b0>
    7678:	a89d      	add	r0, sp, #628	; 0x274
    767a:	499c      	ldr	r1, [pc, #624]	; (78ec <__pformatter+0x6e4>)
    767c:	e01c      	b.n	76b8 <__pformatter+0x4b0>
    767e:	781e      	ldrb	r6, [r3, #0]
    7680:	1c38      	adds	r0, r7, #0
    7682:	b272      	sxtb	r2, r6
    7684:	2a00      	cmp	r2, #0
    7686:	d00e      	beq.n	76a6 <__pformatter+0x49e>
    7688:	f000 fd56 	bl	8138 <isupper>
    768c:	2800      	cmp	r0, #0
    768e:	d006      	beq.n	769e <__pformatter+0x496>
    7690:	4892      	ldr	r0, [pc, #584]	; (78dc <__pformatter+0x6d4>)
    7692:	4997      	ldr	r1, [pc, #604]	; (78f0 <__pformatter+0x6e8>)
    7694:	4468      	add	r0, sp
    7696:	f7ff fcd9 	bl	704c <strcpy>
    769a:	4c90      	ldr	r4, [pc, #576]	; (78dc <__pformatter+0x6d4>)
    769c:	e173      	b.n	7986 <__pformatter+0x77e>
    769e:	488f      	ldr	r0, [pc, #572]	; (78dc <__pformatter+0x6d4>)
    76a0:	4994      	ldr	r1, [pc, #592]	; (78f4 <__pformatter+0x6ec>)
    76a2:	4468      	add	r0, sp
    76a4:	e7f7      	b.n	7696 <__pformatter+0x48e>
    76a6:	f000 fd47 	bl	8138 <isupper>
    76aa:	2800      	cmp	r0, #0
    76ac:	d002      	beq.n	76b4 <__pformatter+0x4ac>
    76ae:	a89d      	add	r0, sp, #628	; 0x274
    76b0:	4991      	ldr	r1, [pc, #580]	; (78f8 <__pformatter+0x6f0>)
    76b2:	e001      	b.n	76b8 <__pformatter+0x4b0>
    76b4:	4991      	ldr	r1, [pc, #580]	; (78fc <__pformatter+0x6f4>)
    76b6:	a89d      	add	r0, sp, #628	; 0x274
    76b8:	f7ff fcc8 	bl	704c <strcpy>
    76bc:	ac9d      	add	r4, sp, #628	; 0x274
    76be:	e67e      	b.n	73be <__pformatter+0x1b6>
    76c0:	2552      	movs	r5, #82	; 0x52
    76c2:	446d      	add	r5, sp
    76c4:	882b      	ldrh	r3, [r5, #0]
    76c6:	2400      	movs	r4, #0
    76c8:	3b01      	subs	r3, #1
    76ca:	18d0      	adds	r0, r2, r3
    76cc:	8028      	strh	r0, [r5, #0]
    76ce:	4d8c      	ldr	r5, [pc, #560]	; (7900 <__pformatter+0x6f8>)
    76d0:	446d      	add	r5, sp
    76d2:	702c      	strb	r4, [r5, #0]
    76d4:	2f47      	cmp	r7, #71	; 0x47
    76d6:	d00f      	beq.n	76f8 <__pformatter+0x4f0>
    76d8:	d805      	bhi.n	76e6 <__pformatter+0x4de>
    76da:	2f45      	cmp	r7, #69	; 0x45
    76dc:	d032      	beq.n	7744 <__pformatter+0x53c>
    76de:	2f46      	cmp	r7, #70	; 0x46
    76e0:	d000      	beq.n	76e4 <__pformatter+0x4dc>
    76e2:	e14f      	b.n	7984 <__pformatter+0x77c>
    76e4:	e0a2      	b.n	782c <__pformatter+0x624>
    76e6:	2f66      	cmp	r7, #102	; 0x66
    76e8:	d100      	bne.n	76ec <__pformatter+0x4e4>
    76ea:	e09f      	b.n	782c <__pformatter+0x624>
    76ec:	2f67      	cmp	r7, #103	; 0x67
    76ee:	d003      	beq.n	76f8 <__pformatter+0x4f0>
    76f0:	2f65      	cmp	r7, #101	; 0x65
    76f2:	d000      	beq.n	76f6 <__pformatter+0x4ee>
    76f4:	e146      	b.n	7984 <__pformatter+0x77c>
    76f6:	e025      	b.n	7744 <__pformatter+0x53c>
    76f8:	42b2      	cmp	r2, r6
    76fa:	dd03      	ble.n	7704 <__pformatter+0x4fc>
    76fc:	a814      	add	r0, sp, #80	; 0x50
    76fe:	1c31      	adds	r1, r6, #0
    7700:	f000 fe62 	bl	83c8 <__round_decimal>
    7704:	ab14      	add	r3, sp, #80	; 0x50
    7706:	2002      	movs	r0, #2
    7708:	5e1a      	ldrsh	r2, [r3, r0]
    770a:	1d11      	adds	r1, r2, #4
    770c:	db01      	blt.n	7712 <__pformatter+0x50a>
    770e:	42b2      	cmp	r2, r6
    7710:	db0c      	blt.n	772c <__pformatter+0x524>
    7712:	9a08      	ldr	r2, [sp, #32]
    7714:	3e01      	subs	r6, #1
    7716:	2a00      	cmp	r2, #0
    7718:	d101      	bne.n	771e <__pformatter+0x516>
    771a:	7918      	ldrb	r0, [r3, #4]
    771c:	1e46      	subs	r6, r0, #1
    771e:	2345      	movs	r3, #69	; 0x45
    7720:	9310      	str	r3, [sp, #64]	; 0x40
    7722:	2f67      	cmp	r7, #103	; 0x67
    7724:	d10f      	bne.n	7746 <__pformatter+0x53e>
    7726:	2565      	movs	r5, #101	; 0x65
    7728:	9510      	str	r5, [sp, #64]	; 0x40
    772a:	e00c      	b.n	7746 <__pformatter+0x53e>
    772c:	9908      	ldr	r1, [sp, #32]
    772e:	43d0      	mvns	r0, r2
    7730:	1836      	adds	r6, r6, r0
    7732:	2900      	cmp	r1, #0
    7734:	d17a      	bne.n	782c <__pformatter+0x624>
    7736:	791e      	ldrb	r6, [r3, #4]
    7738:	1834      	adds	r4, r6, r0
    773a:	43e5      	mvns	r5, r4
    773c:	17eb      	asrs	r3, r5, #31
    773e:	1c26      	adds	r6, r4, #0
    7740:	401e      	ands	r6, r3
    7742:	e073      	b.n	782c <__pformatter+0x624>
    7744:	9710      	str	r7, [sp, #64]	; 0x40
    7746:	1c71      	adds	r1, r6, #1
    7748:	910f      	str	r1, [sp, #60]	; 0x3c
    774a:	a814      	add	r0, sp, #80	; 0x50
    774c:	7904      	ldrb	r4, [r0, #4]
    774e:	428c      	cmp	r4, r1
    7750:	dd01      	ble.n	7756 <__pformatter+0x54e>
    7752:	f000 fe39 	bl	83c8 <__round_decimal>
    7756:	aa14      	add	r2, sp, #80	; 0x50
    7758:	2002      	movs	r0, #2
    775a:	5e14      	ldrsh	r4, [r2, r0]
    775c:	202b      	movs	r0, #43	; 0x2b
    775e:	9011      	str	r0, [sp, #68]	; 0x44
    7760:	2c00      	cmp	r4, #0
    7762:	da02      	bge.n	776a <__pformatter+0x562>
    7764:	232d      	movs	r3, #45	; 0x2d
    7766:	4264      	negs	r4, r4
    7768:	9311      	str	r3, [sp, #68]	; 0x44
    776a:	4d66      	ldr	r5, [pc, #408]	; (7904 <__pformatter+0x6fc>)
    776c:	446d      	add	r5, sp
    776e:	2c00      	cmp	r4, #0
    7770:	d00c      	beq.n	778c <__pformatter+0x584>
    7772:	1c20      	adds	r0, r4, #0
    7774:	210a      	movs	r1, #10
    7776:	f7fa fd5b 	bl	2230 <__aeabi_idivmod>
    777a:	3130      	adds	r1, #48	; 0x30
    777c:	7029      	strb	r1, [r5, #0]
    777e:	1c20      	adds	r0, r4, #0
    7780:	210a      	movs	r1, #10
    7782:	f7fa fcff 	bl	2184 <__aeabi_idiv>
    7786:	3d01      	subs	r5, #1
    7788:	1c04      	adds	r4, r0, #0
    778a:	e7f0      	b.n	776e <__pformatter+0x566>
    778c:	495d      	ldr	r1, [pc, #372]	; (7904 <__pformatter+0x6fc>)
    778e:	4469      	add	r1, sp
    7790:	1b4a      	subs	r2, r1, r5
    7792:	2a01      	cmp	r2, #1
    7794:	dded      	ble.n	7772 <__pformatter+0x56a>
    7796:	ac11      	add	r4, sp, #68	; 0x44
    7798:	7820      	ldrb	r0, [r4, #0]
    779a:	ab10      	add	r3, sp, #64	; 0x40
    779c:	7028      	strb	r0, [r5, #0]
    779e:	aa9e      	add	r2, sp, #632	; 0x278
    77a0:	3d01      	subs	r5, #1
    77a2:	7819      	ldrb	r1, [r3, #0]
    77a4:	1b54      	subs	r4, r2, r5
    77a6:	484c      	ldr	r0, [pc, #304]	; (78d8 <__pformatter+0x6d0>)
    77a8:	19a3      	adds	r3, r4, r6
    77aa:	7029      	strb	r1, [r5, #0]
    77ac:	4283      	cmp	r3, r0
    77ae:	dd00      	ble.n	77b2 <__pformatter+0x5aa>
    77b0:	e125      	b.n	79fe <__pformatter+0x7f6>
    77b2:	a914      	add	r1, sp, #80	; 0x50
    77b4:	790b      	ldrb	r3, [r1, #4]
    77b6:	429e      	cmp	r6, r3
    77b8:	db09      	blt.n	77ce <__pformatter+0x5c6>
    77ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    77bc:	1ad0      	subs	r0, r2, r3
    77be:	1c02      	adds	r2, r0, #0
    77c0:	1a29      	subs	r1, r5, r0
    77c2:	3a01      	subs	r2, #1
    77c4:	d302      	bcc.n	77cc <__pformatter+0x5c4>
    77c6:	2430      	movs	r4, #48	; 0x30
    77c8:	548c      	strb	r4, [r1, r2]
    77ca:	e7f9      	b.n	77c0 <__pformatter+0x5b8>
    77cc:	1c0d      	adds	r5, r1, #0
    77ce:	ac9e      	add	r4, sp, #632	; 0x278
    77d0:	494d      	ldr	r1, [pc, #308]	; (7908 <__pformatter+0x700>)
    77d2:	18e0      	adds	r0, r4, r3
    77d4:	1840      	adds	r0, r0, r1
    77d6:	1c1a      	adds	r2, r3, #0
    77d8:	3a01      	subs	r2, #1
    77da:	2a00      	cmp	r2, #0
    77dc:	d005      	beq.n	77ea <__pformatter+0x5e2>
    77de:	4259      	negs	r1, r3
    77e0:	186c      	adds	r4, r5, r1
    77e2:	1841      	adds	r1, r0, r1
    77e4:	5c89      	ldrb	r1, [r1, r2]
    77e6:	54a1      	strb	r1, [r4, r2]
    77e8:	e7f6      	b.n	77d8 <__pformatter+0x5d0>
    77ea:	3b01      	subs	r3, #1
    77ec:	1aed      	subs	r5, r5, r3
    77ee:	2e00      	cmp	r6, #0
    77f0:	d102      	bne.n	77f8 <__pformatter+0x5f0>
    77f2:	9e08      	ldr	r6, [sp, #32]
    77f4:	2e00      	cmp	r6, #0
    77f6:	d002      	beq.n	77fe <__pformatter+0x5f6>
    77f8:	3d01      	subs	r5, #1
    77fa:	232e      	movs	r3, #46	; 0x2e
    77fc:	702b      	strb	r3, [r5, #0]
    77fe:	2255      	movs	r2, #85	; 0x55
    7800:	446a      	add	r2, sp
    7802:	7810      	ldrb	r0, [r2, #0]
    7804:	1e6c      	subs	r4, r5, #1
    7806:	7020      	strb	r0, [r4, #0]
    7808:	a914      	add	r1, sp, #80	; 0x50
    780a:	2600      	movs	r6, #0
    780c:	578b      	ldrsb	r3, [r1, r6]
    780e:	2b00      	cmp	r3, #0
    7810:	d001      	beq.n	7816 <__pformatter+0x60e>
    7812:	1eac      	subs	r4, r5, #2
    7814:	e0a6      	b.n	7964 <__pformatter+0x75c>
    7816:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    7818:	2a01      	cmp	r2, #1
    781a:	d101      	bne.n	7820 <__pformatter+0x618>
    781c:	1eac      	subs	r4, r5, #2
    781e:	e0a7      	b.n	7970 <__pformatter+0x768>
    7820:	980a      	ldr	r0, [sp, #40]	; 0x28
    7822:	2802      	cmp	r0, #2
    7824:	d000      	beq.n	7828 <__pformatter+0x620>
    7826:	e5ca      	b.n	73be <__pformatter+0x1b6>
    7828:	1eac      	subs	r4, r5, #2
    782a:	e0a8      	b.n	797e <__pformatter+0x776>
    782c:	ac14      	add	r4, sp, #80	; 0x50
    782e:	7921      	ldrb	r1, [r4, #4]
    7830:	2002      	movs	r0, #2
    7832:	5e22      	ldrsh	r2, [r4, r0]
    7834:	1a88      	subs	r0, r1, r2
    7836:	3801      	subs	r0, #1
    7838:	43c5      	mvns	r5, r0
    783a:	17eb      	asrs	r3, r5, #31
    783c:	4003      	ands	r3, r0
    783e:	42b3      	cmp	r3, r6
    7840:	dd0c      	ble.n	785c <__pformatter+0x654>
    7842:	1af3      	subs	r3, r6, r3
    7844:	18c9      	adds	r1, r1, r3
    7846:	1c20      	adds	r0, r4, #0
    7848:	f000 fdbe 	bl	83c8 <__round_decimal>
    784c:	7922      	ldrb	r2, [r4, #4]
    784e:	2102      	movs	r1, #2
    7850:	5e64      	ldrsh	r4, [r4, r1]
    7852:	1b11      	subs	r1, r2, r4
    7854:	3901      	subs	r1, #1
    7856:	43c8      	mvns	r0, r1
    7858:	17c3      	asrs	r3, r0, #31
    785a:	400b      	ands	r3, r1
    785c:	2552      	movs	r5, #82	; 0x52
    785e:	446d      	add	r5, sp
    7860:	2200      	movs	r2, #0
    7862:	5eaa      	ldrsh	r2, [r5, r2]
    7864:	481c      	ldr	r0, [pc, #112]	; (78d8 <__pformatter+0x6d0>)
    7866:	3201      	adds	r2, #1
    7868:	43d4      	mvns	r4, r2
    786a:	17e1      	asrs	r1, r4, #31
    786c:	400a      	ands	r2, r1
    786e:	18d5      	adds	r5, r2, r3
    7870:	4694      	mov	ip, r2
    7872:	4285      	cmp	r5, r0
    7874:	dd00      	ble.n	7878 <__pformatter+0x670>
    7876:	e0c2      	b.n	79fe <__pformatter+0x7f6>
    7878:	aa15      	add	r2, sp, #84	; 0x54
    787a:	7810      	ldrb	r0, [r2, #0]
    787c:	ac14      	add	r4, sp, #80	; 0x50
    787e:	4921      	ldr	r1, [pc, #132]	; (7904 <__pformatter+0x6fc>)
    7880:	1822      	adds	r2, r4, r0
    7882:	3205      	adds	r2, #5
    7884:	4469      	add	r1, sp
    7886:	4c1f      	ldr	r4, [pc, #124]	; (7904 <__pformatter+0x6fc>)
    7888:	1af5      	subs	r5, r6, r3
    788a:	446c      	add	r4, sp
    788c:	1a64      	subs	r4, r4, r1
    788e:	42ac      	cmp	r4, r5
    7890:	da03      	bge.n	789a <__pformatter+0x692>
    7892:	2430      	movs	r4, #48	; 0x30
    7894:	700c      	strb	r4, [r1, #0]
    7896:	3901      	subs	r1, #1
    7898:	e7f5      	b.n	7886 <__pformatter+0x67e>
    789a:	43e9      	mvns	r1, r5
    789c:	17cc      	asrs	r4, r1, #31
    789e:	4918      	ldr	r1, [pc, #96]	; (7900 <__pformatter+0x6f8>)
    78a0:	4025      	ands	r5, r4
    78a2:	4469      	add	r1, sp
    78a4:	1b4c      	subs	r4, r1, r5
    78a6:	2100      	movs	r1, #0
    78a8:	4299      	cmp	r1, r3
    78aa:	da07      	bge.n	78bc <__pformatter+0x6b4>
    78ac:	4281      	cmp	r1, r0
    78ae:	da05      	bge.n	78bc <__pformatter+0x6b4>
    78b0:	3a01      	subs	r2, #1
    78b2:	7815      	ldrb	r5, [r2, #0]
    78b4:	3c01      	subs	r4, #1
    78b6:	7025      	strb	r5, [r4, #0]
    78b8:	3101      	adds	r1, #1
    78ba:	e7f5      	b.n	78a8 <__pformatter+0x6a0>
    78bc:	9410      	str	r4, [sp, #64]	; 0x40
    78be:	9d10      	ldr	r5, [sp, #64]	; 0x40
    78c0:	186d      	adds	r5, r5, r1
    78c2:	1b2d      	subs	r5, r5, r4
    78c4:	429d      	cmp	r5, r3
    78c6:	da21      	bge.n	790c <__pformatter+0x704>
    78c8:	3c01      	subs	r4, #1
    78ca:	2530      	movs	r5, #48	; 0x30
    78cc:	7025      	strb	r5, [r4, #0]
    78ce:	e7f6      	b.n	78be <__pformatter+0x6b6>
	...
    78d8:	000001fd 	.word	0x000001fd
    78dc:	00000273 	.word	0x00000273
    78e0:	000088fc 	.word	0x000088fc
    78e4:	00008901 	.word	0x00008901
    78e8:	000088fd 	.word	0x000088fd
    78ec:	00008902 	.word	0x00008902
    78f0:	00008906 	.word	0x00008906
    78f4:	0000890b 	.word	0x0000890b
    78f8:	00008907 	.word	0x00008907
    78fc:	0000890c 	.word	0x0000890c
    7900:	00000277 	.word	0x00000277
    7904:	00000276 	.word	0x00000276
    7908:	fffffddd 	.word	0xfffffddd
    790c:	2e00      	cmp	r6, #0
    790e:	d102      	bne.n	7916 <__pformatter+0x70e>
    7910:	9e08      	ldr	r6, [sp, #32]
    7912:	2e00      	cmp	r6, #0
    7914:	d002      	beq.n	791c <__pformatter+0x714>
    7916:	3c01      	subs	r4, #1
    7918:	232e      	movs	r3, #46	; 0x2e
    791a:	7023      	strb	r3, [r4, #0]
    791c:	4661      	mov	r1, ip
    791e:	1c23      	adds	r3, r4, #0
    7920:	2900      	cmp	r1, #0
    7922:	d016      	beq.n	7952 <__pformatter+0x74a>
    7924:	4666      	mov	r6, ip
    7926:	1ae5      	subs	r5, r4, r3
    7928:	1a31      	subs	r1, r6, r0
    792a:	428d      	cmp	r5, r1
    792c:	da03      	bge.n	7936 <__pformatter+0x72e>
    792e:	3b01      	subs	r3, #1
    7930:	2530      	movs	r5, #48	; 0x30
    7932:	701d      	strb	r5, [r3, #0]
    7934:	e7f6      	b.n	7924 <__pformatter+0x71c>
    7936:	43c8      	mvns	r0, r1
    7938:	17c3      	asrs	r3, r0, #31
    793a:	4019      	ands	r1, r3
    793c:	1a63      	subs	r3, r4, r1
    793e:	1c1c      	adds	r4, r3, #0
    7940:	185d      	adds	r5, r3, r1
    7942:	1b2e      	subs	r6, r5, r4
    7944:	4566      	cmp	r6, ip
    7946:	da07      	bge.n	7958 <__pformatter+0x750>
    7948:	3a01      	subs	r2, #1
    794a:	7810      	ldrb	r0, [r2, #0]
    794c:	3c01      	subs	r4, #1
    794e:	7020      	strb	r0, [r4, #0]
    7950:	e7f6      	b.n	7940 <__pformatter+0x738>
    7952:	3c01      	subs	r4, #1
    7954:	2630      	movs	r6, #48	; 0x30
    7956:	7026      	strb	r6, [r4, #0]
    7958:	a914      	add	r1, sp, #80	; 0x50
    795a:	780a      	ldrb	r2, [r1, #0]
    795c:	b250      	sxtb	r0, r2
    795e:	2800      	cmp	r0, #0
    7960:	d002      	beq.n	7968 <__pformatter+0x760>
    7962:	3c01      	subs	r4, #1
    7964:	252d      	movs	r5, #45	; 0x2d
    7966:	e00b      	b.n	7980 <__pformatter+0x778>
    7968:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    796a:	2b01      	cmp	r3, #1
    796c:	d102      	bne.n	7974 <__pformatter+0x76c>
    796e:	3c01      	subs	r4, #1
    7970:	252b      	movs	r5, #43	; 0x2b
    7972:	e005      	b.n	7980 <__pformatter+0x778>
    7974:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    7976:	2d02      	cmp	r5, #2
    7978:	d000      	beq.n	797c <__pformatter+0x774>
    797a:	e520      	b.n	73be <__pformatter+0x1b6>
    797c:	3c01      	subs	r4, #1
    797e:	2520      	movs	r5, #32
    7980:	7025      	strb	r5, [r4, #0]
    7982:	e51c      	b.n	73be <__pformatter+0x1b6>
    7984:	4c33      	ldr	r4, [pc, #204]	; (7a54 <__pformatter+0x84c>)
    7986:	446c      	add	r4, sp
    7988:	e519      	b.n	73be <__pformatter+0x1b6>
    798a:	682c      	ldr	r4, [r5, #0]
    798c:	1d29      	adds	r1, r5, #4
    798e:	9109      	str	r1, [sp, #36]	; 0x24
    7990:	2c00      	cmp	r4, #0
    7992:	d100      	bne.n	7996 <__pformatter+0x78e>
    7994:	4c30      	ldr	r4, [pc, #192]	; (7a58 <__pformatter+0x850>)
    7996:	9b08      	ldr	r3, [sp, #32]
    7998:	2b00      	cmp	r3, #0
    799a:	d007      	beq.n	79ac <__pformatter+0x7a4>
    799c:	7825      	ldrb	r5, [r4, #0]
    799e:	3401      	adds	r4, #1
    79a0:	2800      	cmp	r0, #0
    79a2:	d100      	bne.n	79a6 <__pformatter+0x79e>
    79a4:	e511      	b.n	73ca <__pformatter+0x1c2>
    79a6:	42b5      	cmp	r5, r6
    79a8:	dc35      	bgt.n	7a16 <__pformatter+0x80e>
    79aa:	e50e      	b.n	73ca <__pformatter+0x1c2>
    79ac:	2800      	cmp	r0, #0
    79ae:	d008      	beq.n	79c2 <__pformatter+0x7ba>
    79b0:	1c20      	adds	r0, r4, #0
    79b2:	9908      	ldr	r1, [sp, #32]
    79b4:	1c32      	adds	r2, r6, #0
    79b6:	f000 fbd6 	bl	8166 <memchr>
    79ba:	2800      	cmp	r0, #0
    79bc:	d02b      	beq.n	7a16 <__pformatter+0x80e>
    79be:	1b05      	subs	r5, r0, r4
    79c0:	e503      	b.n	73ca <__pformatter+0x1c2>
    79c2:	1c20      	adds	r0, r4, #0
    79c4:	f7ff fb4a 	bl	705c <strlen>
    79c8:	1c05      	adds	r5, r0, #0
    79ca:	e4fe      	b.n	73ca <__pformatter+0x1c2>
    79cc:	1d2f      	adds	r7, r5, #4
    79ce:	9709      	str	r7, [sp, #36]	; 0x24
    79d0:	682b      	ldr	r3, [r5, #0]
    79d2:	2902      	cmp	r1, #2
    79d4:	d005      	beq.n	79e2 <__pformatter+0x7da>
    79d6:	2903      	cmp	r1, #3
    79d8:	d008      	beq.n	79ec <__pformatter+0x7e4>
    79da:	2900      	cmp	r1, #0
    79dc:	d000      	beq.n	79e0 <__pformatter+0x7d8>
    79de:	e557      	b.n	7490 <__pformatter+0x288>
    79e0:	e004      	b.n	79ec <__pformatter+0x7e4>
    79e2:	466c      	mov	r4, sp
    79e4:	2614      	movs	r6, #20
    79e6:	5b32      	ldrh	r2, [r6, r4]
    79e8:	801a      	strh	r2, [r3, #0]
    79ea:	e551      	b.n	7490 <__pformatter+0x288>
    79ec:	9d05      	ldr	r5, [sp, #20]
    79ee:	601d      	str	r5, [r3, #0]
    79f0:	e54e      	b.n	7490 <__pformatter+0x288>
    79f2:	1d2e      	adds	r6, r5, #4
    79f4:	682d      	ldr	r5, [r5, #0]
    79f6:	ac1e      	add	r4, sp, #120	; 0x78
    79f8:	9609      	str	r6, [sp, #36]	; 0x24
    79fa:	7025      	strb	r5, [r4, #0]
    79fc:	e4c5      	b.n	738a <__pformatter+0x182>
    79fe:	980e      	ldr	r0, [sp, #56]	; 0x38
    7a00:	f7ff fb2c 	bl	705c <strlen>
    7a04:	9f05      	ldr	r7, [sp, #20]
    7a06:	1c02      	adds	r2, r0, #0
    7a08:	1838      	adds	r0, r7, r0
    7a0a:	9005      	str	r0, [sp, #20]
    7a0c:	2a00      	cmp	r2, #0
    7a0e:	d01c      	beq.n	7a4a <__pformatter+0x842>
    7a10:	980d      	ldr	r0, [sp, #52]	; 0x34
    7a12:	990e      	ldr	r1, [sp, #56]	; 0x38
    7a14:	e41f      	b.n	7256 <__pformatter+0x4e>
    7a16:	1c35      	adds	r5, r6, #0
    7a18:	e4d7      	b.n	73ca <__pformatter+0x1c2>
    7a1a:	2000      	movs	r0, #0
    7a1c:	9007      	str	r0, [sp, #28]
    7a1e:	1c1c      	adds	r4, r3, #0
    7a20:	3c30      	subs	r4, #48	; 0x30
    7a22:	2c09      	cmp	r4, #9
    7a24:	d900      	bls.n	7a28 <__pformatter+0x820>
    7a26:	e46c      	b.n	7302 <__pformatter+0xfa>
    7a28:	9b07      	ldr	r3, [sp, #28]
    7a2a:	210a      	movs	r1, #10
    7a2c:	4359      	muls	r1, r3
    7a2e:	3201      	adds	r2, #1
    7a30:	190e      	adds	r6, r1, r4
    7a32:	9607      	str	r6, [sp, #28]
    7a34:	7813      	ldrb	r3, [r2, #0]
    7a36:	e7f2      	b.n	7a1e <__pformatter+0x816>
    7a38:	2400      	movs	r4, #0
    7a3a:	e002      	b.n	7a42 <__pformatter+0x83a>
    7a3c:	2601      	movs	r6, #1
    7a3e:	960a      	str	r6, [sp, #40]	; 0x28
    7a40:	e000      	b.n	7a44 <__pformatter+0x83c>
    7a42:	9406      	str	r4, [sp, #24]
    7a44:	3201      	adds	r2, #1
    7a46:	7813      	ldrb	r3, [r2, #0]
    7a48:	e42e      	b.n	72a8 <__pformatter+0xa0>
    7a4a:	9805      	ldr	r0, [sp, #20]
    7a4c:	249f      	movs	r4, #159	; 0x9f
    7a4e:	00a4      	lsls	r4, r4, #2
    7a50:	44a5      	add	sp, r4
    7a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7a54:	00000277 	.word	0x00000277
    7a58:	00008900 	.word	0x00008900
    7a5c:	46c0      	nop			; (mov r8, r8)
    7a5e:	46c0      	nop			; (mov r8, r8)

00007a60 <__sformatter>:
    7a60:	b5f0      	push	{r4, r5, r6, r7, lr}
    7a62:	2700      	movs	r7, #0
    7a64:	b0a9      	sub	sp, #164	; 0xa4
    7a66:	9005      	str	r0, [sp, #20]
    7a68:	9106      	str	r1, [sp, #24]
    7a6a:	930f      	str	r3, [sp, #60]	; 0x3c
    7a6c:	9209      	str	r2, [sp, #36]	; 0x24
    7a6e:	970d      	str	r7, [sp, #52]	; 0x34
    7a70:	970b      	str	r7, [sp, #44]	; 0x2c
    7a72:	9708      	str	r7, [sp, #32]
    7a74:	970a      	str	r7, [sp, #40]	; 0x28
    7a76:	970c      	str	r7, [sp, #48]	; 0x30
    7a78:	9704      	str	r7, [sp, #16]
    7a7a:	9d09      	ldr	r5, [sp, #36]	; 0x24
    7a7c:	782c      	ldrb	r4, [r5, #0]
    7a7e:	2c00      	cmp	r4, #0
    7a80:	d100      	bne.n	7a84 <__sformatter+0x24>
    7a82:	e303      	b.n	808c <__sformatter+0x62c>
    7a84:	1c20      	adds	r0, r4, #0
    7a86:	f000 fb47 	bl	8118 <isspace>
    7a8a:	2800      	cmp	r0, #0
    7a8c:	d022      	beq.n	7ad4 <__sformatter+0x74>
    7a8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7a90:	3201      	adds	r2, #1
    7a92:	7810      	ldrb	r0, [r2, #0]
    7a94:	9209      	str	r2, [sp, #36]	; 0x24
    7a96:	f000 fb3f 	bl	8118 <isspace>
    7a9a:	2800      	cmp	r0, #0
    7a9c:	d1f7      	bne.n	7a8e <__sformatter+0x2e>
    7a9e:	2f00      	cmp	r7, #0
    7aa0:	d000      	beq.n	7aa4 <__sformatter+0x44>
    7aa2:	e2f1      	b.n	8088 <__sformatter+0x628>
    7aa4:	2100      	movs	r1, #0
    7aa6:	9806      	ldr	r0, [sp, #24]
    7aa8:	1c0a      	adds	r2, r1, #0
    7aaa:	9c05      	ldr	r4, [sp, #20]
    7aac:	47a0      	blx	r4
    7aae:	1c06      	adds	r6, r0, #0
    7ab0:	f000 fb32 	bl	8118 <isspace>
    7ab4:	2800      	cmp	r0, #0
    7ab6:	d003      	beq.n	7ac0 <__sformatter+0x60>
    7ab8:	9b04      	ldr	r3, [sp, #16]
    7aba:	3301      	adds	r3, #1
    7abc:	9304      	str	r3, [sp, #16]
    7abe:	e7f1      	b.n	7aa4 <__sformatter+0x44>
    7ac0:	1c70      	adds	r0, r6, #1
    7ac2:	d104      	bne.n	7ace <__sformatter+0x6e>
    7ac4:	982e      	ldr	r0, [sp, #184]	; 0xb8
    7ac6:	2800      	cmp	r0, #0
    7ac8:	d100      	bne.n	7acc <__sformatter+0x6c>
    7aca:	e2df      	b.n	808c <__sformatter+0x62c>
    7acc:	2701      	movs	r7, #1
    7ace:	9806      	ldr	r0, [sp, #24]
    7ad0:	1c31      	adds	r1, r6, #0
    7ad2:	e2ab      	b.n	802c <__sformatter+0x5cc>
    7ad4:	2c25      	cmp	r4, #37	; 0x25
    7ad6:	d01b      	beq.n	7b10 <__sformatter+0xb0>
    7ad8:	2f00      	cmp	r7, #0
    7ada:	d119      	bne.n	7b10 <__sformatter+0xb0>
    7adc:	1c39      	adds	r1, r7, #0
    7ade:	9806      	ldr	r0, [sp, #24]
    7ae0:	1c3a      	adds	r2, r7, #0
    7ae2:	9e05      	ldr	r6, [sp, #20]
    7ae4:	47b0      	blx	r6
    7ae6:	b2c1      	uxtb	r1, r0
    7ae8:	42a1      	cmp	r1, r4
    7aea:	d00a      	beq.n	7b02 <__sformatter+0xa2>
    7aec:	9806      	ldr	r0, [sp, #24]
    7aee:	2201      	movs	r2, #1
    7af0:	47b0      	blx	r6
    7af2:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
    7af4:	2f00      	cmp	r7, #0
    7af6:	d100      	bne.n	7afa <__sformatter+0x9a>
    7af8:	e2c8      	b.n	808c <__sformatter+0x62c>
    7afa:	9d09      	ldr	r5, [sp, #36]	; 0x24
    7afc:	3501      	adds	r5, #1
    7afe:	9509      	str	r5, [sp, #36]	; 0x24
    7b00:	e2c2      	b.n	8088 <__sformatter+0x628>
    7b02:	9b04      	ldr	r3, [sp, #16]
    7b04:	9909      	ldr	r1, [sp, #36]	; 0x24
    7b06:	3301      	adds	r3, #1
    7b08:	3101      	adds	r1, #1
    7b0a:	9304      	str	r3, [sp, #16]
    7b0c:	9109      	str	r1, [sp, #36]	; 0x24
    7b0e:	e7b4      	b.n	7a7a <__sformatter+0x1a>
    7b10:	ac1e      	add	r4, sp, #120	; 0x78
    7b12:	1c20      	adds	r0, r4, #0
    7b14:	2100      	movs	r1, #0
    7b16:	2228      	movs	r2, #40	; 0x28
    7b18:	f7ff fa4a 	bl	6fb0 <memset>
    7b1c:	9809      	ldr	r0, [sp, #36]	; 0x24
    7b1e:	4ea5      	ldr	r6, [pc, #660]	; (7db4 <__sformatter+0x354>)
    7b20:	7845      	ldrb	r5, [r0, #1]
    7b22:	6066      	str	r6, [r4, #4]
    7b24:	1e28      	subs	r0, r5, #0
    7b26:	2825      	cmp	r0, #37	; 0x25
    7b28:	d10c      	bne.n	7b44 <__sformatter+0xe4>
    7b2a:	1c21      	adds	r1, r4, #0
    7b2c:	a814      	add	r0, sp, #80	; 0x50
    7b2e:	2228      	movs	r2, #40	; 0x28
    7b30:	70e5      	strb	r5, [r4, #3]
    7b32:	f7ff fa82 	bl	703a <memcpy>
    7b36:	9c09      	ldr	r4, [sp, #36]	; 0x24
    7b38:	2000      	movs	r0, #0
    7b3a:	3402      	adds	r4, #2
    7b3c:	9409      	str	r4, [sp, #36]	; 0x24
    7b3e:	9007      	str	r0, [sp, #28]
    7b40:	900e      	str	r0, [sp, #56]	; 0x38
    7b42:	e0d7      	b.n	7cf4 <__sformatter+0x294>
    7b44:	2d2a      	cmp	r5, #42	; 0x2a
    7b46:	d002      	beq.n	7b4e <__sformatter+0xee>
    7b48:	9c09      	ldr	r4, [sp, #36]	; 0x24
    7b4a:	3401      	adds	r4, #1
    7b4c:	e005      	b.n	7b5a <__sformatter+0xfa>
    7b4e:	2301      	movs	r3, #1
    7b50:	9909      	ldr	r1, [sp, #36]	; 0x24
    7b52:	7023      	strb	r3, [r4, #0]
    7b54:	9c09      	ldr	r4, [sp, #36]	; 0x24
    7b56:	7888      	ldrb	r0, [r1, #2]
    7b58:	3402      	adds	r4, #2
    7b5a:	1c02      	adds	r2, r0, #0
    7b5c:	3a30      	subs	r2, #48	; 0x30
    7b5e:	2a09      	cmp	r2, #9
    7b60:	d81f      	bhi.n	7ba2 <__sformatter+0x142>
    7b62:	2600      	movs	r6, #0
    7b64:	250a      	movs	r5, #10
    7b66:	436e      	muls	r6, r5
    7b68:	3830      	subs	r0, #48	; 0x30
    7b6a:	3401      	adds	r4, #1
    7b6c:	1836      	adds	r6, r6, r0
    7b6e:	7820      	ldrb	r0, [r4, #0]
    7b70:	1c03      	adds	r3, r0, #0
    7b72:	3b30      	subs	r3, #48	; 0x30
    7b74:	2b09      	cmp	r3, #9
    7b76:	d9f5      	bls.n	7b64 <__sformatter+0x104>
    7b78:	ad1e      	add	r5, sp, #120	; 0x78
    7b7a:	606e      	str	r6, [r5, #4]
    7b7c:	2e00      	cmp	r6, #0
    7b7e:	d10e      	bne.n	7b9e <__sformatter+0x13e>
    7b80:	2301      	movs	r3, #1
    7b82:	4259      	negs	r1, r3
    7b84:	70e9      	strb	r1, [r5, #3]
    7b86:	a814      	add	r0, sp, #80	; 0x50
    7b88:	1c29      	adds	r1, r5, #0
    7b8a:	2228      	movs	r2, #40	; 0x28
    7b8c:	3401      	adds	r4, #1
    7b8e:	f7ff fa54 	bl	703a <memcpy>
    7b92:	782b      	ldrb	r3, [r5, #0]
    7b94:	9409      	str	r4, [sp, #36]	; 0x24
    7b96:	25ff      	movs	r5, #255	; 0xff
    7b98:	9607      	str	r6, [sp, #28]
    7b9a:	960e      	str	r6, [sp, #56]	; 0x38
    7b9c:	e09d      	b.n	7cda <__sformatter+0x27a>
    7b9e:	2601      	movs	r6, #1
    7ba0:	706e      	strb	r6, [r5, #1]
    7ba2:	a91e      	add	r1, sp, #120	; 0x78
    7ba4:	2868      	cmp	r0, #104	; 0x68
    7ba6:	d004      	beq.n	7bb2 <__sformatter+0x152>
    7ba8:	286c      	cmp	r0, #108	; 0x6c
    7baa:	d10c      	bne.n	7bc6 <__sformatter+0x166>
    7bac:	2003      	movs	r0, #3
    7bae:	7088      	strb	r0, [r1, #2]
    7bb0:	e007      	b.n	7bc2 <__sformatter+0x162>
    7bb2:	7863      	ldrb	r3, [r4, #1]
    7bb4:	2202      	movs	r2, #2
    7bb6:	708a      	strb	r2, [r1, #2]
    7bb8:	2b68      	cmp	r3, #104	; 0x68
    7bba:	d102      	bne.n	7bc2 <__sformatter+0x162>
    7bbc:	2501      	movs	r5, #1
    7bbe:	708d      	strb	r5, [r1, #2]
    7bc0:	1964      	adds	r4, r4, r5
    7bc2:	7860      	ldrb	r0, [r4, #1]
    7bc4:	3401      	adds	r4, #1
    7bc6:	ab1e      	add	r3, sp, #120	; 0x78
    7bc8:	70d8      	strb	r0, [r3, #3]
    7bca:	3858      	subs	r0, #88	; 0x58
    7bcc:	2820      	cmp	r0, #32
    7bce:	d871      	bhi.n	7cb4 <__sformatter+0x254>
    7bd0:	f7fa fa80 	bl	20d4 <__gnu_thumb1_case_uqi>
    7bd4:	2b707072 	.word	0x2b707072
    7bd8:	70707070 	.word	0x70707070
    7bdc:	15707070 	.word	0x15707070
    7be0:	70707072 	.word	0x70707072
    7be4:	70707270 	.word	0x70707270
    7be8:	72727070 	.word	0x72727070
    7bec:	19707011 	.word	0x19707011
    7bf0:	70707270 	.word	0x70707270
    7bf4:	72          	.byte	0x72
    7bf5:	00          	.byte	0x00
    7bf6:	2603      	movs	r6, #3
    7bf8:	709e      	strb	r6, [r3, #2]
    7bfa:	2178      	movs	r1, #120	; 0x78
    7bfc:	e05b      	b.n	7cb6 <__sformatter+0x256>
    7bfe:	789a      	ldrb	r2, [r3, #2]
    7c00:	2a00      	cmp	r2, #0
    7c02:	d059      	beq.n	7cb8 <__sformatter+0x258>
    7c04:	e056      	b.n	7cb4 <__sformatter+0x254>
    7c06:	7899      	ldrb	r1, [r3, #2]
    7c08:	2900      	cmp	r1, #0
    7c0a:	d001      	beq.n	7c10 <__sformatter+0x1b0>
    7c0c:	20ff      	movs	r0, #255	; 0xff
    7c0e:	70d8      	strb	r0, [r3, #3]
    7c10:	2300      	movs	r3, #0
    7c12:	aa1e      	add	r2, sp, #120	; 0x78
    7c14:	18d5      	adds	r5, r2, r3
    7c16:	26ff      	movs	r6, #255	; 0xff
    7c18:	3301      	adds	r3, #1
    7c1a:	722e      	strb	r6, [r5, #8]
    7c1c:	2b20      	cmp	r3, #32
    7c1e:	d1f8      	bne.n	7c12 <__sformatter+0x1b2>
    7c20:	21c1      	movs	r1, #193	; 0xc1
    7c22:	20fe      	movs	r0, #254	; 0xfe
    7c24:	7251      	strb	r1, [r2, #9]
    7c26:	7310      	strb	r0, [r2, #12]
    7c28:	e046      	b.n	7cb8 <__sformatter+0x258>
    7c2a:	789d      	ldrb	r5, [r3, #2]
    7c2c:	2d00      	cmp	r5, #0
    7c2e:	d001      	beq.n	7c34 <__sformatter+0x1d4>
    7c30:	26ff      	movs	r6, #255	; 0xff
    7c32:	70de      	strb	r6, [r3, #3]
    7c34:	7863      	ldrb	r3, [r4, #1]
    7c36:	2b5e      	cmp	r3, #94	; 0x5e
    7c38:	d002      	beq.n	7c40 <__sformatter+0x1e0>
    7c3a:	3401      	adds	r4, #1
    7c3c:	2100      	movs	r1, #0
    7c3e:	e002      	b.n	7c46 <__sformatter+0x1e6>
    7c40:	78a3      	ldrb	r3, [r4, #2]
    7c42:	2101      	movs	r1, #1
    7c44:	3402      	adds	r4, #2
    7c46:	2b5d      	cmp	r3, #93	; 0x5d
    7c48:	d107      	bne.n	7c5a <__sformatter+0x1fa>
    7c4a:	ab1e      	add	r3, sp, #120	; 0x78
    7c4c:	2020      	movs	r0, #32
    7c4e:	74d8      	strb	r0, [r3, #19]
    7c50:	7863      	ldrb	r3, [r4, #1]
    7c52:	3401      	adds	r4, #1
    7c54:	e001      	b.n	7c5a <__sformatter+0x1fa>
    7c56:	78e3      	ldrb	r3, [r4, #3]
    7c58:	3403      	adds	r4, #3
    7c5a:	2b00      	cmp	r3, #0
    7c5c:	d100      	bne.n	7c60 <__sformatter+0x200>
    7c5e:	e239      	b.n	80d4 <__sformatter+0x674>
    7c60:	2b5d      	cmp	r3, #93	; 0x5d
    7c62:	d100      	bne.n	7c66 <__sformatter+0x206>
    7c64:	e239      	b.n	80da <__sformatter+0x67a>
    7c66:	b2dd      	uxtb	r5, r3
    7c68:	08ea      	lsrs	r2, r5, #3
    7c6a:	ae1e      	add	r6, sp, #120	; 0x78
    7c6c:	2007      	movs	r0, #7
    7c6e:	18b2      	adds	r2, r6, r2
    7c70:	4018      	ands	r0, r3
    7c72:	2501      	movs	r5, #1
    7c74:	4085      	lsls	r5, r0
    7c76:	7a10      	ldrb	r0, [r2, #8]
    7c78:	1c2e      	adds	r6, r5, #0
    7c7a:	7865      	ldrb	r5, [r4, #1]
    7c7c:	4306      	orrs	r6, r0
    7c7e:	7216      	strb	r6, [r2, #8]
    7c80:	2d2d      	cmp	r5, #45	; 0x2d
    7c82:	d114      	bne.n	7cae <__sformatter+0x24e>
    7c84:	78a2      	ldrb	r2, [r4, #2]
    7c86:	2a00      	cmp	r2, #0
    7c88:	d011      	beq.n	7cae <__sformatter+0x24e>
    7c8a:	2a5d      	cmp	r2, #93	; 0x5d
    7c8c:	d00f      	beq.n	7cae <__sformatter+0x24e>
    7c8e:	3301      	adds	r3, #1
    7c90:	4293      	cmp	r3, r2
    7c92:	dce0      	bgt.n	7c56 <__sformatter+0x1f6>
    7c94:	b2de      	uxtb	r6, r3
    7c96:	08f0      	lsrs	r0, r6, #3
    7c98:	ad1e      	add	r5, sp, #120	; 0x78
    7c9a:	1828      	adds	r0, r5, r0
    7c9c:	2507      	movs	r5, #7
    7c9e:	401d      	ands	r5, r3
    7ca0:	2601      	movs	r6, #1
    7ca2:	40ae      	lsls	r6, r5
    7ca4:	1c35      	adds	r5, r6, #0
    7ca6:	7a06      	ldrb	r6, [r0, #8]
    7ca8:	4335      	orrs	r5, r6
    7caa:	7205      	strb	r5, [r0, #8]
    7cac:	e7ef      	b.n	7c8e <__sformatter+0x22e>
    7cae:	3401      	adds	r4, #1
    7cb0:	1c2b      	adds	r3, r5, #0
    7cb2:	e7d2      	b.n	7c5a <__sformatter+0x1fa>
    7cb4:	21ff      	movs	r1, #255	; 0xff
    7cb6:	70d9      	strb	r1, [r3, #3]
    7cb8:	ae1e      	add	r6, sp, #120	; 0x78
    7cba:	1c31      	adds	r1, r6, #0
    7cbc:	2228      	movs	r2, #40	; 0x28
    7cbe:	a814      	add	r0, sp, #80	; 0x50
    7cc0:	f7ff f9bb 	bl	703a <memcpy>
    7cc4:	466a      	mov	r2, sp
    7cc6:	327a      	adds	r2, #122	; 0x7a
    7cc8:	7871      	ldrb	r1, [r6, #1]
    7cca:	7810      	ldrb	r0, [r2, #0]
    7ccc:	7833      	ldrb	r3, [r6, #0]
    7cce:	910e      	str	r1, [sp, #56]	; 0x38
    7cd0:	9007      	str	r0, [sp, #28]
    7cd2:	78f5      	ldrb	r5, [r6, #3]
    7cd4:	3401      	adds	r4, #1
    7cd6:	6876      	ldr	r6, [r6, #4]
    7cd8:	9409      	str	r4, [sp, #36]	; 0x24
    7cda:	2b00      	cmp	r3, #0
    7cdc:	d106      	bne.n	7cec <__sformatter+0x28c>
    7cde:	2d25      	cmp	r5, #37	; 0x25
    7ce0:	d008      	beq.n	7cf4 <__sformatter+0x294>
    7ce2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    7ce4:	6814      	ldr	r4, [r2, #0]
    7ce6:	3204      	adds	r2, #4
    7ce8:	920f      	str	r2, [sp, #60]	; 0x3c
    7cea:	e000      	b.n	7cee <__sformatter+0x28e>
    7cec:	2400      	movs	r4, #0
    7cee:	2d6e      	cmp	r5, #110	; 0x6e
    7cf0:	d101      	bne.n	7cf6 <__sformatter+0x296>
    7cf2:	e1ad      	b.n	8050 <__sformatter+0x5f0>
    7cf4:	2400      	movs	r4, #0
    7cf6:	2f00      	cmp	r7, #0
    7cf8:	d001      	beq.n	7cfe <__sformatter+0x29e>
    7cfa:	2701      	movs	r7, #1
    7cfc:	e00a      	b.n	7d14 <__sformatter+0x2b4>
    7cfe:	9806      	ldr	r0, [sp, #24]
    7d00:	1c39      	adds	r1, r7, #0
    7d02:	2202      	movs	r2, #2
    7d04:	9b05      	ldr	r3, [sp, #20]
    7d06:	4798      	blx	r3
    7d08:	2800      	cmp	r0, #0
    7d0a:	d003      	beq.n	7d14 <__sformatter+0x2b4>
    7d0c:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
    7d0e:	2f00      	cmp	r7, #0
    7d10:	d1f3      	bne.n	7cfa <__sformatter+0x29a>
    7d12:	e1bb      	b.n	808c <__sformatter+0x62c>
    7d14:	2d69      	cmp	r5, #105	; 0x69
    7d16:	d025      	beq.n	7d64 <__sformatter+0x304>
    7d18:	d812      	bhi.n	7d40 <__sformatter+0x2e0>
    7d1a:	2d5b      	cmp	r5, #91	; 0x5b
    7d1c:	d100      	bne.n	7d20 <__sformatter+0x2c0>
    7d1e:	e115      	b.n	7f4c <__sformatter+0x4ec>
    7d20:	d806      	bhi.n	7d30 <__sformatter+0x2d0>
    7d22:	2d25      	cmp	r5, #37	; 0x25
    7d24:	d100      	bne.n	7d28 <__sformatter+0x2c8>
    7d26:	e0d3      	b.n	7ed0 <__sformatter+0x470>
    7d28:	2d58      	cmp	r5, #88	; 0x58
    7d2a:	d000      	beq.n	7d2e <__sformatter+0x2ce>
    7d2c:	e1ae      	b.n	808c <__sformatter+0x62c>
    7d2e:	e03e      	b.n	7dae <__sformatter+0x34e>
    7d30:	2d63      	cmp	r5, #99	; 0x63
    7d32:	d100      	bne.n	7d36 <__sformatter+0x2d6>
    7d34:	e07c      	b.n	7e30 <__sformatter+0x3d0>
    7d36:	2d64      	cmp	r5, #100	; 0x64
    7d38:	d000      	beq.n	7d3c <__sformatter+0x2dc>
    7d3a:	e1a7      	b.n	808c <__sformatter+0x62c>
    7d3c:	200a      	movs	r0, #10
    7d3e:	e012      	b.n	7d66 <__sformatter+0x306>
    7d40:	2d73      	cmp	r5, #115	; 0x73
    7d42:	d100      	bne.n	7d46 <__sformatter+0x2e6>
    7d44:	e0e6      	b.n	7f14 <__sformatter+0x4b4>
    7d46:	d807      	bhi.n	7d58 <__sformatter+0x2f8>
    7d48:	2d6e      	cmp	r5, #110	; 0x6e
    7d4a:	d100      	bne.n	7d4e <__sformatter+0x2ee>
    7d4c:	e180      	b.n	8050 <__sformatter+0x5f0>
    7d4e:	2d6f      	cmp	r5, #111	; 0x6f
    7d50:	d000      	beq.n	7d54 <__sformatter+0x2f4>
    7d52:	e19b      	b.n	808c <__sformatter+0x62c>
    7d54:	2008      	movs	r0, #8
    7d56:	e030      	b.n	7dba <__sformatter+0x35a>
    7d58:	2d75      	cmp	r5, #117	; 0x75
    7d5a:	d02d      	beq.n	7db8 <__sformatter+0x358>
    7d5c:	2d78      	cmp	r5, #120	; 0x78
    7d5e:	d000      	beq.n	7d62 <__sformatter+0x302>
    7d60:	e194      	b.n	808c <__sformatter+0x62c>
    7d62:	e024      	b.n	7dae <__sformatter+0x34e>
    7d64:	2000      	movs	r0, #0
    7d66:	2f00      	cmp	r7, #0
    7d68:	d148      	bne.n	7dfc <__sformatter+0x39c>
    7d6a:	a912      	add	r1, sp, #72	; 0x48
    7d6c:	aa13      	add	r2, sp, #76	; 0x4c
    7d6e:	ad11      	add	r5, sp, #68	; 0x44
    7d70:	9101      	str	r1, [sp, #4]
    7d72:	9202      	str	r2, [sp, #8]
    7d74:	1c31      	adds	r1, r6, #0
    7d76:	9500      	str	r5, [sp, #0]
    7d78:	9a05      	ldr	r2, [sp, #20]
    7d7a:	9b06      	ldr	r3, [sp, #24]
    7d7c:	f7ff f822 	bl	6dc4 <__strtoul>
    7d80:	9e11      	ldr	r6, [sp, #68]	; 0x44
    7d82:	2e00      	cmp	r6, #0
    7d84:	d105      	bne.n	7d92 <__sformatter+0x332>
    7d86:	982e      	ldr	r0, [sp, #184]	; 0xb8
    7d88:	2800      	cmp	r0, #0
    7d8a:	d128      	bne.n	7dde <__sformatter+0x37e>
    7d8c:	2401      	movs	r4, #1
    7d8e:	940b      	str	r4, [sp, #44]	; 0x2c
    7d90:	e17c      	b.n	808c <__sformatter+0x62c>
    7d92:	9b04      	ldr	r3, [sp, #16]
    7d94:	9d12      	ldr	r5, [sp, #72]	; 0x48
    7d96:	199e      	adds	r6, r3, r6
    7d98:	9604      	str	r6, [sp, #16]
    7d9a:	2d00      	cmp	r5, #0
    7d9c:	d005      	beq.n	7daa <__sformatter+0x34a>
    7d9e:	2180      	movs	r1, #128	; 0x80
    7da0:	060a      	lsls	r2, r1, #24
    7da2:	4290      	cmp	r0, r2
    7da4:	d001      	beq.n	7daa <__sformatter+0x34a>
    7da6:	4243      	negs	r3, r0
    7da8:	e02a      	b.n	7e00 <__sformatter+0x3a0>
    7daa:	1c03      	adds	r3, r0, #0
    7dac:	e028      	b.n	7e00 <__sformatter+0x3a0>
    7dae:	2010      	movs	r0, #16
    7db0:	e003      	b.n	7dba <__sformatter+0x35a>
    7db2:	46c0      	nop			; (mov r8, r8)
    7db4:	7fffffff 	.word	0x7fffffff
    7db8:	200a      	movs	r0, #10
    7dba:	2f00      	cmp	r7, #0
    7dbc:	d11e      	bne.n	7dfc <__sformatter+0x39c>
    7dbe:	ab11      	add	r3, sp, #68	; 0x44
    7dc0:	a913      	add	r1, sp, #76	; 0x4c
    7dc2:	ad12      	add	r5, sp, #72	; 0x48
    7dc4:	9300      	str	r3, [sp, #0]
    7dc6:	9102      	str	r1, [sp, #8]
    7dc8:	9b06      	ldr	r3, [sp, #24]
    7dca:	1c31      	adds	r1, r6, #0
    7dcc:	9501      	str	r5, [sp, #4]
    7dce:	9a05      	ldr	r2, [sp, #20]
    7dd0:	f7fe fff8 	bl	6dc4 <__strtoul>
    7dd4:	9e11      	ldr	r6, [sp, #68]	; 0x44
    7dd6:	1c03      	adds	r3, r0, #0
    7dd8:	2e00      	cmp	r6, #0
    7dda:	d103      	bne.n	7de4 <__sformatter+0x384>
    7ddc:	e7d3      	b.n	7d86 <__sformatter+0x326>
    7dde:	2701      	movs	r7, #1
    7de0:	1c33      	adds	r3, r6, #0
    7de2:	e00d      	b.n	7e00 <__sformatter+0x3a0>
    7de4:	9a04      	ldr	r2, [sp, #16]
    7de6:	9d12      	ldr	r5, [sp, #72]	; 0x48
    7de8:	1990      	adds	r0, r2, r6
    7dea:	9004      	str	r0, [sp, #16]
    7dec:	2d00      	cmp	r5, #0
    7dee:	d007      	beq.n	7e00 <__sformatter+0x3a0>
    7df0:	2180      	movs	r1, #128	; 0x80
    7df2:	060e      	lsls	r6, r1, #24
    7df4:	42b3      	cmp	r3, r6
    7df6:	d003      	beq.n	7e00 <__sformatter+0x3a0>
    7df8:	425b      	negs	r3, r3
    7dfa:	e001      	b.n	7e00 <__sformatter+0x3a0>
    7dfc:	2701      	movs	r7, #1
    7dfe:	2300      	movs	r3, #0
    7e00:	2c00      	cmp	r4, #0
    7e02:	d011      	beq.n	7e28 <__sformatter+0x3c8>
    7e04:	9e07      	ldr	r6, [sp, #28]
    7e06:	2e03      	cmp	r6, #3
    7e08:	d809      	bhi.n	7e1e <__sformatter+0x3be>
    7e0a:	1c30      	adds	r0, r6, #0
    7e0c:	f7fa f962 	bl	20d4 <__gnu_thumb1_case_uqi>
    7e10:	06040206 	.word	0x06040206
    7e14:	7023      	strb	r3, [r4, #0]
    7e16:	e002      	b.n	7e1e <__sformatter+0x3be>
    7e18:	8023      	strh	r3, [r4, #0]
    7e1a:	e000      	b.n	7e1e <__sformatter+0x3be>
    7e1c:	6023      	str	r3, [r4, #0]
    7e1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    7e20:	4279      	negs	r1, r7
    7e22:	4179      	adcs	r1, r7
    7e24:	186a      	adds	r2, r5, r1
    7e26:	920c      	str	r2, [sp, #48]	; 0x30
    7e28:	980a      	ldr	r0, [sp, #40]	; 0x28
    7e2a:	3001      	adds	r0, #1
    7e2c:	900a      	str	r0, [sp, #40]	; 0x28
    7e2e:	e06e      	b.n	7f0e <__sformatter+0x4ae>
    7e30:	980e      	ldr	r0, [sp, #56]	; 0x38
    7e32:	2800      	cmp	r0, #0
    7e34:	d100      	bne.n	7e38 <__sformatter+0x3d8>
    7e36:	2601      	movs	r6, #1
    7e38:	2c00      	cmp	r4, #0
    7e3a:	d033      	beq.n	7ea4 <__sformatter+0x444>
    7e3c:	2100      	movs	r1, #0
    7e3e:	9111      	str	r1, [sp, #68]	; 0x44
    7e40:	19a6      	adds	r6, r4, r6
    7e42:	428f      	cmp	r7, r1
    7e44:	d000      	beq.n	7e48 <__sformatter+0x3e8>
    7e46:	e11f      	b.n	8088 <__sformatter+0x628>
    7e48:	42b4      	cmp	r4, r6
    7e4a:	d019      	beq.n	7e80 <__sformatter+0x420>
    7e4c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    7e4e:	2a00      	cmp	r2, #0
    7e50:	d004      	beq.n	7e5c <__sformatter+0x3fc>
    7e52:	9811      	ldr	r0, [sp, #68]	; 0x44
    7e54:	2800      	cmp	r0, #0
    7e56:	da11      	bge.n	7e7c <__sformatter+0x41c>
    7e58:	2301      	movs	r3, #1
    7e5a:	930d      	str	r3, [sp, #52]	; 0x34
    7e5c:	2100      	movs	r1, #0
    7e5e:	9806      	ldr	r0, [sp, #24]
    7e60:	1c0a      	adds	r2, r1, #0
    7e62:	9d05      	ldr	r5, [sp, #20]
    7e64:	47a8      	blx	r5
    7e66:	9008      	str	r0, [sp, #32]
    7e68:	3001      	adds	r0, #1
    7e6a:	d009      	beq.n	7e80 <__sformatter+0x420>
    7e6c:	ab08      	add	r3, sp, #32
    7e6e:	781d      	ldrb	r5, [r3, #0]
    7e70:	7025      	strb	r5, [r4, #0]
    7e72:	9911      	ldr	r1, [sp, #68]	; 0x44
    7e74:	3401      	adds	r4, #1
    7e76:	3101      	adds	r1, #1
    7e78:	9111      	str	r1, [sp, #68]	; 0x44
    7e7a:	e7e5      	b.n	7e48 <__sformatter+0x3e8>
    7e7c:	2400      	movs	r4, #0
    7e7e:	940d      	str	r4, [sp, #52]	; 0x34
    7e80:	9e11      	ldr	r6, [sp, #68]	; 0x44
    7e82:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    7e84:	2e00      	cmp	r6, #0
    7e86:	d100      	bne.n	7e8a <__sformatter+0x42a>
    7e88:	e0a0      	b.n	7fcc <__sformatter+0x56c>
    7e8a:	2a00      	cmp	r2, #0
    7e8c:	d003      	beq.n	7e96 <__sformatter+0x436>
    7e8e:	990d      	ldr	r1, [sp, #52]	; 0x34
    7e90:	2900      	cmp	r1, #0
    7e92:	d100      	bne.n	7e96 <__sformatter+0x436>
    7e94:	e0f8      	b.n	8088 <__sformatter+0x628>
    7e96:	9a04      	ldr	r2, [sp, #16]
    7e98:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    7e9a:	1990      	adds	r0, r2, r6
    7e9c:	3401      	adds	r4, #1
    7e9e:	9004      	str	r0, [sp, #16]
    7ea0:	940c      	str	r4, [sp, #48]	; 0x30
    7ea2:	e0d1      	b.n	8048 <__sformatter+0x5e8>
    7ea4:	9411      	str	r4, [sp, #68]	; 0x44
    7ea6:	3e01      	subs	r6, #1
    7ea8:	1c70      	adds	r0, r6, #1
    7eaa:	d00c      	beq.n	7ec6 <__sformatter+0x466>
    7eac:	2100      	movs	r1, #0
    7eae:	9806      	ldr	r0, [sp, #24]
    7eb0:	1c0a      	adds	r2, r1, #0
    7eb2:	9b05      	ldr	r3, [sp, #20]
    7eb4:	4798      	blx	r3
    7eb6:	3e01      	subs	r6, #1
    7eb8:	9008      	str	r0, [sp, #32]
    7eba:	3001      	adds	r0, #1
    7ebc:	d003      	beq.n	7ec6 <__sformatter+0x466>
    7ebe:	9d11      	ldr	r5, [sp, #68]	; 0x44
    7ec0:	3501      	adds	r5, #1
    7ec2:	9511      	str	r5, [sp, #68]	; 0x44
    7ec4:	e7f0      	b.n	7ea8 <__sformatter+0x448>
    7ec6:	9e11      	ldr	r6, [sp, #68]	; 0x44
    7ec8:	2e00      	cmp	r6, #0
    7eca:	d000      	beq.n	7ece <__sformatter+0x46e>
    7ecc:	e0bc      	b.n	8048 <__sformatter+0x5e8>
    7ece:	e0dd      	b.n	808c <__sformatter+0x62c>
    7ed0:	2f00      	cmp	r7, #0
    7ed2:	d000      	beq.n	7ed6 <__sformatter+0x476>
    7ed4:	e0d5      	b.n	8082 <__sformatter+0x622>
    7ed6:	2100      	movs	r1, #0
    7ed8:	9806      	ldr	r0, [sp, #24]
    7eda:	1c0a      	adds	r2, r1, #0
    7edc:	9e05      	ldr	r6, [sp, #20]
    7ede:	47b0      	blx	r6
    7ee0:	1c05      	adds	r5, r0, #0
    7ee2:	f000 f919 	bl	8118 <isspace>
    7ee6:	2800      	cmp	r0, #0
    7ee8:	d003      	beq.n	7ef2 <__sformatter+0x492>
    7eea:	9c04      	ldr	r4, [sp, #16]
    7eec:	3401      	adds	r4, #1
    7eee:	9404      	str	r4, [sp, #16]
    7ef0:	e7f1      	b.n	7ed6 <__sformatter+0x476>
    7ef2:	2d25      	cmp	r5, #37	; 0x25
    7ef4:	d008      	beq.n	7f08 <__sformatter+0x4a8>
    7ef6:	2201      	movs	r2, #1
    7ef8:	9806      	ldr	r0, [sp, #24]
    7efa:	1c29      	adds	r1, r5, #0
    7efc:	47b0      	blx	r6
    7efe:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    7f00:	2a00      	cmp	r2, #0
    7f02:	d100      	bne.n	7f06 <__sformatter+0x4a6>
    7f04:	e742      	b.n	7d8c <__sformatter+0x32c>
    7f06:	e0bc      	b.n	8082 <__sformatter+0x622>
    7f08:	9904      	ldr	r1, [sp, #16]
    7f0a:	3101      	adds	r1, #1
    7f0c:	9104      	str	r1, [sp, #16]
    7f0e:	2401      	movs	r4, #1
    7f10:	940b      	str	r4, [sp, #44]	; 0x2c
    7f12:	e5b2      	b.n	7a7a <__sformatter+0x1a>
    7f14:	2301      	movs	r3, #1
    7f16:	930b      	str	r3, [sp, #44]	; 0x2c
    7f18:	2f00      	cmp	r7, #0
    7f1a:	d117      	bne.n	7f4c <__sformatter+0x4ec>
    7f1c:	9806      	ldr	r0, [sp, #24]
    7f1e:	1c39      	adds	r1, r7, #0
    7f20:	1c3a      	adds	r2, r7, #0
    7f22:	9d05      	ldr	r5, [sp, #20]
    7f24:	47a8      	blx	r5
    7f26:	1c05      	adds	r5, r0, #0
    7f28:	f000 f8f6 	bl	8118 <isspace>
    7f2c:	2800      	cmp	r0, #0
    7f2e:	d006      	beq.n	7f3e <__sformatter+0x4de>
    7f30:	9b04      	ldr	r3, [sp, #16]
    7f32:	2100      	movs	r1, #0
    7f34:	3301      	adds	r3, #1
    7f36:	9304      	str	r3, [sp, #16]
    7f38:	9806      	ldr	r0, [sp, #24]
    7f3a:	1c0a      	adds	r2, r1, #0
    7f3c:	e7f1      	b.n	7f22 <__sformatter+0x4c2>
    7f3e:	2201      	movs	r2, #1
    7f40:	9806      	ldr	r0, [sp, #24]
    7f42:	1c29      	adds	r1, r5, #0
    7f44:	9b05      	ldr	r3, [sp, #20]
    7f46:	4798      	blx	r3
    7f48:	2201      	movs	r2, #1
    7f4a:	920b      	str	r2, [sp, #44]	; 0x2c
    7f4c:	2c00      	cmp	r4, #0
    7f4e:	d049      	beq.n	7fe4 <__sformatter+0x584>
    7f50:	2100      	movs	r1, #0
    7f52:	9111      	str	r1, [sp, #68]	; 0x44
    7f54:	428f      	cmp	r7, r1
    7f56:	d000      	beq.n	7f5a <__sformatter+0x4fa>
    7f58:	e096      	b.n	8088 <__sformatter+0x628>
    7f5a:	3e01      	subs	r6, #1
    7f5c:	1c35      	adds	r5, r6, #0
    7f5e:	1c71      	adds	r1, r6, #1
    7f60:	d024      	beq.n	7fac <__sformatter+0x54c>
    7f62:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    7f64:	2a00      	cmp	r2, #0
    7f66:	d004      	beq.n	7f72 <__sformatter+0x512>
    7f68:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7f6a:	2b00      	cmp	r3, #0
    7f6c:	dc1c      	bgt.n	7fa8 <__sformatter+0x548>
    7f6e:	2001      	movs	r0, #1
    7f70:	900d      	str	r0, [sp, #52]	; 0x34
    7f72:	2100      	movs	r1, #0
    7f74:	9806      	ldr	r0, [sp, #24]
    7f76:	1c0a      	adds	r2, r1, #0
    7f78:	9b05      	ldr	r3, [sp, #20]
    7f7a:	4798      	blx	r3
    7f7c:	9008      	str	r0, [sp, #32]
    7f7e:	3001      	adds	r0, #1
    7f80:	d014      	beq.n	7fac <__sformatter+0x54c>
    7f82:	a908      	add	r1, sp, #32
    7f84:	780b      	ldrb	r3, [r1, #0]
    7f86:	a814      	add	r0, sp, #80	; 0x50
    7f88:	08da      	lsrs	r2, r3, #3
    7f8a:	1882      	adds	r2, r0, r2
    7f8c:	9808      	ldr	r0, [sp, #32]
    7f8e:	2107      	movs	r1, #7
    7f90:	4001      	ands	r1, r0
    7f92:	7a12      	ldrb	r2, [r2, #8]
    7f94:	2001      	movs	r0, #1
    7f96:	4088      	lsls	r0, r1
    7f98:	4210      	tst	r0, r2
    7f9a:	d007      	beq.n	7fac <__sformatter+0x54c>
    7f9c:	7023      	strb	r3, [r4, #0]
    7f9e:	9d11      	ldr	r5, [sp, #68]	; 0x44
    7fa0:	3401      	adds	r4, #1
    7fa2:	3501      	adds	r5, #1
    7fa4:	9511      	str	r5, [sp, #68]	; 0x44
    7fa6:	e7d8      	b.n	7f5a <__sformatter+0x4fa>
    7fa8:	2600      	movs	r6, #0
    7faa:	960d      	str	r6, [sp, #52]	; 0x34
    7fac:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7fae:	ae08      	add	r6, sp, #32
    7fb0:	7831      	ldrb	r1, [r6, #0]
    7fb2:	2b00      	cmp	r3, #0
    7fb4:	d005      	beq.n	7fc2 <__sformatter+0x562>
    7fb6:	982e      	ldr	r0, [sp, #184]	; 0xb8
    7fb8:	2800      	cmp	r0, #0
    7fba:	d00a      	beq.n	7fd2 <__sformatter+0x572>
    7fbc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    7fbe:	2a00      	cmp	r2, #0
    7fc0:	d107      	bne.n	7fd2 <__sformatter+0x572>
    7fc2:	2201      	movs	r2, #1
    7fc4:	9806      	ldr	r0, [sp, #24]
    7fc6:	9f05      	ldr	r7, [sp, #20]
    7fc8:	47b8      	blx	r7
    7fca:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    7fcc:	2a00      	cmp	r2, #0
    7fce:	d05d      	beq.n	808c <__sformatter+0x62c>
    7fd0:	e05a      	b.n	8088 <__sformatter+0x628>
    7fd2:	2000      	movs	r0, #0
    7fd4:	9e04      	ldr	r6, [sp, #16]
    7fd6:	7020      	strb	r0, [r4, #0]
    7fd8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    7fda:	18f3      	adds	r3, r6, r3
    7fdc:	3401      	adds	r4, #1
    7fde:	9304      	str	r3, [sp, #16]
    7fe0:	940c      	str	r4, [sp, #48]	; 0x30
    7fe2:	e02b      	b.n	803c <__sformatter+0x5dc>
    7fe4:	9411      	str	r4, [sp, #68]	; 0x44
    7fe6:	3e01      	subs	r6, #1
    7fe8:	1c35      	adds	r5, r6, #0
    7fea:	1c71      	adds	r1, r6, #1
    7fec:	d019      	beq.n	8022 <__sformatter+0x5c2>
    7fee:	2100      	movs	r1, #0
    7ff0:	9806      	ldr	r0, [sp, #24]
    7ff2:	1c0a      	adds	r2, r1, #0
    7ff4:	9c05      	ldr	r4, [sp, #20]
    7ff6:	47a0      	blx	r4
    7ff8:	9008      	str	r0, [sp, #32]
    7ffa:	3001      	adds	r0, #1
    7ffc:	d011      	beq.n	8022 <__sformatter+0x5c2>
    7ffe:	a808      	add	r0, sp, #32
    8000:	7801      	ldrb	r1, [r0, #0]
    8002:	aa14      	add	r2, sp, #80	; 0x50
    8004:	08cb      	lsrs	r3, r1, #3
    8006:	9808      	ldr	r0, [sp, #32]
    8008:	18d4      	adds	r4, r2, r3
    800a:	2307      	movs	r3, #7
    800c:	4003      	ands	r3, r0
    800e:	2101      	movs	r1, #1
    8010:	7a24      	ldrb	r4, [r4, #8]
    8012:	4099      	lsls	r1, r3
    8014:	3e01      	subs	r6, #1
    8016:	4221      	tst	r1, r4
    8018:	d003      	beq.n	8022 <__sformatter+0x5c2>
    801a:	9d11      	ldr	r5, [sp, #68]	; 0x44
    801c:	3501      	adds	r5, #1
    801e:	9511      	str	r5, [sp, #68]	; 0x44
    8020:	e7e2      	b.n	7fe8 <__sformatter+0x588>
    8022:	9e11      	ldr	r6, [sp, #68]	; 0x44
    8024:	2e00      	cmp	r6, #0
    8026:	d105      	bne.n	8034 <__sformatter+0x5d4>
    8028:	9806      	ldr	r0, [sp, #24]
    802a:	9908      	ldr	r1, [sp, #32]
    802c:	2201      	movs	r2, #1
    802e:	9b05      	ldr	r3, [sp, #20]
    8030:	4798      	blx	r3
    8032:	e522      	b.n	7a7a <__sformatter+0x1a>
    8034:	9b04      	ldr	r3, [sp, #16]
    8036:	9908      	ldr	r1, [sp, #32]
    8038:	1998      	adds	r0, r3, r6
    803a:	9004      	str	r0, [sp, #16]
    803c:	2d00      	cmp	r5, #0
    803e:	db03      	blt.n	8048 <__sformatter+0x5e8>
    8040:	9806      	ldr	r0, [sp, #24]
    8042:	2201      	movs	r2, #1
    8044:	9d05      	ldr	r5, [sp, #20]
    8046:	47a8      	blx	r5
    8048:	990a      	ldr	r1, [sp, #40]	; 0x28
    804a:	3101      	adds	r1, #1
    804c:	910a      	str	r1, [sp, #40]	; 0x28
    804e:	e514      	b.n	7a7a <__sformatter+0x1a>
    8050:	2c00      	cmp	r4, #0
    8052:	d100      	bne.n	8056 <__sformatter+0x5f6>
    8054:	e511      	b.n	7a7a <__sformatter+0x1a>
    8056:	9a07      	ldr	r2, [sp, #28]
    8058:	2a03      	cmp	r2, #3
    805a:	d900      	bls.n	805e <__sformatter+0x5fe>
    805c:	e50d      	b.n	7a7a <__sformatter+0x1a>
    805e:	1c10      	adds	r0, r2, #0
    8060:	f7fa f838 	bl	20d4 <__gnu_thumb1_case_uqi>
    8064:	07020a07 	.word	0x07020a07
    8068:	466d      	mov	r5, sp
    806a:	2110      	movs	r1, #16
    806c:	5b4a      	ldrh	r2, [r1, r5]
    806e:	8022      	strh	r2, [r4, #0]
    8070:	e503      	b.n	7a7a <__sformatter+0x1a>
    8072:	9804      	ldr	r0, [sp, #16]
    8074:	6020      	str	r0, [r4, #0]
    8076:	e500      	b.n	7a7a <__sformatter+0x1a>
    8078:	4668      	mov	r0, sp
    807a:	2610      	movs	r6, #16
    807c:	5c33      	ldrb	r3, [r6, r0]
    807e:	7023      	strb	r3, [r4, #0]
    8080:	e4fb      	b.n	7a7a <__sformatter+0x1a>
    8082:	2701      	movs	r7, #1
    8084:	970b      	str	r7, [sp, #44]	; 0x2c
    8086:	e4f8      	b.n	7a7a <__sformatter+0x1a>
    8088:	2701      	movs	r7, #1
    808a:	e4f6      	b.n	7a7a <__sformatter+0x1a>
    808c:	2100      	movs	r1, #0
    808e:	9806      	ldr	r0, [sp, #24]
    8090:	2202      	movs	r2, #2
    8092:	9d05      	ldr	r5, [sp, #20]
    8094:	47a8      	blx	r5
    8096:	990a      	ldr	r1, [sp, #40]	; 0x28
    8098:	2800      	cmp	r0, #0
    809a:	d005      	beq.n	80a8 <__sformatter+0x648>
    809c:	2900      	cmp	r1, #0
    809e:	d128      	bne.n	80f2 <__sformatter+0x692>
    80a0:	2601      	movs	r6, #1
    80a2:	4270      	negs	r0, r6
    80a4:	900c      	str	r0, [sp, #48]	; 0x30
    80a6:	e024      	b.n	80f2 <__sformatter+0x692>
    80a8:	2900      	cmp	r1, #0
    80aa:	d122      	bne.n	80f2 <__sformatter+0x692>
    80ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    80ae:	2a00      	cmp	r2, #0
    80b0:	d01f      	beq.n	80f2 <__sformatter+0x692>
    80b2:	990a      	ldr	r1, [sp, #40]	; 0x28
    80b4:	9806      	ldr	r0, [sp, #24]
    80b6:	1c0a      	adds	r2, r1, #0
    80b8:	9f05      	ldr	r7, [sp, #20]
    80ba:	47b8      	blx	r7
    80bc:	990a      	ldr	r1, [sp, #40]	; 0x28
    80be:	1c04      	adds	r4, r0, #0
    80c0:	2202      	movs	r2, #2
    80c2:	9806      	ldr	r0, [sp, #24]
    80c4:	47b8      	blx	r7
    80c6:	2800      	cmp	r0, #0
    80c8:	d1ea      	bne.n	80a0 <__sformatter+0x640>
    80ca:	9806      	ldr	r0, [sp, #24]
    80cc:	1c21      	adds	r1, r4, #0
    80ce:	2201      	movs	r2, #1
    80d0:	47b8      	blx	r7
    80d2:	e00e      	b.n	80f2 <__sformatter+0x692>
    80d4:	21ff      	movs	r1, #255	; 0xff
    80d6:	ab1e      	add	r3, sp, #120	; 0x78
    80d8:	e5ed      	b.n	7cb6 <__sformatter+0x256>
    80da:	2900      	cmp	r1, #0
    80dc:	d100      	bne.n	80e0 <__sformatter+0x680>
    80de:	e5eb      	b.n	7cb8 <__sformatter+0x258>
    80e0:	ad20      	add	r5, sp, #128	; 0x80
    80e2:	782a      	ldrb	r2, [r5, #0]
    80e4:	a828      	add	r0, sp, #160	; 0xa0
    80e6:	43d6      	mvns	r6, r2
    80e8:	702e      	strb	r6, [r5, #0]
    80ea:	3501      	adds	r5, #1
    80ec:	4285      	cmp	r5, r0
    80ee:	d1f8      	bne.n	80e2 <__sformatter+0x682>
    80f0:	e5e2      	b.n	7cb8 <__sformatter+0x258>
    80f2:	980c      	ldr	r0, [sp, #48]	; 0x30
    80f4:	b029      	add	sp, #164	; 0xa4
    80f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000080f8 <isalpha>:
    80f8:	2280      	movs	r2, #128	; 0x80
    80fa:	1c03      	adds	r3, r0, #0
    80fc:	b500      	push	{lr}
    80fe:	2000      	movs	r0, #0
    8100:	0051      	lsls	r1, r2, #1
    8102:	428b      	cmp	r3, r1
    8104:	d804      	bhi.n	8110 <isalpha+0x18>
    8106:	4803      	ldr	r0, [pc, #12]	; (8114 <isalpha+0x1c>)
    8108:	2201      	movs	r2, #1
    810a:	18c3      	adds	r3, r0, r3
    810c:	7858      	ldrb	r0, [r3, #1]
    810e:	4010      	ands	r0, r2
    8110:	bd00      	pop	{pc}
    8112:	46c0      	nop			; (mov r8, r8)
    8114:	00008952 	.word	0x00008952

00008118 <isspace>:
    8118:	2280      	movs	r2, #128	; 0x80
    811a:	1c03      	adds	r3, r0, #0
    811c:	b500      	push	{lr}
    811e:	2000      	movs	r0, #0
    8120:	0051      	lsls	r1, r2, #1
    8122:	428b      	cmp	r3, r1
    8124:	d804      	bhi.n	8130 <isspace+0x18>
    8126:	4803      	ldr	r0, [pc, #12]	; (8134 <isspace+0x1c>)
    8128:	2210      	movs	r2, #16
    812a:	18c3      	adds	r3, r0, r3
    812c:	7858      	ldrb	r0, [r3, #1]
    812e:	4010      	ands	r0, r2
    8130:	bd00      	pop	{pc}
    8132:	46c0      	nop			; (mov r8, r8)
    8134:	00008952 	.word	0x00008952

00008138 <isupper>:
    8138:	2280      	movs	r2, #128	; 0x80
    813a:	1c03      	adds	r3, r0, #0
    813c:	b500      	push	{lr}
    813e:	2000      	movs	r0, #0
    8140:	0051      	lsls	r1, r2, #1
    8142:	428b      	cmp	r3, r1
    8144:	d804      	bhi.n	8150 <isupper+0x18>
    8146:	4803      	ldr	r0, [pc, #12]	; (8154 <isupper+0x1c>)
    8148:	2240      	movs	r2, #64	; 0x40
    814a:	18c3      	adds	r3, r0, r3
    814c:	7858      	ldrb	r0, [r3, #1]
    814e:	4010      	ands	r0, r2
    8150:	bd00      	pop	{pc}
    8152:	46c0      	nop			; (mov r8, r8)
    8154:	00008952 	.word	0x00008952

00008158 <toupper>:
    8158:	1c03      	adds	r3, r0, #0
    815a:	3b61      	subs	r3, #97	; 0x61
    815c:	b500      	push	{lr}
    815e:	2b19      	cmp	r3, #25
    8160:	d800      	bhi.n	8164 <toupper+0xc>
    8162:	3820      	subs	r0, #32
    8164:	bd00      	pop	{pc}

00008166 <memchr>:
    8166:	b500      	push	{lr}
    8168:	b2c9      	uxtb	r1, r1
    816a:	1882      	adds	r2, r0, r2
    816c:	4290      	cmp	r0, r2
    816e:	d005      	beq.n	817c <memchr+0x16>
    8170:	7803      	ldrb	r3, [r0, #0]
    8172:	3001      	adds	r0, #1
    8174:	428b      	cmp	r3, r1
    8176:	d1f9      	bne.n	816c <memchr+0x6>
    8178:	3801      	subs	r0, #1
    817a:	e000      	b.n	817e <memchr+0x18>
    817c:	2000      	movs	r0, #0
    817e:	bd00      	pop	{pc}

00008180 <__num2dec>:
    8180:	b5f0      	push	{r4, r5, r6, r7, lr}
    8182:	b089      	sub	sp, #36	; 0x24
    8184:	9003      	str	r0, [sp, #12]
    8186:	8846      	ldrh	r6, [r0, #2]
    8188:	1c19      	adds	r1, r3, #0
    818a:	1c10      	adds	r0, r2, #0
    818c:	1c1c      	adds	r4, r3, #0
    818e:	1c15      	adds	r5, r2, #0
    8190:	9601      	str	r6, [sp, #4]
    8192:	f000 f965 	bl	8460 <__signbitd>
    8196:	990e      	ldr	r1, [sp, #56]	; 0x38
    8198:	1e43      	subs	r3, r0, #1
    819a:	4198      	sbcs	r0, r3
    819c:	7008      	strb	r0, [r1, #0]
    819e:	980e      	ldr	r0, [sp, #56]	; 0x38
    81a0:	2300      	movs	r3, #0
    81a2:	2201      	movs	r2, #1
    81a4:	8043      	strh	r3, [r0, #2]
    81a6:	7102      	strb	r2, [r0, #4]
    81a8:	1c1f      	adds	r7, r3, #0
    81aa:	1c28      	adds	r0, r5, #0
    81ac:	1c21      	adds	r1, r4, #0
    81ae:	4b7b      	ldr	r3, [pc, #492]	; (839c <__num2dec+0x21c>)
    81b0:	4a79      	ldr	r2, [pc, #484]	; (8398 <__num2dec+0x218>)
    81b2:	f7fa f859 	bl	2268 <__aeabi_dcmpeq>
    81b6:	2800      	cmp	r0, #0
    81b8:	d003      	beq.n	81c2 <__num2dec+0x42>
    81ba:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    81bc:	2130      	movs	r1, #48	; 0x30
    81be:	7161      	strb	r1, [r4, #5]
    81c0:	e0e7      	b.n	8392 <__num2dec+0x212>
    81c2:	1c28      	adds	r0, r5, #0
    81c4:	1c21      	adds	r1, r4, #0
    81c6:	f000 f94d 	bl	8464 <__fpclassifyd>
    81ca:	2802      	cmp	r0, #2
    81cc:	dc0a      	bgt.n	81e4 <__num2dec+0x64>
    81ce:	1c28      	adds	r0, r5, #0
    81d0:	1c21      	adds	r1, r4, #0
    81d2:	f000 f947 	bl	8464 <__fpclassifyd>
    81d6:	2749      	movs	r7, #73	; 0x49
    81d8:	2801      	cmp	r0, #1
    81da:	d100      	bne.n	81de <__num2dec+0x5e>
    81dc:	274e      	movs	r7, #78	; 0x4e
    81de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    81e0:	7157      	strb	r7, [r2, #5]
    81e2:	e0d6      	b.n	8392 <__num2dec+0x212>
    81e4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    81e6:	1c28      	adds	r0, r5, #0
    81e8:	7137      	strb	r7, [r6, #4]
    81ea:	1c21      	adds	r1, r4, #0
    81ec:	4b6b      	ldr	r3, [pc, #428]	; (839c <__num2dec+0x21c>)
    81ee:	4a6a      	ldr	r2, [pc, #424]	; (8398 <__num2dec+0x218>)
    81f0:	f7fa f840 	bl	2274 <__aeabi_dcmplt>
    81f4:	2800      	cmp	r0, #0
    81f6:	d002      	beq.n	81fe <__num2dec+0x7e>
    81f8:	2180      	movs	r1, #128	; 0x80
    81fa:	060b      	lsls	r3, r1, #24
    81fc:	18e4      	adds	r4, r4, r3
    81fe:	aa07      	add	r2, sp, #28
    8200:	1c28      	adds	r0, r5, #0
    8202:	1c21      	adds	r1, r4, #0
    8204:	f000 f94c 	bl	84a0 <frexp>
    8208:	9f07      	ldr	r7, [sp, #28]
    820a:	486b      	ldr	r0, [pc, #428]	; (83b8 <__num2dec+0x238>)
    820c:	496b      	ldr	r1, [pc, #428]	; (83bc <__num2dec+0x23c>)
    820e:	4378      	muls	r0, r7
    8210:	f7f9 ffb8 	bl	2184 <__aeabi_idiv>
    8214:	1e07      	subs	r7, r0, #0
    8216:	da14      	bge.n	8242 <__num2dec+0xc2>
    8218:	4b69      	ldr	r3, [pc, #420]	; (83c0 <__num2dec+0x240>)
    821a:	4246      	negs	r6, r0
    821c:	9300      	str	r3, [sp, #0]
    821e:	07f0      	lsls	r0, r6, #31
    8220:	d508      	bpl.n	8234 <__num2dec+0xb4>
    8222:	1c21      	adds	r1, r4, #0
    8224:	9c00      	ldr	r4, [sp, #0]
    8226:	1c28      	adds	r0, r5, #0
    8228:	6822      	ldr	r2, [r4, #0]
    822a:	6863      	ldr	r3, [r4, #4]
    822c:	f7fa fc44 	bl	2ab8 <__aeabi_dmul>
    8230:	1c05      	adds	r5, r0, #0
    8232:	1c0c      	adds	r4, r1, #0
    8234:	9a00      	ldr	r2, [sp, #0]
    8236:	1076      	asrs	r6, r6, #1
    8238:	3208      	adds	r2, #8
    823a:	9200      	str	r2, [sp, #0]
    823c:	2e00      	cmp	r6, #0
    823e:	d1ee      	bne.n	821e <__num2dec+0x9e>
    8240:	e01f      	b.n	8282 <__num2dec+0x102>
    8242:	2800      	cmp	r0, #0
    8244:	d01d      	beq.n	8282 <__num2dec+0x102>
    8246:	9002      	str	r0, [sp, #8]
    8248:	485d      	ldr	r0, [pc, #372]	; (83c0 <__num2dec+0x240>)
    824a:	4a55      	ldr	r2, [pc, #340]	; (83a0 <__num2dec+0x220>)
    824c:	4b55      	ldr	r3, [pc, #340]	; (83a4 <__num2dec+0x224>)
    824e:	9000      	str	r0, [sp, #0]
    8250:	9e02      	ldr	r6, [sp, #8]
    8252:	07f6      	lsls	r6, r6, #31
    8254:	d508      	bpl.n	8268 <__num2dec+0xe8>
    8256:	1c10      	adds	r0, r2, #0
    8258:	9a00      	ldr	r2, [sp, #0]
    825a:	1c19      	adds	r1, r3, #0
    825c:	6853      	ldr	r3, [r2, #4]
    825e:	6812      	ldr	r2, [r2, #0]
    8260:	f7fa fc2a 	bl	2ab8 <__aeabi_dmul>
    8264:	1c02      	adds	r2, r0, #0
    8266:	1c0b      	adds	r3, r1, #0
    8268:	9900      	ldr	r1, [sp, #0]
    826a:	9802      	ldr	r0, [sp, #8]
    826c:	3108      	adds	r1, #8
    826e:	1046      	asrs	r6, r0, #1
    8270:	9100      	str	r1, [sp, #0]
    8272:	9602      	str	r6, [sp, #8]
    8274:	d1ec      	bne.n	8250 <__num2dec+0xd0>
    8276:	1c28      	adds	r0, r5, #0
    8278:	1c21      	adds	r1, r4, #0
    827a:	f7fa f823 	bl	22c4 <__aeabi_ddiv>
    827e:	1c05      	adds	r5, r0, #0
    8280:	1c0c      	adds	r4, r1, #0
    8282:	1c28      	adds	r0, r5, #0
    8284:	1c21      	adds	r1, r4, #0
    8286:	4a46      	ldr	r2, [pc, #280]	; (83a0 <__num2dec+0x220>)
    8288:	4b46      	ldr	r3, [pc, #280]	; (83a4 <__num2dec+0x224>)
    828a:	f7fa f811 	bl	22b0 <__aeabi_dcmpge>
    828e:	2800      	cmp	r0, #0
    8290:	d009      	beq.n	82a6 <__num2dec+0x126>
    8292:	1c28      	adds	r0, r5, #0
    8294:	1c21      	adds	r1, r4, #0
    8296:	4a44      	ldr	r2, [pc, #272]	; (83a8 <__num2dec+0x228>)
    8298:	4b44      	ldr	r3, [pc, #272]	; (83ac <__num2dec+0x22c>)
    829a:	f7fa fc0d 	bl	2ab8 <__aeabi_dmul>
    829e:	3701      	adds	r7, #1
    82a0:	1c05      	adds	r5, r0, #0
    82a2:	1c0c      	adds	r4, r1, #0
    82a4:	e7ed      	b.n	8282 <__num2dec+0x102>
    82a6:	1c28      	adds	r0, r5, #0
    82a8:	1c21      	adds	r1, r4, #0
    82aa:	4a3f      	ldr	r2, [pc, #252]	; (83a8 <__num2dec+0x228>)
    82ac:	4b3f      	ldr	r3, [pc, #252]	; (83ac <__num2dec+0x22c>)
    82ae:	f7f9 ffe1 	bl	2274 <__aeabi_dcmplt>
    82b2:	2800      	cmp	r0, #0
    82b4:	d009      	beq.n	82ca <__num2dec+0x14a>
    82b6:	1c28      	adds	r0, r5, #0
    82b8:	1c21      	adds	r1, r4, #0
    82ba:	4a3d      	ldr	r2, [pc, #244]	; (83b0 <__num2dec+0x230>)
    82bc:	4b3d      	ldr	r3, [pc, #244]	; (83b4 <__num2dec+0x234>)
    82be:	f7fa fbfb 	bl	2ab8 <__aeabi_dmul>
    82c2:	3f01      	subs	r7, #1
    82c4:	1c05      	adds	r5, r0, #0
    82c6:	1c0c      	adds	r4, r1, #0
    82c8:	e7ed      	b.n	82a6 <__num2dec+0x126>
    82ca:	4668      	mov	r0, sp
    82cc:	2104      	movs	r1, #4
    82ce:	5e43      	ldrsh	r3, [r0, r1]
    82d0:	9300      	str	r3, [sp, #0]
    82d2:	2b10      	cmp	r3, #16
    82d4:	dd01      	ble.n	82da <__num2dec+0x15a>
    82d6:	2110      	movs	r1, #16
    82d8:	9100      	str	r1, [sp, #0]
    82da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    82dc:	3305      	adds	r3, #5
    82de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    82e0:	9e00      	ldr	r6, [sp, #0]
    82e2:	7912      	ldrb	r2, [r2, #4]
    82e4:	2e00      	cmp	r6, #0
    82e6:	d03d      	beq.n	8364 <__num2dec+0x1e4>
    82e8:	9e00      	ldr	r6, [sp, #0]
    82ea:	2e08      	cmp	r6, #8
    82ec:	dd00      	ble.n	82f0 <__num2dec+0x170>
    82ee:	2608      	movs	r6, #8
    82f0:	9900      	ldr	r1, [sp, #0]
    82f2:	18b2      	adds	r2, r6, r2
    82f4:	1b88      	subs	r0, r1, r6
    82f6:	990e      	ldr	r1, [sp, #56]	; 0x38
    82f8:	9000      	str	r0, [sp, #0]
    82fa:	710a      	strb	r2, [r1, #4]
    82fc:	1e70      	subs	r0, r6, #1
    82fe:	4a31      	ldr	r2, [pc, #196]	; (83c4 <__num2dec+0x244>)
    8300:	00c1      	lsls	r1, r0, #3
    8302:	199b      	adds	r3, r3, r6
    8304:	9305      	str	r3, [sp, #20]
    8306:	1853      	adds	r3, r2, r1
    8308:	681a      	ldr	r2, [r3, #0]
    830a:	685b      	ldr	r3, [r3, #4]
    830c:	1c28      	adds	r0, r5, #0
    830e:	1c21      	adds	r1, r4, #0
    8310:	f7fa fbd2 	bl	2ab8 <__aeabi_dmul>
    8314:	1c0d      	adds	r5, r1, #0
    8316:	1c04      	adds	r4, r0, #0
    8318:	f7fb f9bc 	bl	3694 <__aeabi_d2iz>
    831c:	9002      	str	r0, [sp, #8]
    831e:	f7fb f9ed 	bl	36fc <__aeabi_i2d>
    8322:	1c02      	adds	r2, r0, #0
    8324:	1c0b      	adds	r3, r1, #0
    8326:	1c20      	adds	r0, r4, #0
    8328:	1c29      	adds	r1, r5, #0
    832a:	f7fa fe37 	bl	2f9c <__aeabi_dsub>
    832e:	1bbf      	subs	r7, r7, r6
    8330:	1c05      	adds	r5, r0, #0
    8332:	1c0c      	adds	r4, r1, #0
    8334:	9601      	str	r6, [sp, #4]
    8336:	9805      	ldr	r0, [sp, #20]
    8338:	9901      	ldr	r1, [sp, #4]
    833a:	1b82      	subs	r2, r0, r6
    833c:	9204      	str	r2, [sp, #16]
    833e:	3901      	subs	r1, #1
    8340:	9101      	str	r1, [sp, #4]
    8342:	d30d      	bcc.n	8360 <__num2dec+0x1e0>
    8344:	9802      	ldr	r0, [sp, #8]
    8346:	210a      	movs	r1, #10
    8348:	f7f9 ff72 	bl	2230 <__aeabi_idivmod>
    834c:	9804      	ldr	r0, [sp, #16]
    834e:	9b01      	ldr	r3, [sp, #4]
    8350:	3130      	adds	r1, #48	; 0x30
    8352:	54c1      	strb	r1, [r0, r3]
    8354:	9802      	ldr	r0, [sp, #8]
    8356:	210a      	movs	r1, #10
    8358:	f7f9 ff14 	bl	2184 <__aeabi_idiv>
    835c:	9002      	str	r0, [sp, #8]
    835e:	e7ea      	b.n	8336 <__num2dec+0x1b6>
    8360:	1993      	adds	r3, r2, r6
    8362:	e7bc      	b.n	82de <__num2dec+0x15e>
    8364:	9d03      	ldr	r5, [sp, #12]
    8366:	2402      	movs	r4, #2
    8368:	5f28      	ldrsh	r0, [r5, r4]
    836a:	2820      	cmp	r0, #32
    836c:	dd00      	ble.n	8370 <__num2dec+0x1f0>
    836e:	2020      	movs	r0, #32
    8370:	1a85      	subs	r5, r0, r2
    8372:	2d00      	cmp	r5, #0
    8374:	dd0b      	ble.n	838e <__num2dec+0x20e>
    8376:	195e      	adds	r6, r3, r5
    8378:	42b3      	cmp	r3, r6
    837a:	d003      	beq.n	8384 <__num2dec+0x204>
    837c:	2030      	movs	r0, #48	; 0x30
    837e:	7018      	strb	r0, [r3, #0]
    8380:	3301      	adds	r3, #1
    8382:	e7f9      	b.n	8378 <__num2dec+0x1f8>
    8384:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    8386:	1b7f      	subs	r7, r7, r5
    8388:	7923      	ldrb	r3, [r4, #4]
    838a:	18e9      	adds	r1, r5, r3
    838c:	7121      	strb	r1, [r4, #4]
    838e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8390:	8057      	strh	r7, [r2, #2]
    8392:	b009      	add	sp, #36	; 0x24
    8394:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8396:	46c0      	nop			; (mov r8, r8)
	...
    83a4:	3ff00000 	.word	0x3ff00000
    83a8:	9999999a 	.word	0x9999999a
    83ac:	3fb99999 	.word	0x3fb99999
    83b0:	00000000 	.word	0x00000000
    83b4:	40240000 	.word	0x40240000
    83b8:	000497e5 	.word	0x000497e5
    83bc:	000f4240 	.word	0x000f4240
    83c0:	00008a98 	.word	0x00008a98
    83c4:	00008a58 	.word	0x00008a58

000083c8 <__round_decimal>:
    83c8:	b530      	push	{r4, r5, lr}
    83ca:	2900      	cmp	r1, #0
    83cc:	da04      	bge.n	83d8 <__round_decimal+0x10>
    83ce:	2100      	movs	r1, #0
    83d0:	2201      	movs	r2, #1
    83d2:	8041      	strh	r1, [r0, #2]
    83d4:	7102      	strb	r2, [r0, #4]
    83d6:	e036      	b.n	8446 <__round_decimal+0x7e>
    83d8:	7903      	ldrb	r3, [r0, #4]
    83da:	4299      	cmp	r1, r3
    83dc:	da3f      	bge.n	845e <__round_decimal+0x96>
    83de:	1c4c      	adds	r4, r1, #1
    83e0:	1904      	adds	r4, r0, r4
    83e2:	1d65      	adds	r5, r4, #5
    83e4:	1d22      	adds	r2, r4, #4
    83e6:	7924      	ldrb	r4, [r4, #4]
    83e8:	3c30      	subs	r4, #48	; 0x30
    83ea:	2c05      	cmp	r4, #5
    83ec:	d112      	bne.n	8414 <__round_decimal+0x4c>
    83ee:	18c3      	adds	r3, r0, r3
    83f0:	3305      	adds	r3, #5
    83f2:	3b01      	subs	r3, #1
    83f4:	4293      	cmp	r3, r2
    83f6:	d803      	bhi.n	8400 <__round_decimal+0x38>
    83f8:	2401      	movs	r4, #1
    83fa:	4293      	cmp	r3, r2
    83fc:	d108      	bne.n	8410 <__round_decimal+0x48>
    83fe:	e003      	b.n	8408 <__round_decimal+0x40>
    8400:	781c      	ldrb	r4, [r3, #0]
    8402:	2c30      	cmp	r4, #48	; 0x30
    8404:	d0f5      	beq.n	83f2 <__round_decimal+0x2a>
    8406:	e7f7      	b.n	83f8 <__round_decimal+0x30>
    8408:	3d02      	subs	r5, #2
    840a:	782b      	ldrb	r3, [r5, #0]
    840c:	4023      	ands	r3, r4
    840e:	d00e      	beq.n	842e <__round_decimal+0x66>
    8410:	1c23      	adds	r3, r4, #0
    8412:	e00c      	b.n	842e <__round_decimal+0x66>
    8414:	2301      	movs	r3, #1
    8416:	2c05      	cmp	r4, #5
    8418:	dc09      	bgt.n	842e <__round_decimal+0x66>
    841a:	2300      	movs	r3, #0
    841c:	e007      	b.n	842e <__round_decimal+0x66>
    841e:	3a01      	subs	r2, #1
    8420:	7814      	ldrb	r4, [r2, #0]
    8422:	3c30      	subs	r4, #48	; 0x30
    8424:	18e5      	adds	r5, r4, r3
    8426:	2301      	movs	r3, #1
    8428:	2d09      	cmp	r5, #9
    842a:	dd03      	ble.n	8434 <__round_decimal+0x6c>
    842c:	3901      	subs	r1, #1
    842e:	2900      	cmp	r1, #0
    8430:	d1f5      	bne.n	841e <__round_decimal+0x56>
    8432:	e00b      	b.n	844c <__round_decimal+0x84>
    8434:	2300      	movs	r3, #0
    8436:	429d      	cmp	r5, r3
    8438:	d0f8      	beq.n	842c <__round_decimal+0x64>
    843a:	3530      	adds	r5, #48	; 0x30
    843c:	7015      	strb	r5, [r2, #0]
    843e:	7101      	strb	r1, [r0, #4]
    8440:	e00d      	b.n	845e <__round_decimal+0x96>
    8442:	8043      	strh	r3, [r0, #2]
    8444:	7102      	strb	r2, [r0, #4]
    8446:	2430      	movs	r4, #48	; 0x30
    8448:	7144      	strb	r4, [r0, #5]
    844a:	e008      	b.n	845e <__round_decimal+0x96>
    844c:	2201      	movs	r2, #1
    844e:	2b00      	cmp	r3, #0
    8450:	d0f7      	beq.n	8442 <__round_decimal+0x7a>
    8452:	8841      	ldrh	r1, [r0, #2]
    8454:	7102      	strb	r2, [r0, #4]
    8456:	3101      	adds	r1, #1
    8458:	8041      	strh	r1, [r0, #2]
    845a:	2431      	movs	r4, #49	; 0x31
    845c:	e7f4      	b.n	8448 <__round_decimal+0x80>
    845e:	bd30      	pop	{r4, r5, pc}

00008460 <__signbitd>:
    8460:	0fc8      	lsrs	r0, r1, #31
    8462:	4770      	bx	lr

00008464 <__fpclassifyd>:
    8464:	4b0c      	ldr	r3, [pc, #48]	; (8498 <__fpclassifyd+0x34>)
    8466:	1c0a      	adds	r2, r1, #0
    8468:	b500      	push	{lr}
    846a:	401a      	ands	r2, r3
    846c:	d009      	beq.n	8482 <__fpclassifyd+0x1e>
    846e:	429a      	cmp	r2, r3
    8470:	d10f      	bne.n	8492 <__fpclassifyd+0x2e>
    8472:	0309      	lsls	r1, r1, #12
    8474:	d001      	beq.n	847a <__fpclassifyd+0x16>
    8476:	2001      	movs	r0, #1
    8478:	e00c      	b.n	8494 <__fpclassifyd+0x30>
    847a:	2800      	cmp	r0, #0
    847c:	d1fb      	bne.n	8476 <__fpclassifyd+0x12>
    847e:	2002      	movs	r0, #2
    8480:	e008      	b.n	8494 <__fpclassifyd+0x30>
    8482:	030b      	lsls	r3, r1, #12
    8484:	d001      	beq.n	848a <__fpclassifyd+0x26>
    8486:	2005      	movs	r0, #5
    8488:	e004      	b.n	8494 <__fpclassifyd+0x30>
    848a:	2800      	cmp	r0, #0
    848c:	d1fb      	bne.n	8486 <__fpclassifyd+0x22>
    848e:	2003      	movs	r0, #3
    8490:	e000      	b.n	8494 <__fpclassifyd+0x30>
    8492:	2004      	movs	r0, #4
    8494:	bd00      	pop	{pc}
    8496:	46c0      	nop			; (mov r8, r8)
    8498:	7ff00000 	.word	0x7ff00000
    849c:	00000000 	.word	0x00000000

000084a0 <frexp>:
    84a0:	b513      	push	{r0, r1, r4, lr}
    84a2:	9000      	str	r0, [sp, #0]
    84a4:	9101      	str	r1, [sp, #4]
    84a6:	1c14      	adds	r4, r2, #0
    84a8:	9a01      	ldr	r2, [sp, #4]
    84aa:	4817      	ldr	r0, [pc, #92]	; (8508 <frexp+0x68>)
    84ac:	0053      	lsls	r3, r2, #1
    84ae:	2100      	movs	r1, #0
    84b0:	085b      	lsrs	r3, r3, #1
    84b2:	6021      	str	r1, [r4, #0]
    84b4:	4283      	cmp	r3, r0
    84b6:	d81e      	bhi.n	84f6 <frexp+0x56>
    84b8:	9900      	ldr	r1, [sp, #0]
    84ba:	4319      	orrs	r1, r3
    84bc:	d01b      	beq.n	84f6 <frexp+0x56>
    84be:	4813      	ldr	r0, [pc, #76]	; (850c <frexp+0x6c>)
    84c0:	4283      	cmp	r3, r0
    84c2:	d80d      	bhi.n	84e0 <frexp+0x40>
    84c4:	4b0f      	ldr	r3, [pc, #60]	; (8504 <frexp+0x64>)
    84c6:	4a0e      	ldr	r2, [pc, #56]	; (8500 <frexp+0x60>)
    84c8:	9800      	ldr	r0, [sp, #0]
    84ca:	9901      	ldr	r1, [sp, #4]
    84cc:	f7fa faf4 	bl	2ab8 <__aeabi_dmul>
    84d0:	9000      	str	r0, [sp, #0]
    84d2:	9101      	str	r1, [sp, #4]
    84d4:	9a01      	ldr	r2, [sp, #4]
    84d6:	2136      	movs	r1, #54	; 0x36
    84d8:	0053      	lsls	r3, r2, #1
    84da:	4248      	negs	r0, r1
    84dc:	085b      	lsrs	r3, r3, #1
    84de:	6020      	str	r0, [r4, #0]
    84e0:	490b      	ldr	r1, [pc, #44]	; (8510 <frexp+0x70>)
    84e2:	0d1b      	lsrs	r3, r3, #20
    84e4:	1858      	adds	r0, r3, r1
    84e6:	6823      	ldr	r3, [r4, #0]
    84e8:	1819      	adds	r1, r3, r0
    84ea:	6021      	str	r1, [r4, #0]
    84ec:	4c09      	ldr	r4, [pc, #36]	; (8514 <frexp+0x74>)
    84ee:	480a      	ldr	r0, [pc, #40]	; (8518 <frexp+0x78>)
    84f0:	4022      	ands	r2, r4
    84f2:	4302      	orrs	r2, r0
    84f4:	9201      	str	r2, [sp, #4]
    84f6:	9800      	ldr	r0, [sp, #0]
    84f8:	9901      	ldr	r1, [sp, #4]
    84fa:	bd1c      	pop	{r2, r3, r4, pc}
    84fc:	46c0      	nop			; (mov r8, r8)
    84fe:	46c0      	nop			; (mov r8, r8)
    8500:	00000000 	.word	0x00000000
    8504:	43500000 	.word	0x43500000
    8508:	7fefffff 	.word	0x7fefffff
    850c:	000fffff 	.word	0x000fffff
    8510:	fffffc02 	.word	0xfffffc02
    8514:	800fffff 	.word	0x800fffff
    8518:	3fe00000 	.word	0x3fe00000
    851c:	46c0      	nop			; (mov r8, r8)
    851e:	46c0      	nop			; (mov r8, r8)

00008520 <__init_cpp>:
    8520:	b510      	push	{r4, lr}
    8522:	4c0b      	ldr	r4, [pc, #44]	; (8550 <__init_cpp+0x30>)
    8524:	4b0b      	ldr	r3, [pc, #44]	; (8554 <__init_cpp+0x34>)
    8526:	429c      	cmp	r4, r3
    8528:	d002      	beq.n	8530 <__init_cpp+0x10>
    852a:	cc01      	ldmia	r4!, {r0}
    852c:	4780      	blx	r0
    852e:	e7f9      	b.n	8524 <__init_cpp+0x4>
    8530:	4c09      	ldr	r4, [pc, #36]	; (8558 <__init_cpp+0x38>)
    8532:	480a      	ldr	r0, [pc, #40]	; (855c <__init_cpp+0x3c>)
    8534:	4284      	cmp	r4, r0
    8536:	d002      	beq.n	853e <__init_cpp+0x1e>
    8538:	cc08      	ldmia	r4!, {r3}
    853a:	4798      	blx	r3
    853c:	e7f9      	b.n	8532 <__init_cpp+0x12>
    853e:	4c08      	ldr	r4, [pc, #32]	; (8560 <__init_cpp+0x40>)
    8540:	4908      	ldr	r1, [pc, #32]	; (8564 <__init_cpp+0x44>)
    8542:	428c      	cmp	r4, r1
    8544:	d002      	beq.n	854c <__init_cpp+0x2c>
    8546:	cc04      	ldmia	r4!, {r2}
    8548:	4790      	blx	r2
    854a:	e7f9      	b.n	8540 <__init_cpp+0x20>
    854c:	bd10      	pop	{r4, pc}
    854e:	46c0      	nop			; (mov r8, r8)
    8550:	00008ae0 	.word	0x00008ae0
    8554:	00008ae0 	.word	0x00008ae0
    8558:	00008ae0 	.word	0x00008ae0
    855c:	00008ae0 	.word	0x00008ae0
    8560:	00008ae0 	.word	0x00008ae0
    8564:	00008ae0 	.word	0x00008ae0

00008568 <__fini_cpp>:
    8568:	b510      	push	{r4, lr}
    856a:	4c08      	ldr	r4, [pc, #32]	; (858c <__fini_cpp+0x24>)
    856c:	4b08      	ldr	r3, [pc, #32]	; (8590 <__fini_cpp+0x28>)
    856e:	429c      	cmp	r4, r3
    8570:	d002      	beq.n	8578 <__fini_cpp+0x10>
    8572:	cc04      	ldmia	r4!, {r2}
    8574:	4790      	blx	r2
    8576:	e7f9      	b.n	856c <__fini_cpp+0x4>
    8578:	4c06      	ldr	r4, [pc, #24]	; (8594 <__fini_cpp+0x2c>)
    857a:	4807      	ldr	r0, [pc, #28]	; (8598 <__fini_cpp+0x30>)
    857c:	4284      	cmp	r4, r0
    857e:	d003      	beq.n	8588 <__fini_cpp+0x20>
    8580:	3c04      	subs	r4, #4
    8582:	6821      	ldr	r1, [r4, #0]
    8584:	4788      	blx	r1
    8586:	e7f8      	b.n	857a <__fini_cpp+0x12>
    8588:	bd10      	pop	{r4, pc}
    858a:	46c0      	nop			; (mov r8, r8)
    858c:	00008ae0 	.word	0x00008ae0
    8590:	00008ae0 	.word	0x00008ae0
    8594:	00008ae0 	.word	0x00008ae0
    8598:	00008ae0 	.word	0x00008ae0

0000859c <__destroy_global_chain>:
    859c:	4b05      	ldr	r3, [pc, #20]	; (85b4 <__destroy_global_chain+0x18>)
    859e:	b510      	push	{r4, lr}
    85a0:	681c      	ldr	r4, [r3, #0]
    85a2:	2c00      	cmp	r4, #0
    85a4:	d004      	beq.n	85b0 <__destroy_global_chain+0x14>
    85a6:	68a0      	ldr	r0, [r4, #8]
    85a8:	6861      	ldr	r1, [r4, #4]
    85aa:	4788      	blx	r1
    85ac:	6824      	ldr	r4, [r4, #0]
    85ae:	e7f8      	b.n	85a2 <__destroy_global_chain+0x6>
    85b0:	bd10      	pop	{r4, pc}
    85b2:	46c0      	nop			; (mov r8, r8)
    85b4:	20000ac8 	.word	0x20000ac8

000085b8 <__init_registers>:
    85b8:	4b05      	ldr	r3, [pc, #20]	; (85d0 <skip_sp+0x4>)
    85ba:	1c18      	adds	r0, r3, #0
    85bc:	2800      	cmp	r0, #0
    85be:	d005      	beq.n	85cc <skip_sp>
    85c0:	4685      	mov	sp, r0
    85c2:	b081      	sub	sp, #4
    85c4:	2000      	movs	r0, #0
    85c6:	43c0      	mvns	r0, r0
    85c8:	9000      	str	r0, [sp, #0]
    85ca:	b001      	add	sp, #4

000085cc <skip_sp>:
    85cc:	46f7      	mov	pc, lr
    85ce:	4770      	bx	lr
    85d0:	20003000 	.word	0x20003000

000085d4 <__init_user>:
    85d4:	46f7      	mov	pc, lr
    85d6:	4770      	bx	lr

000085d8 <__copy_rom_section>:
    85d8:	b500      	push	{lr}
    85da:	4288      	cmp	r0, r1
    85dc:	d01f      	beq.n	861e <__copy_rom_section+0x46>
    85de:	2a00      	cmp	r2, #0
    85e0:	d01d      	beq.n	861e <__copy_rom_section+0x46>
    85e2:	2303      	movs	r3, #3
    85e4:	4219      	tst	r1, r3
    85e6:	d107      	bne.n	85f8 <__copy_rom_section+0x20>
    85e8:	4218      	tst	r0, r3
    85ea:	d105      	bne.n	85f8 <__copy_rom_section+0x20>
    85ec:	429a      	cmp	r2, r3
    85ee:	d903      	bls.n	85f8 <__copy_rom_section+0x20>
    85f0:	c908      	ldmia	r1!, {r3}
    85f2:	3a04      	subs	r2, #4
    85f4:	c008      	stmia	r0!, {r3}
    85f6:	e7f2      	b.n	85de <__copy_rom_section+0x6>
    85f8:	2301      	movs	r3, #1
    85fa:	4219      	tst	r1, r3
    85fc:	d109      	bne.n	8612 <__copy_rom_section+0x3a>
    85fe:	4218      	tst	r0, r3
    8600:	d107      	bne.n	8612 <__copy_rom_section+0x3a>
    8602:	429a      	cmp	r2, r3
    8604:	d905      	bls.n	8612 <__copy_rom_section+0x3a>
    8606:	880b      	ldrh	r3, [r1, #0]
    8608:	3a02      	subs	r2, #2
    860a:	8003      	strh	r3, [r0, #0]
    860c:	3102      	adds	r1, #2
    860e:	3002      	adds	r0, #2
    8610:	e7e5      	b.n	85de <__copy_rom_section+0x6>
    8612:	780b      	ldrb	r3, [r1, #0]
    8614:	3a01      	subs	r2, #1
    8616:	7003      	strb	r3, [r0, #0]
    8618:	3101      	adds	r1, #1
    861a:	3001      	adds	r0, #1
    861c:	e7df      	b.n	85de <__copy_rom_section+0x6>
    861e:	bd00      	pop	{pc}

00008620 <__copy_rom_sections_to_ram>:
    8620:	b538      	push	{r3, r4, r5, lr}
    8622:	4d0b      	ldr	r5, [pc, #44]	; (8650 <__copy_rom_sections_to_ram+0x30>)
    8624:	2d00      	cmp	r5, #0
    8626:	d011      	beq.n	864c <__copy_rom_sections_to_ram+0x2c>
    8628:	2400      	movs	r4, #0
    862a:	192b      	adds	r3, r5, r4
    862c:	6819      	ldr	r1, [r3, #0]
    862e:	2900      	cmp	r1, #0
    8630:	d006      	beq.n	8640 <__copy_rom_sections_to_ram+0x20>
    8632:	192b      	adds	r3, r5, r4
    8634:	6858      	ldr	r0, [r3, #4]
    8636:	689a      	ldr	r2, [r3, #8]
    8638:	f7ff ffce 	bl	85d8 <__copy_rom_section>
    863c:	340c      	adds	r4, #12
    863e:	e7f4      	b.n	862a <__copy_rom_sections_to_ram+0xa>
    8640:	685a      	ldr	r2, [r3, #4]
    8642:	2a00      	cmp	r2, #0
    8644:	d1f5      	bne.n	8632 <__copy_rom_sections_to_ram+0x12>
    8646:	6898      	ldr	r0, [r3, #8]
    8648:	2800      	cmp	r0, #0
    864a:	d1f2      	bne.n	8632 <__copy_rom_sections_to_ram+0x12>
    864c:	bd38      	pop	{r3, r4, r5, pc}
    864e:	46c0      	nop			; (mov r8, r8)
    8650:	00008ae0 	.word	0x00008ae0
    8654:	656c6449 	.word	0x656c6449
    8658:	00000000 	.word	0x00000000
    865c:	666e6f43 	.word	0x666e6f43
    8660:	72756769 	.word	0x72756769
    8664:	6f697461 	.word	0x6f697461
    8668:	0000006e 	.word	0x0000006e
    866c:	6e6e6f43 	.word	0x6e6e6f43
    8670:	69746365 	.word	0x69746365
    8674:	4e20676e 	.word	0x4e20676e
    8678:	6f777465 	.word	0x6f777465
    867c:	00006b72 	.word	0x00006b72
    8680:	6e6e6f43 	.word	0x6e6e6f43
    8684:	69746365 	.word	0x69746365
    8688:	4320676e 	.word	0x4320676e
    868c:	64756f6c 	.word	0x64756f6c
    8690:	00000000 	.word	0x00000000
    8694:	6e6e6f43 	.word	0x6e6e6f43
    8698:	65746365 	.word	0x65746365
    869c:	00000064 	.word	0x00000064
    86a0:	20746f4e 	.word	0x20746f4e
    86a4:	74696e49 	.word	0x74696e49
    86a8:	696c6169 	.word	0x696c6169
    86ac:	0064657a 	.word	0x0064657a
    86b0:	2050434e 	.word	0x2050434e
    86b4:	72677055 	.word	0x72677055
    86b8:	00656461 	.word	0x00656461
    86bc:	6f727245 	.word	0x6f727245
    86c0:	00000072 	.word	0x00000072
    86c4:	6e6b6e55 	.word	0x6e6b6e55
    86c8:	006e776f 	.word	0x006e776f
    86cc:	6e6b6e75 	.word	0x6e6b6e75
    86d0:	006e776f 	.word	0x006e776f
    86d4:	30504d54 	.word	0x30504d54
    86d8:	30303030 	.word	0x30303030
    86dc:	00000031 	.word	0x00000031
    86e0:	2e312e30 	.word	0x2e312e30
    86e4:	00000030 	.word	0x00000030
    86e8:	30322e37 	.word	0x30322e37
    86ec:	0033322e 	.word	0x0033322e
    86f0:	2e362e30 	.word	0x2e362e30
    86f4:	00000031 	.word	0x00000031
    86f8:	74746f42 	.word	0x74746f42
    86fc:	4620656c 	.word	0x4620656c
    8700:	656c6c69 	.word	0x656c6c69
    8704:	00000072 	.word	0x00000072
    8708:	6c6c6568 	.word	0x6c6c6568
    870c:	6f77206f 	.word	0x6f77206f
    8710:	21646c72 	.word	0x21646c72
	...
    8720:	000023d8 	.word	0x000023d8
    8724:	000025a4 	.word	0x000025a4
    8728:	00002698 	.word	0x00002698
    872c:	00002634 	.word	0x00002634
    8730:	00002698 	.word	0x00002698
    8734:	0000260e 	.word	0x0000260e
    8738:	00002698 	.word	0x00002698
    873c:	00002634 	.word	0x00002634
    8740:	000025a4 	.word	0x000025a4
    8744:	000025a4 	.word	0x000025a4
    8748:	0000260e 	.word	0x0000260e
    874c:	00002634 	.word	0x00002634
    8750:	000026ba 	.word	0x000026ba
    8754:	000026ba 	.word	0x000026ba
    8758:	000026ba 	.word	0x000026ba
    875c:	000026a0 	.word	0x000026a0
    8760:	00002be8 	.word	0x00002be8
    8764:	00002e44 	.word	0x00002e44
    8768:	00002e44 	.word	0x00002e44
    876c:	00002e18 	.word	0x00002e18
    8770:	00002d90 	.word	0x00002d90
    8774:	00002d90 	.word	0x00002d90
    8778:	00002e38 	.word	0x00002e38
    877c:	00002e18 	.word	0x00002e18
    8780:	00002d90 	.word	0x00002d90
    8784:	00002e38 	.word	0x00002e38
    8788:	00002d90 	.word	0x00002d90
    878c:	00002e18 	.word	0x00002e18
    8790:	00002e30 	.word	0x00002e30
    8794:	00002e30 	.word	0x00002e30
    8798:	00002e30 	.word	0x00002e30
    879c:	00002e48 	.word	0x00002e48
    87a0:	00005cca 	.word	0x00005cca
    87a4:	00005cca 	.word	0x00005cca
    87a8:	00005cca 	.word	0x00005cca
    87ac:	00005cca 	.word	0x00005cca
    87b0:	00005cca 	.word	0x00005cca
    87b4:	00005cca 	.word	0x00005cca
    87b8:	00005cca 	.word	0x00005cca
    87bc:	00005cca 	.word	0x00005cca
    87c0:	00005cca 	.word	0x00005cca
    87c4:	00005cca 	.word	0x00005cca
    87c8:	00005cca 	.word	0x00005cca
    87cc:	00005cca 	.word	0x00005cca
    87d0:	00005cca 	.word	0x00005cca
    87d4:	00005cca 	.word	0x00005cca
    87d8:	00005cca 	.word	0x00005cca
    87dc:	00005cca 	.word	0x00005cca
    87e0:	00005cca 	.word	0x00005cca
    87e4:	00005cca 	.word	0x00005cca
    87e8:	00005cca 	.word	0x00005cca
    87ec:	00005cca 	.word	0x00005cca
    87f0:	00005cca 	.word	0x00005cca
    87f4:	00005cca 	.word	0x00005cca
    87f8:	00005cca 	.word	0x00005cca

000087fc <RPC_CRC8_TABLE>:
    87fc:	090e0700 15121b1c 31363f38 2d2a2324     ........8?61$#*-
    880c:	797e7770 65626b6c 41464f48 5d5a5354     pw~ylkbeHOFATSZ]
    881c:	e9eee7e0 f5f2fbfc d1d6dfd8 cdcac3c4     ................
    882c:	999e9790 85828b8c a1a6afa8 bdbab3b4     ................
    883c:	cec9c0c7 d2d5dcdb f6f1f8ff eaede4e3     ................
    884c:	beb9b0b7 a2a5acab 8681888f 9a9d9493     ................
    885c:	2e292027 32353c3b 1611181f 0a0d0403     ' ).;<52........
    886c:	5e595057 42454c4b 6661686f 7a7d7473     WPY^KLEBohafst}z
    887c:	80878e89 9c9b9295 b8bfb6b1 a4a3aaad     ................
    888c:	f0f7fef9 ecebe2e5 c8cfc6c1 d4d3dadd     ................
    889c:	60676e69 7c7b7275 585f5651 44434a4d     ing`ur{|QV_XMJCD
    88ac:	10171e19 0c0b0205 282f2621 34333a3d     ........!&/(=:34
    88bc:	4740494e 5b5c5552 7f787176 63646d6a     NI@GRU\[vqx.jmdc
    88cc:	3730393e 2b2c2522 0f080106 13141d1a     >907"%,+........
    88dc:	a7a0a9ae bbbcb5b2 9f989196 83848d8a     ................
    88ec:	d7d0d9de cbccc5c2 efe8e1e6 f3f4fdfa     ................
    88fc:	464e492d 6e692d00 4e2d0066 2d004e41     -INF.-inf.-NAN.-
    890c:	006e616e                                nan.

00008910 <CSWTCH.22>:
    8910:	00000001 00000000 00000000 00000000     ................
	...
    892c:	00000001 00000401                                .....

00008931 <CSWTCH.23>:
    8931:	00000004 00000000 00000000 00000000     ................
	...
    894d:	00000002 80800003                                .....

00008952 <__aeabi_ctype_table_C>:
    8952:	80808000 80808080 90908080 80909090     ................
    8962:	80808080 80808080 80808080 80808080     ................
    8972:	04041880 04040404 04040404 04040404     ................
    8982:	02020204 02020202 04020202 04040404     ................
    8992:	43430404 43434343 41414141 41414141     ..CCCCCCAAAAAAAA
    89a2:	41414141 41414141 41414141 04040404     AAAAAAAAAAAA....
    89b2:	23230404 23232323 21212121 21212121     ..######!!!!!!!!
    89c2:	21212121 21212121 21212121 04040404     !!!!!!!!!!!!....
    89d2:	00000080 00000000 00000000 00000000     ................
	...

00008a58 <digit_values>:
    8a58:	00000000 40240000 00000000 40590000     ......$@......Y@
    8a68:	00000000 408f4000 00000000 40c38800     .....@.@.......@
    8a78:	00000000 40f86a00 00000000 412e8480     .....j.@.......A
    8a88:	00000000 416312d0 00000000 4197d784     ......cA.......A

00008a98 <bit_values>:
    8a98:	00000000 40240000 00000000 40590000     ......$@......Y@
    8aa8:	00000000 40c38800 00000000 4197d784     .......@.......A
    8ab8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
    8ac8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
    8ad8:	7f73bf3c 75154fdd                       <.s..O.u
